/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-07-06 14:56:03.495595
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[0]);
x6=IKsin(j[3]);
x7=IKcos(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((0.1796)*x4);
x11=((1.0)*x5);
x12=((0.139)*x2);
x13=((1.0)*x7);
x14=((1.0)*x6);
x15=((0.139)*x4);
x16=((0.1796)*x2);
x17=((0.1796)*x3);
x18=((1.0)*x1);
x19=((1.0)*x2);
x20=(x1*x5);
x21=(x0*x1);
x22=(x3*x5);
x23=(x0*x2);
x24=(x3*x4);
x25=(x0*x3);
x26=(x2*x5);
IkReal x27=((1.0)*x25);
eetrans[0]=(((x7*(((((-1.0)*x10*x27))+((x16*x21))))))+(((0.19)*x21))+((x6*((((x17*x21))+((x10*x23))))))+((x12*x21))+(((-1.0)*x15*x27)));
IkReal x28=((1.0)*x22);
eetrans[1]=(((x7*(((((-1.0)*x10*x28))+((x16*x20))))))+(((0.19)*x20))+((x6*((((x17*x20))+((x10*x26))))))+((x12*x20))+(((-1.0)*x15*x28)));
eetrans[2]=((0.2015)+(((0.139)*x1*x3))+(((0.19)*x4))+((x7*((((x1*x17))+((x10*x2))))))+((x6*(((((-1.0)*x1*x16))+((x10*x3))))))+((x12*x4)));
eerot[0]=((((-1.0)*x11*x9))+(((-1.0)*x8*((((x14*(((((-1.0)*x18*x23))+(((1.0)*x0*x24))))))+((x13*((((x21*x3))+((x23*x4)))))))))));
eerot[1]=(((x0*x9))+(((-1.0)*x8*((((x14*((((x11*x24))+(((-1.0)*x1*x11*x2))))))+((x13*((((x26*x4))+((x20*x3)))))))))));
IkReal x29=((1.0)*x18);
eerot[2]=((-1.0)*x8*((((x13*((x24+(((-1.0)*x2*x29))))))+((x14*(((((-1.0)*x19*x4))+(((-1.0)*x29*x3)))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.2015)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x31 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x31.valid){
continue;
}
IkReal x30=x31.value;
j0array[0]=((-1.0)*x30);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x30)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
op[0]=((((-7.45457913272454e-7)*px*pz*r00*r02*(cj0*cj0)))+(((-2.40825162133251e-5)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-7.45457913272454e-7)*cj0*px*pz*r01*r02*sj0))+(((-1.73875767060207e-6)*(py*py)*(r01*r01)))+(((-9.63300648533005e-5)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-1.20412581066626e-5)*(pz*pz*pz*pz)*(r02*r02)))+(((-9.63300648533005e-5)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-2.89525659220413e-8)*(cj0*cj0)*(r00*r00)))+(((-4.81650324266502e-5)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-9.15135616106355e-6)*sj0*(py*py*py)*(r02*r02)))+(((9.15135616106355e-6)*r00*r01*sj0*(px*px*px)))+(((9.15135616106355e-6)*cj0*px*(py*py)*(r00*r00)))+(((4.81650324266502e-5)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-2.40825162133251e-5)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((7.45457913272454e-7)*cj0*r00*r01*sj0*(pz*pz)))+(((-4.81650324266502e-5)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((4.81650324266502e-5)*py*pz*r01*r02*(px*px)))+(((4.81650324266502e-5)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-0.000144495097279951)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((2.40825162133251e-5)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.000144495097279951)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((4.81650324266502e-5)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-2.36178007144598e-6)*px*pz*r00*r02))+(((-4.81650324266502e-5)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-4.48738213574737e-7)*cj0*px*(r00*r00)))+(((4.81650324266502e-5)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-7.45457913272454e-7)*cj0*py*pz*r00*r02*sj0))+(((-1.20412581066626e-5)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-8.08161079086764e-7)*(py*py)*(r02*r02)*(sj0*sj0)))+(((9.15135616106355e-6)*cj0*r00*r01*(py*py*py)))+(((4.81650324266502e-5)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((9.15135616106355e-6)*py*sj0*(px*px)*(r01*r01)))+(((4.81650324266502e-5)*pz*r00*r02*(px*px*px)))+(((-1.83027123221271e-5)*px*py*pz*r00*r02*sj0))+(((-4.48738213574737e-7)*py*sj0*(r01*r01)))+(((-9.15135616106355e-6)*py*sj0*(pz*pz)*(r02*r02)))+(((-1.20412581066626e-5)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-9.15135616106355e-6)*cj0*px*(pz*pz)*(r00*r00)))+(((4.81650324266502e-5)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-2.40825162133251e-5)*(px*px)*(py*py)*(r02*r02)))+(((4.81650324266502e-5)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((1.83027123221271e-5)*cj0*pz*r00*r02*(py*py)))+(((-4.81650324266502e-5)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((4.81650324266502e-5)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((4.81650324266502e-5)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((4.81650324266502e-5)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-4.81650324266502e-5)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((3.72728956636227e-7)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-9.15135616106355e-6)*py*sj0*(px*px)*(r02*r02)))+(((3.72728956636227e-7)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-2.40825162133251e-5)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((-5.90375217096503e-7)*pz*r01*r02*sj0))+(((-5.57867634879082e-7)*(py*py)*(r02*r02)))+(((-1.20412581066626e-5)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-9.63300648533005e-5)*px*py*r00*r01*(pz*pz)))+(((-1.20412581066626e-5)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-2.36178007144598e-6)*px*py*r00*r01*(cj0*cj0)))+(((-4.81650324266502e-5)*py*r01*r02*(pz*pz*pz)))+(((1.41637003521766e-7)*cj0*px*(r02*r02)))+(((-1.61632215817353e-6)*cj0*px*py*sj0*(r02*r02)))+(((-4.81650324266502e-5)*(px*px)*(pz*pz)*(r00*r00)))+(((2.40825162133251e-5)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-1.20412581066626e-5)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-2.74540684831906e-5)*px*r00*r01*sj0*(py*py)))+(((-9.15135616106355e-6)*px*r00*r01*sj0*(pz*pz)))+(((-9.15135616106355e-6)*cj0*(px*px*px)*(r00*r00)))+(((2.40825162133251e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((-9.15135616106355e-6)*sj0*(py*py*py)*(r01*r01)))+(((-4.81650324266502e-5)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-9.15135616106355e-6)*cj0*px*(py*py)*(r02*r02)))+(((-4.81650324266502e-5)*(py*py)*(pz*pz)*(r01*r01)))+(((1.18089003572299e-6)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-1.18089003572299e-6)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-3.47751534120415e-6)*px*py*r00*r01))+(((-2.89525659220413e-8)*(r01*r01)*(sj0*sj0)))+(((1.83027123221271e-5)*pz*r01*r02*sj0*(px*px)))+(((4.81650324266502e-5)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-0.000144495097279951)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-1.20412581066626e-5)*(py*py*py*py)*(r02*r02)))+(((-4.48738213574737e-7)*cj0*py*r00*r01))+(((-4.81650324266502e-5)*px*r00*r02*(pz*pz*pz)))+(((-1.20412581066626e-5)*(px*px*px*px)*(r02*r02)))+(((4.81650324266502e-5)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((-9.63300648533005e-5)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((2.71330797021265e-8)*(r02*r02)))+(((-2.36178007144598e-6)*cj0*px*py*sj0*(r01*r01)))+(((-4.81650324266502e-5)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-9.15135616106355e-6)*py*sj0*(pz*pz)*(r01*r01)))+(((-1.20412581066626e-5)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-2.36178007144598e-6)*cj0*px*py*sj0*(r00*r00)))+(((-1.18089003572299e-6)*(pz*pz)*(r02*r02)))+(((-5.79051318440826e-8)*cj0*r00*r01*sj0))+(((4.81650324266502e-5)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((-7.45457913272454e-7)*py*pz*r01*r02*(sj0*sj0)))+(((-4.81650324266502e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-1.83027123221271e-5)*cj0*px*(py*py)*(r01*r01)))+(((4.81650324266502e-5)*pz*r01*r02*(py*py*py)))+(((2.40825162133251e-5)*(px*px)*(pz*pz)*(r02*r02)))+(((-1.73875767060207e-6)*(px*px)*(r00*r00)))+(((4.81650324266502e-5)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((-2.36178007144598e-6)*px*py*r00*r01*(sj0*sj0)))+(((1.41637003521766e-7)*py*sj0*(r02*r02)))+(((4.81650324266502e-5)*px*pz*r00*r02*(py*py)))+(((-5.57867634879082e-7)*(px*px)*(r02*r02)))+(((2.40825162133251e-5)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.81650324266502e-5)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-5.90375217096503e-7)*cj0*pz*r00*r02))+(((-4.48738213574737e-7)*px*r00*r01*sj0))+(((-2.74540684831906e-5)*cj0*py*r00*r01*(px*px)))+(((-4.81650324266502e-5)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((2.40825162133251e-5)*cj0*r00*r01*sj0*(px*px*px*px)))+(((1.18089003572299e-6)*(cj0*cj0)*(py*py)*(r00*r00)))+(((2.40825162133251e-5)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((4.81650324266502e-5)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-1.83027123221271e-5)*cj0*px*py*pz*r01*r02))+(((-8.08161079086764e-7)*(cj0*cj0)*(px*px)*(r02*r02)))+(((2.40825162133251e-5)*(py*py)*(pz*pz)*(r02*r02)))+(((-9.15135616106355e-6)*cj0*(px*px*px)*(r02*r02)))+(((-1.18089003572299e-6)*(cj0*cj0)*(px*px)*(r00*r00)))+(((4.81650324266502e-5)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((-1.83027123221271e-5)*py*sj0*(px*px)*(r00*r00)))+(((-2.36178007144598e-6)*py*pz*r01*r02))+(((-9.15135616106355e-6)*cj0*px*(pz*pz)*(r02*r02)))+(((-9.15135616106355e-6)*cj0*py*r00*r01*(pz*pz))));
op[1]=((((1.83027123221271e-5)*r00*r02*(cj0*cj0)*(px*px*px)))+(((6.95503068240829e-6)*cj0*py*pz*r00*r01))+(((3.66054246442542e-5)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-1.83027123221271e-5)*py*r01*r02*(px*px)))+(((6.95503068240829e-6)*py*pz*sj0*(r01*r01)))+(((2.83274007043533e-7)*py*r01*r02*(sj0*sj0)))+(((-5.49081369663813e-5)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((5.49081369663813e-5)*px*r00*r02*(pz*pz)))+(((-6.95503068240829e-6)*r01*r02*sj0*(px*px)))+(((-5.49081369663813e-5)*cj0*px*r01*r02*sj0*(pz*pz)))+(((3.66054246442542e-5)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((3.66054246442542e-5)*pz*(py*py)*(r01*r01)))+(((6.95503068240829e-6)*px*py*r00*r02*sj0))+(((3.66054246442542e-5)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-5.66548014087065e-7)*cj0*pz*r00*r01*sj0))+(((6.95503068240829e-6)*cj0*px*pz*(r02*r02)))+(((-1.83027123221271e-5)*cj0*r00*r02*sj0*(py*py*py)))+(((5.49081369663813e-5)*cj0*px*r01*r02*sj0*(py*py)))+(((6.95503068240829e-6)*cj0*px*py*r01*r02))+(((8.97476427149473e-7)*pz*(r02*r02)))+(((-5.49081369663813e-5)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-3.66054246442542e-5)*cj0*px*py*pz*sj0*(r01*r01)))+(((-6.95503068240829e-6)*cj0*r00*r02*(py*py)))+(((-1.83027123221271e-5)*px*r00*r02*(cj0*cj0)*(py*py)))+(((-1.83027123221271e-5)*pz*(px*px)*(r02*r02)))+(((-1.83027123221271e-5)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((-1.83027123221271e-5)*r00*r02*(px*px*px)))+(((1.83027123221271e-5)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-1.83027123221271e-5)*py*r01*r02*(px*px)*(sj0*sj0)))+(((1.83027123221271e-5)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((1.83027123221271e-5)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-2.83274007043533e-7)*pz*(cj0*cj0)*(r00*r00)))+(((7.32108492885084e-5)*cj0*px*py*pz*sj0*(r02*r02)))+(((-1.83027123221271e-5)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((2.24342582496671e-7)*r01*r02*sj0))+(((5.49081369663813e-5)*cj0*py*r00*r02*sj0*(px*px)))+(((6.95503068240829e-6)*px*pz*r00*r01*sj0))+(((-3.66054246442542e-5)*px*py*pz*r00*r01*(cj0*cj0)))+(((-1.83027123221271e-5)*px*r00*r02*(py*py)))+(((8.97476427149473e-7)*py*r01*r02))+(((7.32108492885084e-5)*px*py*pz*r00*r01))+(((1.83027123221271e-5)*(pz*pz*pz)*(r02*r02)))+(((2.83274007043533e-7)*px*r00*r02*(cj0*cj0)))+(((-2.83274007043533e-7)*pz*(r01*r01)*(sj0*sj0)))+(((-3.66054246442542e-5)*px*py*pz*r00*r01*(sj0*sj0)))+(((-1.83027123221271e-5)*r01*r02*(py*py*py)))+(((8.97476427149473e-7)*px*r00*r02))+(((3.66054246442542e-5)*px*r00*r02*(py*py)*(sj0*sj0)))+(((2.83274007043533e-7)*cj0*px*r01*r02*sj0))+(((1.83027123221271e-5)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-1.83027123221271e-5)*pz*(py*py)*(r02*r02)))+(((2.24342582496671e-7)*cj0*r00*r02))+(((6.95503068240829e-6)*py*pz*sj0*(r02*r02)))+(((-3.66054246442542e-5)*cj0*px*py*pz*sj0*(r00*r00)))+(((5.49081369663813e-5)*py*r01*r02*(pz*pz)))+(((-5.49081369663813e-5)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-1.83027123221271e-5)*cj0*r01*r02*sj0*(px*px*px)))+(((2.83274007043533e-7)*cj0*py*r00*r02*sj0))+(((3.66054246442542e-5)*pz*(px*px)*(r00*r00)))+(((3.66054246442542e-5)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((1.83027123221271e-5)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((6.95503068240829e-6)*cj0*px*pz*(r00*r00))));
op[2]=((((-9.63300648533005e-5)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((-9.63300648533005e-5)*px*r00*r02*(pz*pz*pz)))+(((1.66437450652589e-7)*(cj0*cj0)*(r00*r00)))+(((-9.63300648533005e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-9.31681075385428e-6)*(pz*pz)*(r02*r02)))+(((9.63300648533005e-5)*pz*r01*r02*(py*py*py)))+(((9.63300648533005e-5)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-1.61632215817353e-6)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-9.63300648533005e-5)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-4.81650324266502e-5)*(px*px)*(py*py)*(r02*r02)))+(((1.24191455382717e-5)*cj0*py*pz*r00*r02*sj0))+(((-0.000288990194559901)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((1.24191455382717e-5)*px*pz*r00*r02*(cj0*cj0)))+(((-1.86336215077086e-5)*px*pz*r00*r02))+(((-1.86336215077086e-5)*py*pz*r01*r02))+(((-4.59325061096231e-6)*(px*px)*(r01*r01)*(sj0*sj0)))+(((9.63300648533005e-5)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-3.23264431634706e-6)*cj0*px*py*sj0*(r02*r02)))+(((-2.40825162133251e-5)*(px*px*px*px)*(r02*r02)))+(((9.63300648533005e-5)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((5.83929541265013e-6)*(px*px)*(r02*r02)))+(((-6.20957276913584e-6)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-9.63300648533005e-5)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-9.63300648533005e-5)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-9.63300648533005e-5)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-9.63300648533005e-5)*(py*py)*(pz*pz)*(r01*r01)))+(((4.81650324266502e-5)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-0.000192660129706601)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((4.81650324266502e-5)*(px*px)*(pz*pz)*(r02*r02)))+(((9.63300648533005e-5)*py*pz*r01*r02*(px*px)))+(((-2.40825162133251e-5)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((9.63300648533005e-5)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-0.000192660129706601)*px*py*r00*r01*(pz*pz)))+(((1.66437450652589e-7)*(r01*r01)*(sj0*sj0)))+(((5.83929541265013e-6)*(py*py)*(r02*r02)))+(((-4.81650324266502e-5)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((9.63300648533005e-5)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((3.32874901305177e-7)*cj0*r00*r01*sj0))+(((-1.24191455382717e-5)*cj0*r00*r01*sj0*(pz*pz)))+(((9.63300648533005e-5)*px*pz*r00*r02*(py*py)))+(((-2.40825162133251e-5)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-2.40825162133251e-5)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((9.63300648533005e-5)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((-4.81650324266502e-5)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((9.18650122192462e-6)*cj0*px*py*sj0*(r01*r01)))+(((-0.000288990194559901)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((9.63300648533005e-5)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((9.63300648533005e-5)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((-0.000288990194559901)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-3.47751534120415e-6)*(py*py)*(r01*r01)))+(((-6.95503068240829e-6)*px*py*r00*r01))+(((9.63300648533005e-5)*pz*r00*r02*(px*px*px)))+(((-9.63300648533005e-5)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((1.24191455382717e-5)*py*pz*r01*r02*(sj0*sj0)))+(((-9.63300648533005e-5)*(px*px)*(pz*pz)*(r00*r00)))+(((-1.61632215817353e-6)*(py*py)*(r02*r02)*(sj0*sj0)))+(((4.59325061096231e-6)*(py*py)*(r01*r01)*(sj0*sj0)))+(((9.63300648533005e-5)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-9.63300648533005e-5)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((4.81650324266502e-5)*cj0*r00*r01*sj0*(py*py*py*py)))+(((4.81650324266502e-5)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-9.63300648533005e-5)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((9.63300648533005e-5)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((4.81650324266502e-5)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-4.81650324266502e-5)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((4.81650324266502e-5)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((9.63300648533005e-5)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((9.63300648533005e-5)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-9.63300648533005e-5)*py*r01*r02*(pz*pz*pz)))+(((9.63300648533005e-5)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-1.70076423092418e-7)*(r02*r02)))+(((-4.59325061096231e-6)*(cj0*cj0)*(py*py)*(r00*r00)))+(((4.81650324266502e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((-2.40825162133251e-5)*(pz*pz*pz*pz)*(r02*r02)))+(((9.18650122192462e-6)*px*py*r00*r01*(cj0*cj0)))+(((-6.20957276913584e-6)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-2.40825162133251e-5)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((9.63300648533005e-5)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-9.63300648533005e-5)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-2.40825162133251e-5)*(py*py*py*py)*(r02*r02)))+(((4.59325061096231e-6)*(cj0*cj0)*(px*px)*(r00*r00)))+(((9.18650122192462e-6)*px*py*r00*r01*(sj0*sj0)))+(((-2.40825162133251e-5)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-0.000192660129706601)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((1.24191455382717e-5)*cj0*px*pz*r01*r02*sj0))+(((-0.000192660129706601)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((9.63300648533005e-5)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((9.18650122192462e-6)*cj0*px*py*sj0*(r00*r00)))+(((-3.47751534120415e-6)*(px*px)*(r00*r00)))+(((-2.40825162133251e-5)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((4.81650324266502e-5)*(py*py)*(pz*pz)*(r02*r02)))+(((9.63300648533005e-5)*cj0*px*r01*r02*sj0*(pz*pz*pz))));
op[3]=((((1.83027123221271e-5)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-2.24342582496671e-7)*r01*r02*sj0))+(((3.66054246442542e-5)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-1.83027123221271e-5)*py*r01*r02*(px*px)))+(((2.83274007043533e-7)*py*r01*r02*(sj0*sj0)))+(((6.95503068240829e-6)*cj0*r00*r02*(py*py)))+(((-5.49081369663813e-5)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((-2.24342582496671e-7)*cj0*r00*r02))+(((5.49081369663813e-5)*px*r00*r02*(pz*pz)))+(((-5.49081369663813e-5)*cj0*px*r01*r02*sj0*(pz*pz)))+(((3.66054246442542e-5)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((3.66054246442542e-5)*pz*(py*py)*(r01*r01)))+(((3.66054246442542e-5)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-5.66548014087065e-7)*cj0*pz*r00*r01*sj0))+(((-1.83027123221271e-5)*cj0*r00*r02*sj0*(py*py*py)))+(((-6.95503068240829e-6)*cj0*px*pz*(r00*r00)))+(((5.49081369663813e-5)*cj0*px*r01*r02*sj0*(py*py)))+(((-6.95503068240829e-6)*py*pz*sj0*(r02*r02)))+(((8.97476427149473e-7)*pz*(r02*r02)))+(((-5.49081369663813e-5)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-3.66054246442542e-5)*cj0*px*py*pz*sj0*(r01*r01)))+(((-6.95503068240829e-6)*cj0*px*pz*(r02*r02)))+(((-1.83027123221271e-5)*px*r00*r02*(cj0*cj0)*(py*py)))+(((-1.83027123221271e-5)*pz*(px*px)*(r02*r02)))+(((-1.83027123221271e-5)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((6.95503068240829e-6)*r01*r02*sj0*(px*px)))+(((-1.83027123221271e-5)*r00*r02*(px*px*px)))+(((1.83027123221271e-5)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-1.83027123221271e-5)*py*r01*r02*(px*px)*(sj0*sj0)))+(((1.83027123221271e-5)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((-6.95503068240829e-6)*py*pz*sj0*(r01*r01)))+(((1.83027123221271e-5)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-2.83274007043533e-7)*pz*(cj0*cj0)*(r00*r00)))+(((7.32108492885084e-5)*cj0*px*py*pz*sj0*(r02*r02)))+(((-1.83027123221271e-5)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((5.49081369663813e-5)*cj0*py*r00*r02*sj0*(px*px)))+(((-3.66054246442542e-5)*px*py*pz*r00*r01*(cj0*cj0)))+(((-1.83027123221271e-5)*px*r00*r02*(py*py)))+(((8.97476427149473e-7)*py*r01*r02))+(((7.32108492885084e-5)*px*py*pz*r00*r01))+(((-6.95503068240829e-6)*px*pz*r00*r01*sj0))+(((1.83027123221271e-5)*(pz*pz*pz)*(r02*r02)))+(((2.83274007043533e-7)*px*r00*r02*(cj0*cj0)))+(((-2.83274007043533e-7)*pz*(r01*r01)*(sj0*sj0)))+(((-3.66054246442542e-5)*px*py*pz*r00*r01*(sj0*sj0)))+(((-1.83027123221271e-5)*r01*r02*(py*py*py)))+(((8.97476427149473e-7)*px*r00*r02))+(((3.66054246442542e-5)*px*r00*r02*(py*py)*(sj0*sj0)))+(((2.83274007043533e-7)*cj0*px*r01*r02*sj0))+(((1.83027123221271e-5)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-1.83027123221271e-5)*pz*(py*py)*(r02*r02)))+(((-3.66054246442542e-5)*cj0*px*py*pz*sj0*(r00*r00)))+(((5.49081369663813e-5)*py*r01*r02*(pz*pz)))+(((-5.49081369663813e-5)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-1.83027123221271e-5)*cj0*r01*r02*sj0*(px*px*px)))+(((-6.95503068240829e-6)*cj0*py*pz*r00*r01))+(((2.83274007043533e-7)*cj0*py*r00*r02*sj0))+(((3.66054246442542e-5)*pz*(px*px)*(r00*r00)))+(((3.66054246442542e-5)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((1.83027123221271e-5)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-6.95503068240829e-6)*cj0*px*py*r01*r02))+(((-6.95503068240829e-6)*px*py*r00*r02*sj0)));
op[4]=((((-7.45457913272454e-7)*px*pz*r00*r02*(cj0*cj0)))+(((-2.40825162133251e-5)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-7.45457913272454e-7)*cj0*px*pz*r01*r02*sj0))+(((-1.73875767060207e-6)*(py*py)*(r01*r01)))+(((-9.63300648533005e-5)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-1.20412581066626e-5)*(pz*pz*pz*pz)*(r02*r02)))+(((-9.63300648533005e-5)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-2.89525659220413e-8)*(cj0*cj0)*(r00*r00)))+(((-4.81650324266502e-5)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((4.81650324266502e-5)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-1.83027123221271e-5)*pz*r01*r02*sj0*(px*px)))+(((-2.40825162133251e-5)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((1.83027123221271e-5)*py*sj0*(px*px)*(r00*r00)))+(((7.45457913272454e-7)*cj0*r00*r01*sj0*(pz*pz)))+(((-4.81650324266502e-5)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((4.81650324266502e-5)*py*pz*r01*r02*(px*px)))+(((4.81650324266502e-5)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-0.000144495097279951)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-9.15135616106355e-6)*cj0*px*(py*py)*(r00*r00)))+(((2.40825162133251e-5)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.000144495097279951)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((4.81650324266502e-5)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((9.15135616106355e-6)*cj0*px*(pz*pz)*(r00*r00)))+(((-2.36178007144598e-6)*px*pz*r00*r02))+(((-4.81650324266502e-5)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((4.48738213574737e-7)*cj0*px*(r00*r00)))+(((9.15135616106355e-6)*cj0*px*(py*py)*(r02*r02)))+(((4.81650324266502e-5)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-7.45457913272454e-7)*cj0*py*pz*r00*r02*sj0))+(((-1.20412581066626e-5)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-8.08161079086764e-7)*(py*py)*(r02*r02)*(sj0*sj0)))+(((4.81650324266502e-5)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((4.81650324266502e-5)*pz*r00*r02*(px*px*px)))+(((5.90375217096503e-7)*pz*r01*r02*sj0))+(((1.83027123221271e-5)*cj0*px*(py*py)*(r01*r01)))+(((-1.20412581066626e-5)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((4.81650324266502e-5)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-2.40825162133251e-5)*(px*px)*(py*py)*(r02*r02)))+(((9.15135616106355e-6)*cj0*py*r00*r01*(pz*pz)))+(((4.81650324266502e-5)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((9.15135616106355e-6)*cj0*(px*px*px)*(r00*r00)))+(((-4.81650324266502e-5)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((4.81650324266502e-5)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((4.81650324266502e-5)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((9.15135616106355e-6)*sj0*(py*py*py)*(r01*r01)))+(((4.81650324266502e-5)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-4.81650324266502e-5)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-1.41637003521766e-7)*cj0*px*(r02*r02)))+(((3.72728956636227e-7)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((3.72728956636227e-7)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-2.40825162133251e-5)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((9.15135616106355e-6)*py*sj0*(pz*pz)*(r01*r01)))+(((-5.57867634879082e-7)*(py*py)*(r02*r02)))+(((-1.20412581066626e-5)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-9.63300648533005e-5)*px*py*r00*r01*(pz*pz)))+(((-1.20412581066626e-5)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-2.36178007144598e-6)*px*py*r00*r01*(cj0*cj0)))+(((-4.81650324266502e-5)*py*r01*r02*(pz*pz*pz)))+(((-1.61632215817353e-6)*cj0*px*py*sj0*(r02*r02)))+(((-4.81650324266502e-5)*(px*px)*(pz*pz)*(r00*r00)))+(((2.40825162133251e-5)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-1.20412581066626e-5)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((2.40825162133251e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((-4.81650324266502e-5)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((9.15135616106355e-6)*sj0*(py*py*py)*(r02*r02)))+(((-4.81650324266502e-5)*(py*py)*(pz*pz)*(r01*r01)))+(((9.15135616106355e-6)*cj0*(px*px*px)*(r02*r02)))+(((1.18089003572299e-6)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-1.18089003572299e-6)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-3.47751534120415e-6)*px*py*r00*r01))+(((-1.83027123221271e-5)*cj0*pz*r00*r02*(py*py)))+(((-2.89525659220413e-8)*(r01*r01)*(sj0*sj0)))+(((1.83027123221271e-5)*cj0*px*py*pz*r01*r02))+(((4.81650324266502e-5)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-0.000144495097279951)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((5.90375217096503e-7)*cj0*pz*r00*r02))+(((4.48738213574737e-7)*py*sj0*(r01*r01)))+(((-1.20412581066626e-5)*(py*py*py*py)*(r02*r02)))+(((-4.81650324266502e-5)*px*r00*r02*(pz*pz*pz)))+(((-1.20412581066626e-5)*(px*px*px*px)*(r02*r02)))+(((2.74540684831906e-5)*cj0*py*r00*r01*(px*px)))+(((4.48738213574737e-7)*px*r00*r01*sj0))+(((4.81650324266502e-5)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((-9.63300648533005e-5)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((2.71330797021265e-8)*(r02*r02)))+(((-2.36178007144598e-6)*cj0*px*py*sj0*(r01*r01)))+(((1.83027123221271e-5)*px*py*pz*r00*r02*sj0))+(((-4.81650324266502e-5)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-1.20412581066626e-5)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-2.36178007144598e-6)*cj0*px*py*sj0*(r00*r00)))+(((-1.18089003572299e-6)*(pz*pz)*(r02*r02)))+(((-9.15135616106355e-6)*r00*r01*sj0*(px*px*px)))+(((9.15135616106355e-6)*cj0*px*(pz*pz)*(r02*r02)))+(((-5.79051318440826e-8)*cj0*r00*r01*sj0))+(((4.81650324266502e-5)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((-7.45457913272454e-7)*py*pz*r01*r02*(sj0*sj0)))+(((-4.81650324266502e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((4.81650324266502e-5)*pz*r01*r02*(py*py*py)))+(((9.15135616106355e-6)*py*sj0*(px*px)*(r02*r02)))+(((2.40825162133251e-5)*(px*px)*(pz*pz)*(r02*r02)))+(((-1.73875767060207e-6)*(px*px)*(r00*r00)))+(((-9.15135616106355e-6)*py*sj0*(px*px)*(r01*r01)))+(((4.81650324266502e-5)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((-2.36178007144598e-6)*px*py*r00*r01*(sj0*sj0)))+(((4.81650324266502e-5)*px*pz*r00*r02*(py*py)))+(((9.15135616106355e-6)*py*sj0*(pz*pz)*(r02*r02)))+(((-5.57867634879082e-7)*(px*px)*(r02*r02)))+(((2.40825162133251e-5)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.81650324266502e-5)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((2.74540684831906e-5)*px*r00*r01*sj0*(py*py)))+(((-4.81650324266502e-5)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((9.15135616106355e-6)*px*r00*r01*sj0*(pz*pz)))+(((2.40825162133251e-5)*cj0*r00*r01*sj0*(px*px*px*px)))+(((1.18089003572299e-6)*(cj0*cj0)*(py*py)*(r00*r00)))+(((2.40825162133251e-5)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((4.81650324266502e-5)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-9.15135616106355e-6)*cj0*r00*r01*(py*py*py)))+(((-8.08161079086764e-7)*(cj0*cj0)*(px*px)*(r02*r02)))+(((2.40825162133251e-5)*(py*py)*(pz*pz)*(r02*r02)))+(((-1.41637003521766e-7)*py*sj0*(r02*r02)))+(((-1.18089003572299e-6)*(cj0*cj0)*(px*px)*(r00*r00)))+(((4.81650324266502e-5)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((4.48738213574737e-7)*cj0*py*r00*r01))+(((-2.36178007144598e-6)*py*pz*r01*r02)));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((((-1.0)*r00*sj0))+((cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
bool bgotonextstatement = true;
do
{
IkReal x32=px*px;
IkReal x33=py*py;
IkReal x34=pz*pz;
IkReal x35=(r01*sj0);
IkReal x36=((0.19)*cj1);
IkReal x37=(cj0*r00);
IkReal x38=((1.0)*cj1);
IkReal x39=((2.0)*pz);
IkReal x40=((1.0)*pz);
IkReal x41=((0.38)*pz);
IkReal x42=(py*r01);
IkReal x43=(px*sj0);
IkReal x44=((0.0361)*cj1);
IkReal x45=((0.0361)*sj1);
IkReal x46=((2.0)*sj1);
IkReal x47=(py*r00);
IkReal x48=((0.19)*sj1);
IkReal x49=(cj0*px);
IkReal x50=((2.0)*cj1);
IkReal x51=(px*r00);
IkReal x52=(sj1*x34);
IkReal x53=(py*r02*sj0);
IkReal x54=(r02*x49);
IkReal x55=((1.0)*sj1*x33);
IkReal x56=((1.0)*sj1*x32);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x43))+((cj0*py)));
evalcond[2]=((-1.0)+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[3]=((((-1.0)*r02*x38))+((sj1*x35))+((sj1*x37)));
evalcond[4]=((((-1.0)*r02*x40))+(((-1.0)*x42))+((x35*x36))+((x36*x37))+((r02*x48))+(((-1.0)*x51)));
evalcond[5]=((((-1.0)*x37*x38))+(((-1.0)*r02*sj1))+(((-1.0)*x35*x38)));
evalcond[6]=((((-1.0)*x37*x40))+(((-1.0)*r02*x36))+((x35*x48))+((x37*x48))+x54+x53+(((-1.0)*x35*x40)));
evalcond[7]=((((-1.0)*r02*x41))+(((-0.38)*x51))+((x43*x47*x50))+((cj1*x32*x37))+(((-1.0)*x33*x37*x38))+((x35*x44))+(((-1.0)*r02*x56))+(((-1.0)*r02*x55))+((x37*x44))+((r02*x52))+((sj1*x39*x51))+((cj1*x39*x54))+((cj1*x39*x53))+((x42*x49*x50))+(((-0.38)*x42))+(((-1.0)*x34*x37*x38))+((r02*x45))+(((-1.0)*x34*x35*x38))+((sj1*x39*x42))+(((-1.0)*x32*x35*x38))+((cj1*x33*x35)));
evalcond[8]=((((-1.0)*x35*x55))+(((-1.0)*r02*x44))+(((-1.0)*r02*x32*x38))+(((-1.0)*x37*x41))+(((-1.0)*sj1*x39*x54))+(((-1.0)*sj1*x39*x53))+((x35*x45))+((x37*x52))+(((0.38)*x53))+(((0.38)*x54))+((x37*x45))+(((-1.0)*r02*x33*x38))+((sj1*x32*x35))+((x35*x52))+((cj1*x39*x51))+((sj1*x33*x37))+(((-1.0)*x42*x46*x49))+(((-1.0)*x37*x56))+((cj1*x39*x42))+(((-1.0)*x35*x41))+((cj1*r02*x34))+(((-1.0)*x43*x46*x47)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x57=((7.6108378330743)*cj1);
cj3array[0]=((-0.309984618096169)+(((-7.6108378330743)*pz*sj1))+(((-1.0)*cj0*px*x57))+(((-1.0)*py*sj0*x57))+(((20.0285206133534)*(py*py)))+(((20.0285206133534)*(px*px)))+(((20.0285206133534)*(pz*pz))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x58=px*px;
IkReal x59=pz*pz;
IkReal x60=py*py;
IkReal x61=(px*sj0);
IkReal x62=((2.0)*py);
IkReal x63=(r00*sj0);
IkReal x64=(cj0*r01);
IkReal x65=(pz*r02);
IkReal x66=((0.38)*cj1);
IkReal x67=((0.38)*r02*sj1);
IkReal x68=((0.38)*pz*sj1);
IkReal x69=((1.0)*x60);
evalcond[0]=((-0.05157716)+(((-1.0)*x61*x67))+(((2.0)*x61*x65))+((r01*x61*x62))+(((-1.0)*px*r01*x66))+((x59*x64))+(((-1.0)*cj0*px*r00*x62))+((x58*x64))+((x58*x63))+(((0.0361)*x64))+(((-1.0)*x59*x63))+((cj0*py*x67))+(((-0.0499288)*(IKcos(j3))))+(((-1.0)*cj0*x62*x65))+(((-1.0)*x64*x68))+(((-1.0)*x64*x69))+((x63*x68))+((py*r00*x66))+(((-0.0361)*x63))+(((-1.0)*x63*x69)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.03301421223823)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-322357.25)+(((-312055.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x70=((868750.0)*pz);
IkReal x71=((1122500.0)*cj3);
IkReal x72=(py*sj0);
IkReal x73=(pz*sj1);
IkReal x74=((868750.0)*sj1);
IkReal x75=((1122500.0)*sj3);
IkReal x76=(cj1*pz);
IkReal x77=(cj0*cj1*px);
IkReal x78=(cj0*px*sj1);
CheckValue<IkReal> x79=IKPowWithIntegerCheck(IKsign(((-322357.25)+(((-312055.0)*cj3)))),-1);
if(!x79.valid){
continue;
}
CheckValue<IkReal> x80 = IKatan2WithCheck(IkReal((((cj0*px*x74))+((sj1*x71*x72))+(((213275.0)*sj3))+(((-1.0)*cj1*x72*x75))+(((-1.0)*x71*x76))+(((-1.0)*x73*x75))+((x72*x74))+((x71*x78))+(((-1.0)*x75*x77))+(((-1.0)*cj1*x70)))),((165062.5)+(((-868750.0)*x77))+(((-1.0)*sj1*x70))+((x75*x76))+(((213275.0)*cj3))+(((-1.0)*x71*x73))+(((-1.0)*x71*x77))+(((-1.0)*sj1*x72*x75))+(((-1.0)*cj1*x71*x72))+(((-868750.0)*cj1*x72))+(((-1.0)*x75*x78))),IKFAST_ATAN2_MAGTHRESH);
if(!x80.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x79.value)))+(x80.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x81=IKsin(j2);
IkReal x82=IKcos(j2);
IkReal x83=(px*sj1);
IkReal x84=(py*sj1);
IkReal x85=((1.0)*r00);
IkReal x86=(cj1*sj0);
IkReal x87=((1.0)*px);
IkReal x88=((1.0)*pz);
IkReal x89=(cj0*r01);
IkReal x90=(pz*sj1);
IkReal x91=(cj0*cj1);
IkReal x92=((0.139)*x81);
IkReal x93=((0.139)*x82);
IkReal x94=((0.1796)*x82);
IkReal x95=((0.1796)*x81);
IkReal x96=(cj3*x95);
IkReal x97=(sj3*x94);
IkReal x98=(sj3*x95);
IkReal x99=(cj3*x94);
IkReal x100=(x92+x96);
IkReal x101=(x99+x98+x93);
evalcond[0]=(x100+((cj0*x83))+((sj0*x84))+(((-1.0)*cj1*x88))+(((-1.0)*x97)));
evalcond[1]=((0.19)+(((-1.0)*sj1*x88))+(((-1.0)*py*x86))+x101+(((-1.0)*x87*x91)));
evalcond[2]=((((-1.0)*cj1*x88*x89))+(((-1.0)*r02*x86*x87))+x100+((r01*x83))+((pz*r00*x86))+(((-1.0)*x84*x85))+((py*r02*x91))+(((-1.0)*x97)));
evalcond[3]=((((-0.19)*x89))+((x89*x90))+(((-1.0)*sj0*x85*x90))+(((-1.0)*cj0*r02*x84))+(((-1.0)*x101))+((r02*sj0*x83))+(((0.19)*r00*sj0))+(((-1.0)*cj1*py*x85))+((cj1*px*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x102=px*px;
IkReal x103=py*py;
IkReal x104=pz*pz;
IkReal x105=(r01*sj0);
IkReal x106=((0.19)*cj1);
IkReal x107=(cj0*r00);
IkReal x108=((1.0)*cj1);
IkReal x109=((2.0)*pz);
IkReal x110=((1.0)*pz);
IkReal x111=((0.38)*pz);
IkReal x112=(py*r01);
IkReal x113=(px*sj0);
IkReal x114=((0.0361)*cj1);
IkReal x115=((0.0361)*sj1);
IkReal x116=((2.0)*sj1);
IkReal x117=(py*r00);
IkReal x118=((0.19)*sj1);
IkReal x119=(cj0*px);
IkReal x120=((2.0)*cj1);
IkReal x121=(px*r00);
IkReal x122=(sj1*x104);
IkReal x123=(py*r02*sj0);
IkReal x124=(r02*x119);
IkReal x125=((1.0)*sj1*x103);
IkReal x126=((1.0)*sj1*x102);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x113))+((cj0*py)));
evalcond[2]=((1.0)+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[3]=(((sj1*x107))+((sj1*x105))+(((-1.0)*r02*x108)));
evalcond[4]=(((r02*x118))+((x106*x107))+((x105*x106))+(((-1.0)*r02*x110))+(((-1.0)*x121))+(((-1.0)*x112)));
evalcond[5]=((((-1.0)*x107*x108))+(((-1.0)*r02*sj1))+(((-1.0)*x105*x108)));
evalcond[6]=((((-1.0)*x107*x110))+x124+x123+(((-1.0)*r02*x106))+((x105*x118))+(((-1.0)*x105*x110))+((x107*x118)));
evalcond[7]=(((sj1*x109*x121))+((r02*x115))+((cj1*x102*x107))+((cj1*x103*x105))+((r02*x122))+((sj1*x109*x112))+(((-1.0)*x104*x107*x108))+(((-0.38)*x112))+(((-0.38)*x121))+(((-1.0)*r02*x125))+(((-1.0)*r02*x126))+(((-1.0)*x103*x107*x108))+((x113*x117*x120))+(((-1.0)*x102*x105*x108))+(((-1.0)*x104*x105*x108))+(((-1.0)*r02*x111))+((x105*x114))+((cj1*x109*x124))+((cj1*x109*x123))+((x112*x119*x120))+((x107*x114)));
evalcond[8]=(((cj1*x109*x112))+(((-1.0)*x107*x111))+((sj1*x102*x105))+((sj1*x103*x107))+(((-1.0)*sj1*x109*x123))+(((-1.0)*sj1*x109*x124))+((cj1*r02*x104))+(((-1.0)*x107*x126))+(((-1.0)*x113*x116*x117))+(((-1.0)*x112*x116*x119))+((x105*x122))+(((-1.0)*r02*x103*x108))+(((-1.0)*r02*x114))+(((-1.0)*x105*x125))+(((-1.0)*r02*x102*x108))+((x105*x115))+(((-1.0)*x105*x111))+((cj1*x109*x121))+((x107*x122))+(((0.38)*x124))+(((0.38)*x123))+((x107*x115)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x127=((7.6108378330743)*cj1);
cj3array[0]=((-0.309984618096169)+(((-7.6108378330743)*pz*sj1))+(((-1.0)*py*sj0*x127))+(((20.0285206133534)*(py*py)))+(((20.0285206133534)*(px*px)))+(((20.0285206133534)*(pz*pz)))+(((-1.0)*cj0*px*x127)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x128=px*px;
IkReal x129=pz*pz;
IkReal x130=py*py;
IkReal x131=(px*sj0);
IkReal x132=((2.0)*py);
IkReal x133=(r00*sj0);
IkReal x134=(cj0*r01);
IkReal x135=(pz*r02);
IkReal x136=((0.38)*cj1);
IkReal x137=((0.38)*r02*sj1);
IkReal x138=((0.38)*pz*sj1);
IkReal x139=((1.0)*x130);
evalcond[0]=((0.05157716)+((py*r00*x136))+(((0.0361)*x134))+(((-1.0)*px*r01*x136))+(((2.0)*x131*x135))+((x129*x134))+(((-0.0361)*x133))+(((-1.0)*x134*x138))+(((-1.0)*x134*x139))+(((-1.0)*cj0*x132*x135))+(((-1.0)*x133*x139))+(((0.0499288)*(IKcos(j3))))+((x133*x138))+(((-1.0)*cj0*px*r00*x132))+((x128*x133))+((x128*x134))+(((-1.0)*x129*x133))+(((-1.0)*x131*x137))+((cj0*py*x137))+((r01*x131*x132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.03301421223823)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-322357.25)+(((-312055.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x140=((868750.0)*pz);
IkReal x141=((1122500.0)*cj3);
IkReal x142=(py*sj0);
IkReal x143=(pz*sj1);
IkReal x144=((868750.0)*sj1);
IkReal x145=((1122500.0)*sj3);
IkReal x146=(cj1*pz);
IkReal x147=(cj0*cj1*px);
IkReal x148=(cj0*px*sj1);
CheckValue<IkReal> x149 = IKatan2WithCheck(IkReal((((sj1*x141*x142))+((cj0*px*x144))+(((-1.0)*cj1*x142*x145))+((x142*x144))+(((-1.0)*x143*x145))+(((213275.0)*sj3))+((x141*x148))+(((-1.0)*x141*x146))+(((-1.0)*x145*x147))+(((-1.0)*cj1*x140)))),((165062.5)+(((-868750.0)*x147))+((x145*x146))+(((-1.0)*sj1*x142*x145))+(((213275.0)*cj3))+(((-868750.0)*cj1*x142))+(((-1.0)*x141*x143))+(((-1.0)*x141*x147))+(((-1.0)*sj1*x140))+(((-1.0)*x145*x148))+(((-1.0)*cj1*x141*x142))),IKFAST_ATAN2_MAGTHRESH);
if(!x149.valid){
continue;
}
CheckValue<IkReal> x150=IKPowWithIntegerCheck(IKsign(((-322357.25)+(((-312055.0)*cj3)))),-1);
if(!x150.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x149.value)+(((1.5707963267949)*(x150.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x151=IKsin(j2);
IkReal x152=IKcos(j2);
IkReal x153=(px*sj1);
IkReal x154=(py*sj1);
IkReal x155=((1.0)*r00);
IkReal x156=(cj1*sj0);
IkReal x157=((1.0)*px);
IkReal x158=((1.0)*pz);
IkReal x159=(cj0*r01);
IkReal x160=(pz*sj1);
IkReal x161=(cj0*cj1);
IkReal x162=((0.139)*x151);
IkReal x163=((0.139)*x152);
IkReal x164=((0.1796)*x152);
IkReal x165=((0.1796)*x151);
IkReal x166=(sj3*x164);
IkReal x167=(cj3*x165);
IkReal x168=(sj3*x165);
IkReal x169=(cj3*x164);
IkReal x170=(x162+x167);
IkReal x171=(x168+x169+x163);
evalcond[0]=((((-1.0)*x166))+((cj0*x153))+((sj0*x154))+x170+(((-1.0)*cj1*x158)));
evalcond[1]=((0.19)+(((-1.0)*x157*x161))+x171+(((-1.0)*py*x156))+(((-1.0)*sj1*x158)));
evalcond[2]=((((-1.0)*cj1*x158*x159))+(((-1.0)*x154*x155))+(((-1.0)*x170))+((r01*x153))+((pz*r00*x156))+x166+((py*r02*x161))+(((-1.0)*r02*x156*x157)));
evalcond[3]=((((-1.0)*cj1*py*x155))+(((-0.19)*x159))+x171+(((-1.0)*cj0*r02*x154))+((r02*sj0*x153))+(((-1.0)*sj0*x155*x160))+(((0.19)*r00*sj0))+((cj1*px*r01))+((x159*x160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x172=px*px;
IkReal x173=py*py;
IkReal x174=pz*pz;
IkReal x175=((475000.0)*sj1);
IkReal x176=(r00*sj0);
IkReal x177=(cj0*r01);
IkReal x178=((2500000.0)*pz);
IkReal x179=(cj0*r00);
IkReal x180=((190.0)*cj1);
IkReal x181=(py*r01);
IkReal x182=((2500000.0)*px);
IkReal x183=((475000.0)*cj1);
IkReal x184=(px*r02*sj0);
IkReal x185=((1250000.0)*x174);
IkReal x186=((1250000.0)*x173);
IkReal x187=((1250000.0)*x172);
IkReal x188=(cj0*py*r02);
CheckValue<IkReal> x189=IKPowWithIntegerCheck(cj4,-1);
if(!x189.valid){
continue;
}
CheckValue<IkReal> x190=IKPowWithIntegerCheck(sj4,-1);
if(!x190.valid){
continue;
}
if( IKabs(((0.00719424460431655)*(x189.value)*(((((1000.0)*pz*r02))+(((-1.0)*r01*sj0*x180))+(((-1.0)*x179*x180))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00))+(((1000.0)*x181)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.60228164906827e-5)*(x190.value)*((((x177*x187))+((x177*x185))+(((-1.0)*x178*x188))+((x176*x187))+(((-1.0)*py*x179*x182))+((x178*x184))+(((-64471.45)*sj4))+(((-45125.0)*x176))+((pz*x175*x176))+(((-1.0)*pz*x175*x177))+(((-1.0)*px*r01*x183))+((x175*x188))+(((-1.0)*x176*x186))+(((-1.0)*x176*x185))+(((-1.0)*x177*x186))+(((45125.0)*x177))+(((-1.0)*x175*x184))+((sj0*x181*x182))+((py*r00*x183)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00719424460431655)*(x189.value)*(((((1000.0)*pz*r02))+(((-1.0)*r01*sj0*x180))+(((-1.0)*x179*x180))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00))+(((1000.0)*x181))))))+IKsqr(((1.60228164906827e-5)*(x190.value)*((((x177*x187))+((x177*x185))+(((-1.0)*x178*x188))+((x176*x187))+(((-1.0)*py*x179*x182))+((x178*x184))+(((-64471.45)*sj4))+(((-45125.0)*x176))+((pz*x175*x176))+(((-1.0)*pz*x175*x177))+(((-1.0)*px*r01*x183))+((x175*x188))+(((-1.0)*x176*x186))+(((-1.0)*x176*x185))+(((-1.0)*x177*x186))+(((45125.0)*x177))+(((-1.0)*x175*x184))+((sj0*x181*x182))+((py*r00*x183))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00719424460431655)*(x189.value)*(((((1000.0)*pz*r02))+(((-1.0)*r01*sj0*x180))+(((-1.0)*x179*x180))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00))+(((1000.0)*x181))))), ((1.60228164906827e-5)*(x190.value)*((((x177*x187))+((x177*x185))+(((-1.0)*x178*x188))+((x176*x187))+(((-1.0)*py*x179*x182))+((x178*x184))+(((-64471.45)*sj4))+(((-45125.0)*x176))+((pz*x175*x176))+(((-1.0)*pz*x175*x177))+(((-1.0)*px*r01*x183))+((x175*x188))+(((-1.0)*x176*x186))+(((-1.0)*x176*x185))+(((-1.0)*x177*x186))+(((45125.0)*x177))+(((-1.0)*x175*x184))+((sj0*x181*x182))+((py*r00*x183))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x191=IKcos(j3);
IkReal x192=px*px;
IkReal x193=pz*pz;
IkReal x194=py*py;
IkReal x195=(r01*sj0);
IkReal x196=((2.0)*py);
IkReal x197=(r00*sj0);
IkReal x198=((0.19)*cj1);
IkReal x199=(px*sj0);
IkReal x200=(py*sj0);
IkReal x201=((1.0)*pz);
IkReal x202=(cj0*r01);
IkReal x203=((0.38)*cj1);
IkReal x204=((0.19)*sj1);
IkReal x205=((0.139)*cj4);
IkReal x206=(cj0*r00);
IkReal x207=(cj0*px);
IkReal x208=(pz*r02);
IkReal x209=((0.38)*r02*sj1);
IkReal x210=((0.0499288)*x191);
IkReal x211=((0.38)*pz*sj1);
IkReal x212=((1.0)*x193);
IkReal x213=((1.0)*x194);
evalcond[0]=(((x198*x206))+(((-1.0)*px*r00))+(((-1.0)*r02*x201))+((x195*x198))+(((-1.0)*py*r01))+((x205*(IKsin(j3))))+((r02*x204)));
evalcond[1]=((0.01547716)+((x200*x203))+(((-1.0)*x192))+x210+x211+((x203*x207))+(((-1.0)*x212))+(((-1.0)*x213)));
evalcond[2]=((((-1.0)*x195*x201))+(((-1.0)*x191*x205))+(((-1.0)*x201*x206))+(((-0.1796)*cj4))+((x195*x204))+(((-1.0)*r02*x198))+((x204*x206))+((r02*x207))+((r02*x200)));
evalcond[3]=(((py*r00*x203))+(((2.0)*x199*x208))+((x197*x211))+(((-1.0)*px*r01*x203))+((x192*x202))+(((-1.0)*cj0*x196*x208))+(((0.0361)*x202))+(((-0.05157716)*sj4))+(((-1.0)*sj4*x210))+((cj0*py*x209))+((x192*x197))+(((-1.0)*px*x196*x206))+(((-1.0)*x199*x209))+(((-0.0361)*x197))+(((-1.0)*x202*x213))+(((-1.0)*x202*x211))+(((-1.0)*x197*x213))+(((-1.0)*x197*x212))+((px*x195*x196))+((x193*x202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x214=(cj3*cj4);
j2eval[0]=((((1.29208633093525)*cj4))+x214);
j2eval[1]=IKsign(((((449.0)*cj4))+(((347.5)*x214))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
bool bgotonextstatement = true;
do
{
IkReal x215=px*px;
IkReal x216=pz*pz;
IkReal x217=py*py;
IkReal x218=((0.0499288)*cj3);
IkReal x219=(r01*sj0);
IkReal x220=((0.19)*cj1);
IkReal x221=(py*r02);
IkReal x222=(cj0*sj1);
IkReal x223=((1.0)*cj1);
IkReal x224=((1.0)*sj1);
IkReal x225=(cj0*r00);
IkReal x226=((2.0)*pz);
IkReal x227=(px*r02);
IkReal x228=(py*sj1);
IkReal x229=(cj0*r01);
IkReal x230=((1.0)*sj0);
IkReal x231=((0.0361)*cj1);
IkReal x232=(cj1*px);
IkReal x233=(r00*sj0);
IkReal x234=((2.0)*py);
IkReal x235=((0.38)*cj0);
IkReal x236=((0.38)*r01);
IkReal x237=((1.0)*pz);
IkReal x238=((0.38)*sj0);
IkReal x239=(cj1*py);
IkReal x240=((0.38)*pz);
IkReal x241=((0.0361)*sj1);
IkReal x242=(px*r00);
IkReal x243=((0.19)*sj1);
IkReal x244=(r00*x217);
IkReal x245=(r02*x216);
IkReal x246=(r02*x215);
IkReal x247=((1.0)*x217);
IkReal x248=(r00*x216);
IkReal x249=(r02*x217);
IkReal x250=((1.0)*x215);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x230))+((cj0*py)));
evalcond[2]=((-1.0)+x229+(((-1.0)*r00*x230)));
evalcond[3]=((((-1.0)*r02*x223))+((r00*x222))+((sj1*x219)));
evalcond[4]=((((-1.0)*x242))+((r02*x243))+(((-1.0)*r02*x237))+((x219*x220))+((x220*x225))+(((-1.0)*py*r01)));
evalcond[5]=((((-1.0)*r02*x224))+(((-1.0)*x219*x223))+(((-1.0)*x223*x225)));
evalcond[6]=((0.01547716)+((x232*x235))+x218+(((-1.0)*x216))+((x238*x239))+(((-1.0)*x247))+((sj1*x240))+(((-1.0)*x250)));
evalcond[7]=((((-1.0)*x225*x237))+(((-1.0)*r02*x220))+((sj0*x221))+((cj0*x227))+(((0.19)*r00*x222))+((x219*x243))+(((-1.0)*x219*x237)));
evalcond[8]=((-0.05157716)+(((-1.0)*px*x225*x234))+((x216*x229))+(((-1.0)*x229*x247))+((sj0*x226*x227))+(((-0.0361)*x233))+((x215*x229))+(((-1.0)*cj0*x221*x226))+((px*x219*x234))+(((-1.0)*pz*x222*x236))+(((-1.0)*x230*x244))+(((-1.0)*x230*x248))+(((0.0361)*x229))+(((0.38)*x221*x222))+((sj1*x233*x240))+((x215*x233))+(((-1.0)*sj1*x227*x238))+(((-1.0)*x218))+(((0.38)*r00*x239))+(((-1.0)*x232*x236)));
evalcond[9]=(((sj1*x226*x242))+(((-1.0)*x215*x219*x223))+((r02*x241))+(((-1.0)*py*x236))+((r01*x226*x228))+((cj1*x217*x219))+(((-0.38)*x242))+((x219*x231))+((x225*x231))+((x229*x232*x234))+((cj0*cj1*x226*x227))+(((-1.0)*r02*x240))+(((-1.0)*x216*x219*x223))+(((-1.0)*x216*x223*x225))+((cj1*x215*x225))+((cj1*sj0*x221*x226))+(((-1.0)*x224*x249))+(((-1.0)*x224*x246))+(((-1.0)*x217*x223*x225))+((sj1*x245))+((x232*x233*x234)));
evalcond[10]=((((-1.0)*x217*x219*x224))+((sj1*x215*x219))+((r01*x226*x239))+((sj1*x216*x219))+(((-1.0)*r00*x222*x250))+(((-1.0)*x225*x240))+(((-1.0)*x222*x226*x227))+(((-1.0)*r02*x231))+((cj1*x245))+(((-1.0)*x223*x246))+(((-1.0)*x223*x249))+(((-2.0)*px*x228*x233))+(((0.0361)*r00*x222))+(((-1.0)*x219*x240))+((x227*x235))+((x221*x238))+(((-1.0)*px*r01*x222*x234))+((x219*x241))+((x222*x248))+((x222*x244))+((r00*x226*x232))+(((-1.0)*sj0*sj1*x221*x226)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.03301421223823)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-322357.25)+(((-312055.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x251=((868750.0)*pz);
IkReal x252=((1122500.0)*cj3);
IkReal x253=(py*sj0);
IkReal x254=(pz*sj1);
IkReal x255=((868750.0)*sj1);
IkReal x256=((1122500.0)*sj3);
IkReal x257=(cj1*pz);
IkReal x258=(cj0*cj1*px);
IkReal x259=(cj0*px*sj1);
CheckValue<IkReal> x260=IKPowWithIntegerCheck(IKsign(((-322357.25)+(((-312055.0)*cj3)))),-1);
if(!x260.valid){
continue;
}
CheckValue<IkReal> x261 = IKatan2WithCheck(IkReal(((((-1.0)*x252*x257))+(((-1.0)*cj1*x253*x256))+((sj1*x252*x253))+(((-1.0)*x256*x258))+(((213275.0)*sj3))+(((-1.0)*x254*x256))+((x253*x255))+((cj0*px*x255))+(((-1.0)*cj1*x251))+((x252*x259)))),((165062.5)+(((-1.0)*x252*x254))+(((-1.0)*x252*x258))+(((-1.0)*cj1*x252*x253))+(((-1.0)*x256*x259))+(((-868750.0)*x258))+((x256*x257))+(((-1.0)*sj1*x253*x256))+(((-1.0)*sj1*x251))+(((213275.0)*cj3))+(((-868750.0)*cj1*x253))),IKFAST_ATAN2_MAGTHRESH);
if(!x261.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x260.value)))+(x261.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x262=IKsin(j2);
IkReal x263=IKcos(j2);
IkReal x264=(px*sj1);
IkReal x265=(py*sj1);
IkReal x266=((1.0)*r00);
IkReal x267=(cj1*sj0);
IkReal x268=((1.0)*px);
IkReal x269=((1.0)*pz);
IkReal x270=(cj0*r01);
IkReal x271=(pz*sj1);
IkReal x272=(cj0*cj1);
IkReal x273=((0.139)*x262);
IkReal x274=((0.139)*x263);
IkReal x275=((0.1796)*x263);
IkReal x276=((0.1796)*x262);
IkReal x277=(cj3*x276);
IkReal x278=(sj3*x275);
IkReal x279=(sj3*x276);
IkReal x280=(cj3*x275);
IkReal x281=(x277+x273);
IkReal x282=(x274+x279+x280);
evalcond[0]=(((cj0*x264))+(((-1.0)*cj1*x269))+x281+(((-1.0)*x278))+((sj0*x265)));
evalcond[1]=((0.19)+(((-1.0)*sj1*x269))+(((-1.0)*py*x267))+x282+(((-1.0)*x268*x272)));
evalcond[2]=(x281+(((-1.0)*r02*x267*x268))+((py*r02*x272))+(((-1.0)*cj1*x269*x270))+(((-1.0)*x278))+(((-1.0)*x265*x266))+((pz*r00*x267))+((r01*x264)));
evalcond[3]=(((r02*sj0*x264))+((x270*x271))+(((-1.0)*sj0*x266*x271))+(((-1.0)*cj0*r02*x265))+(((0.19)*r00*sj0))+(((-1.0)*x282))+((cj1*px*r01))+(((-1.0)*cj1*py*x266))+(((-0.19)*x270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x283=((0.0499288)*cj3);
IkReal x284=px*px;
IkReal x285=pz*pz;
IkReal x286=py*py;
IkReal x287=(r01*sj0);
IkReal x288=((0.19)*cj1);
IkReal x289=(py*r02);
IkReal x290=(cj0*sj1);
IkReal x291=((1.0)*cj1);
IkReal x292=((1.0)*sj1);
IkReal x293=(cj0*r00);
IkReal x294=((2.0)*pz);
IkReal x295=(px*r02);
IkReal x296=(py*sj1);
IkReal x297=(cj0*r01);
IkReal x298=((1.0)*sj0);
IkReal x299=((0.0361)*cj1);
IkReal x300=(cj1*px);
IkReal x301=(r00*sj0);
IkReal x302=((2.0)*py);
IkReal x303=((0.38)*cj0);
IkReal x304=((0.38)*r01);
IkReal x305=((1.0)*pz);
IkReal x306=((0.38)*sj0);
IkReal x307=(cj1*py);
IkReal x308=((0.38)*pz);
IkReal x309=((0.0361)*sj1);
IkReal x310=(px*r00);
IkReal x311=((0.19)*sj1);
IkReal x312=(r00*x286);
IkReal x313=(r02*x285);
IkReal x314=(r02*x284);
IkReal x315=((1.0)*x286);
IkReal x316=(r00*x285);
IkReal x317=(r02*x286);
IkReal x318=((1.0)*x284);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=(((cj0*py))+(((-1.0)*px*x298)));
evalcond[2]=((1.0)+(((-1.0)*r00*x298))+x297);
evalcond[3]=((((-1.0)*r02*x291))+((r00*x290))+((sj1*x287)));
evalcond[4]=(((r02*x311))+(((-1.0)*r02*x305))+(((-1.0)*py*r01))+(((-1.0)*x310))+((x287*x288))+((x288*x293)));
evalcond[5]=((((-1.0)*x291*x293))+(((-1.0)*r02*x292))+(((-1.0)*x287*x291)));
evalcond[6]=((0.01547716)+x283+(((-1.0)*x315))+(((-1.0)*x318))+(((-1.0)*x285))+((x300*x303))+((sj1*x308))+((x306*x307)));
evalcond[7]=((((0.19)*r00*x290))+(((-1.0)*r02*x288))+(((-1.0)*x287*x305))+(((-1.0)*x293*x305))+((x287*x311))+((sj0*x289))+((cj0*x295)));
evalcond[8]=((0.05157716)+(((-1.0)*x297*x315))+(((-1.0)*sj1*x295*x306))+(((0.38)*r00*x307))+(((0.38)*x289*x290))+((x284*x301))+((sj0*x294*x295))+((x284*x297))+(((0.0361)*x297))+x283+((x285*x297))+(((-1.0)*pz*x290*x304))+((sj1*x301*x308))+(((-1.0)*px*x293*x302))+(((-0.0361)*x301))+(((-1.0)*x300*x304))+(((-1.0)*x298*x312))+(((-1.0)*x298*x316))+((px*x287*x302))+(((-1.0)*cj0*x289*x294)));
evalcond[9]=((((-1.0)*x286*x291*x293))+(((-0.38)*x310))+(((-1.0)*x284*x287*x291))+(((-1.0)*x292*x317))+(((-1.0)*x292*x314))+((sj1*x294*x310))+((sj1*x313))+((cj1*sj0*x289*x294))+((r02*x309))+((x287*x299))+(((-1.0)*r02*x308))+((x297*x300*x302))+(((-1.0)*py*x304))+(((-1.0)*x285*x291*x293))+((cj0*cj1*x294*x295))+((cj1*x284*x293))+(((-1.0)*x285*x287*x291))+((r01*x294*x296))+((x293*x299))+((x300*x301*x302))+((cj1*x286*x287)));
evalcond[10]=((((-1.0)*x291*x317))+(((-1.0)*x291*x314))+((r01*x294*x307))+(((-1.0)*x290*x294*x295))+(((-1.0)*sj0*sj1*x289*x294))+((x287*x309))+(((-1.0)*x287*x308))+((cj1*x313))+(((-1.0)*x286*x287*x292))+(((-1.0)*r02*x299))+((x295*x303))+(((0.0361)*r00*x290))+(((-1.0)*px*r01*x290*x302))+(((-1.0)*x293*x308))+((x289*x306))+((x290*x316))+((x290*x312))+(((-1.0)*r00*x290*x318))+((r00*x294*x300))+(((-2.0)*px*x296*x301))+((sj1*x285*x287))+((sj1*x284*x287)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.03301421223823)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-322357.25)+(((-312055.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x319=((868750.0)*pz);
IkReal x320=((1122500.0)*cj3);
IkReal x321=(py*sj0);
IkReal x322=(pz*sj1);
IkReal x323=((868750.0)*sj1);
IkReal x324=((1122500.0)*sj3);
IkReal x325=(cj1*pz);
IkReal x326=(cj0*cj1*px);
IkReal x327=(cj0*px*sj1);
CheckValue<IkReal> x328=IKPowWithIntegerCheck(IKsign(((-322357.25)+(((-312055.0)*cj3)))),-1);
if(!x328.valid){
continue;
}
CheckValue<IkReal> x329 = IKatan2WithCheck(IkReal((((x320*x327))+((cj0*px*x323))+(((213275.0)*sj3))+(((-1.0)*x322*x324))+(((-1.0)*x320*x325))+(((-1.0)*cj1*x321*x324))+(((-1.0)*cj1*x319))+(((-1.0)*x324*x326))+((sj1*x320*x321))+((x321*x323)))),((165062.5)+(((-868750.0)*cj1*x321))+(((-1.0)*sj1*x321*x324))+(((-1.0)*sj1*x319))+(((-1.0)*x320*x322))+(((-1.0)*x320*x326))+((x324*x325))+(((213275.0)*cj3))+(((-1.0)*x324*x327))+(((-868750.0)*x326))+(((-1.0)*cj1*x320*x321))),IKFAST_ATAN2_MAGTHRESH);
if(!x329.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x328.value)))+(x329.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x330=IKsin(j2);
IkReal x331=IKcos(j2);
IkReal x332=(px*sj1);
IkReal x333=(py*sj1);
IkReal x334=((1.0)*r00);
IkReal x335=(cj1*sj0);
IkReal x336=((1.0)*px);
IkReal x337=((1.0)*pz);
IkReal x338=(cj0*r01);
IkReal x339=(pz*sj1);
IkReal x340=(cj0*cj1);
IkReal x341=((0.139)*x330);
IkReal x342=((0.139)*x331);
IkReal x343=((0.1796)*x331);
IkReal x344=((0.1796)*x330);
IkReal x345=(sj3*x343);
IkReal x346=(cj3*x344);
IkReal x347=(sj3*x344);
IkReal x348=(cj3*x343);
IkReal x349=(x341+x346);
IkReal x350=(x342+x347+x348);
evalcond[0]=(x349+((cj0*x332))+(((-1.0)*cj1*x337))+(((-1.0)*x345))+((sj0*x333)));
evalcond[1]=((0.19)+(((-1.0)*x336*x340))+(((-1.0)*py*x335))+x350+(((-1.0)*sj1*x337)));
evalcond[2]=(((r01*x332))+((pz*r00*x335))+(((-1.0)*x333*x334))+(((-1.0)*cj1*x337*x338))+(((-1.0)*r02*x335*x336))+x345+((py*r02*x340))+(((-1.0)*x349)));
evalcond[3]=(((x338*x339))+x350+(((-1.0)*sj0*x334*x339))+(((-1.0)*cj1*py*x334))+(((0.19)*r00*sj0))+(((-1.0)*cj0*r02*x333))+((cj1*px*r01))+(((-0.19)*x338))+((r02*sj0*x332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x351=px*px;
IkReal x352=pz*pz;
IkReal x353=py*py;
IkReal x354=(r01*sj0);
IkReal x355=((2.0)*py);
IkReal x356=(r00*sj0);
IkReal x357=((0.19)*cj1);
IkReal x358=(cj0*py);
IkReal x359=(px*sj0);
IkReal x360=(py*sj0);
IkReal x361=((1.0)*pz);
IkReal x362=((0.38)*r01);
IkReal x363=(cj1*px);
IkReal x364=(pz*sj1);
IkReal x365=((0.38)*cj1);
IkReal x366=(cj0*r01);
IkReal x367=((0.19)*sj1);
IkReal x368=(cj0*r00);
IkReal x369=(cj0*r02);
IkReal x370=((0.38)*r02*sj1);
IkReal x371=((1.0)*x352);
IkReal x372=((1.0)*x353);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x359))+x358);
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*x356))+x366);
evalcond[3]=((((-1.0)*r02*x361))+(((-1.0)*px*r00))+((x354*x357))+(((-1.0)*py*r01))+((x357*x368))+((r02*x367)));
evalcond[4]=((0.06540596)+(((-1.0)*x372))+(((-1.0)*x371))+(((0.38)*cj0*x363))+(((0.38)*x364))+(((-1.0)*x351))+((x360*x365)));
evalcond[5]=((((-1.0)*x361*x368))+(((-1.0)*x354*x361))+((px*x369))+((x354*x367))+(((-0.3186)*cj4))+(((-1.0)*r02*x357))+((x367*x368))+((r02*x360)));
evalcond[6]=((((0.0361)*x366))+(((-0.10150596)*sj4))+((px*x354*x355))+(((-1.0)*px*x355*x368))+(((-1.0)*pz*x355*x369))+(((-1.0)*x362*x363))+((x358*x370))+(((-0.0361)*x356))+((x352*x366))+(((-1.0)*x356*x372))+(((-1.0)*x356*x371))+(((-1.0)*x366*x372))+((x351*x356))+(((-1.0)*x359*x370))+((py*r00*x365))+(((2.0)*pz*r02*x359))+(((0.38)*x356*x364))+(((-1.0)*cj0*x362*x364))+((x351*x366)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x373=((3.13873195229127)*pz);
IkReal x374=((3.13873195229127)*cj0*px);
IkReal x375=((3.13873195229127)*py*sj0);
if( IKabs(((((-1.0)*sj1*x374))+(((-1.0)*sj1*x375))+((cj1*x373)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.596359070935342)+((sj1*x373))+((cj1*x374))+((cj1*x375)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x374))+(((-1.0)*sj1*x375))+((cj1*x373))))+IKsqr(((-0.596359070935342)+((sj1*x373))+((cj1*x374))+((cj1*x375))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x374))+(((-1.0)*sj1*x375))+((cj1*x373))), ((-0.596359070935342)+((sj1*x373))+((cj1*x374))+((cj1*x375))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x376=IKsin(j2);
IkReal x377=IKcos(j2);
IkReal x378=px*px;
IkReal x379=py*py;
IkReal x380=pz*pz;
IkReal x381=(px*sj1);
IkReal x382=(cj0*r00);
IkReal x383=((0.10150596)*cj4);
IkReal x384=(cj1*sj0);
IkReal x385=((1.0)*r01);
IkReal x386=(sj0*sj1);
IkReal x387=((1.0)*sj1);
IkReal x388=(py*r00);
IkReal x389=((1.0)*cj1);
IkReal x390=(px*r02);
IkReal x391=((2.0)*pz);
IkReal x392=(cj0*r02);
IkReal x393=((0.3186)*sj4);
IkReal x394=((0.38)*pz);
IkReal x395=(r01*sj0);
IkReal x396=(r01*sj1);
IkReal x397=(pz*r00);
IkReal x398=((0.0361)*cj1);
IkReal x399=((0.0361)*r01);
IkReal x400=((0.38)*py);
IkReal x401=(r02*sj0);
IkReal x402=(cj0*pz);
IkReal x403=((0.0361)*sj1);
IkReal x404=(py*r01);
IkReal x405=((2.0)*cj0);
IkReal x406=(cj1*px);
IkReal x407=(sj1*x380);
IkReal x408=(r02*x379);
IkReal x409=(r02*x378);
IkReal x410=(py*r02*x391);
evalcond[0]=(((cj4*x377))+((sj1*x382))+(((-1.0)*r02*x389))+((r01*x386)));
evalcond[1]=((((0.3186)*x376))+((cj0*x381))+((py*x386))+(((-1.0)*pz*x389)));
evalcond[2]=((((-1.0)*x384*x385))+(((-1.0)*cj4*x376))+(((-1.0)*r02*x387))+(((-1.0)*x382*x389)));
evalcond[3]=((0.19)+(((0.3186)*x377))+(((-1.0)*py*x384))+(((-1.0)*pz*x387))+(((-1.0)*cj0*px*x389)));
evalcond[4]=((((-1.0)*x387*x388))+(((-1.0)*cj1*x385*x402))+((cj1*py*x392))+((x376*x393))+((x384*x397))+(((-1.0)*x384*x390))+((r01*x381)));
evalcond[5]=(((x381*x401))+(((-1.0)*x377*x393))+((r01*x406))+(((-0.19)*cj0*r01))+(((-1.0)*py*x387*x392))+(((0.19)*r00*sj0))+(((-1.0)*x386*x397))+(((-1.0)*x388*x389))+((x396*x402)));
evalcond[6]=((((-1.0)*x378*x384*x385))+(((2.0)*px*x384*x388))+((x382*x398))+((r00*x381*x391))+(((-1.0)*x376*x383))+(((-1.0)*r02*x394))+((x384*x410))+((py*x391*x396))+(((-1.0)*x387*x408))+(((-1.0)*x387*x409))+(((-1.0)*x380*x384*x385))+((cj1*x378*x382))+((x404*x405*x406))+((x384*x399))+((r01*x379*x384))+((cj0*cj1*x390*x391))+(((-1.0)*r01*x400))+(((-1.0)*x379*x382*x389))+((r02*x407))+((r02*x403))+(((-0.38)*px*r00))+(((-1.0)*x380*x382*x389)));
evalcond[7]=(((x377*x383))+(((0.38)*cj0*x390))+((r01*x378*x386))+(((-1.0)*x394*x395))+((sj1*x379*x382))+(((-1.0)*x382*x394))+(((-1.0)*r02*x398))+(((-1.0)*x381*x404*x405))+(((-1.0)*x378*x382*x387))+(((-1.0)*x386*x410))+(((-1.0)*x381*x391*x392))+((cj1*x391*x404))+(((-1.0)*x389*x408))+(((-1.0)*x389*x409))+((r01*x380*x386))+((x382*x403))+((x382*x407))+(((-1.0)*x379*x385*x386))+((x400*x401))+((cj1*r02*x380))+((r00*x391*x406))+((x386*x399))+(((-2.0)*sj0*x381*x388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x411=px*px;
IkReal x412=pz*pz;
IkReal x413=py*py;
IkReal x414=(r01*sj0);
IkReal x415=((2.0)*py);
IkReal x416=(r00*sj0);
IkReal x417=((0.19)*cj1);
IkReal x418=(cj0*py);
IkReal x419=(px*sj0);
IkReal x420=(py*sj0);
IkReal x421=((1.0)*pz);
IkReal x422=((0.38)*r01);
IkReal x423=(cj1*px);
IkReal x424=(pz*sj1);
IkReal x425=((0.38)*cj1);
IkReal x426=(cj0*r01);
IkReal x427=((0.19)*sj1);
IkReal x428=(cj0*r00);
IkReal x429=(cj0*r02);
IkReal x430=((0.38)*r02*sj1);
IkReal x431=((1.0)*x412);
IkReal x432=((1.0)*x413);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(x418+(((-1.0)*x419)));
evalcond[2]=((((-1.0)*sj4))+x426+(((-1.0)*x416)));
evalcond[3]=((((-1.0)*px*r00))+((x414*x417))+((r02*x427))+(((-1.0)*r02*x421))+(((-1.0)*py*r01))+((x417*x428)));
evalcond[4]=((-0.03445164)+((x420*x425))+(((-1.0)*x432))+(((-1.0)*x431))+(((0.38)*x424))+(((0.38)*cj0*x423))+(((-1.0)*x411)));
evalcond[5]=((((-1.0)*x421*x428))+((x427*x428))+((x414*x427))+(((-1.0)*r02*x417))+((r02*x420))+(((-0.0406)*cj4))+(((-1.0)*x414*x421))+((px*x429)));
evalcond[6]=((((-1.0)*x422*x423))+(((0.38)*x416*x424))+(((0.0361)*x426))+((py*r00*x425))+(((-1.0)*x416*x431))+(((-1.0)*x416*x432))+((x411*x416))+(((-1.0)*cj0*x422*x424))+((px*x414*x415))+((x411*x426))+((x418*x430))+(((-0.00164836)*sj4))+((x412*x426))+(((-1.0)*x426*x432))+(((-1.0)*px*x415*x428))+(((2.0)*pz*r02*x419))+(((-0.0361)*x416))+(((-1.0)*x419*x430))+(((-1.0)*pz*x415*x429)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x433=((24.6305418719212)*pz);
IkReal x434=((24.6305418719212)*py*sj0);
IkReal x435=((24.6305418719212)*cj0*px);
if( IKabs(((((-1.0)*cj1*x433))+((sj1*x435))+((sj1*x434)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((4.67980295566502)+(((-1.0)*sj1*x433))+(((-1.0)*cj1*x434))+(((-1.0)*cj1*x435)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x433))+((sj1*x435))+((sj1*x434))))+IKsqr(((4.67980295566502)+(((-1.0)*sj1*x433))+(((-1.0)*cj1*x434))+(((-1.0)*cj1*x435))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x433))+((sj1*x435))+((sj1*x434))), ((4.67980295566502)+(((-1.0)*sj1*x433))+(((-1.0)*cj1*x434))+(((-1.0)*cj1*x435))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x436=IKsin(j2);
IkReal x437=IKcos(j2);
IkReal x438=px*px;
IkReal x439=py*py;
IkReal x440=pz*pz;
IkReal x441=(cj0*sj1);
IkReal x442=(r01*sj0);
IkReal x443=((1.0)*cj1);
IkReal x444=(r02*sj1);
IkReal x445=(cj1*r02);
IkReal x446=((1.0)*sj1);
IkReal x447=(py*sj1);
IkReal x448=(py*r00);
IkReal x449=(px*r02);
IkReal x450=(px*r01);
IkReal x451=((2.0)*pz);
IkReal x452=((0.38)*pz);
IkReal x453=(r00*sj0);
IkReal x454=((2.0)*px);
IkReal x455=(cj0*r00);
IkReal x456=((0.0361)*cj1);
IkReal x457=(py*sj0);
IkReal x458=(pz*r01);
IkReal x459=((2.0)*py);
IkReal x460=(py*r01);
IkReal x461=(cj0*px);
IkReal x462=(px*r00);
IkReal x463=(r00*x440);
IkReal x464=(r00*x439);
IkReal x465=((0.0406)*x436);
IkReal x466=((1.0)*x438);
IkReal x467=(cj4*x437);
IkReal x468=(cj4*x436);
IkReal x469=((0.0406)*x437);
IkReal x470=(x451*x457);
evalcond[0]=(((sj0*x447))+((px*x441))+(((-1.0)*x465))+(((-1.0)*pz*x443)));
evalcond[1]=(((sj1*x442))+(((-1.0)*x467))+(((-1.0)*r02*x443))+((r00*x441)));
evalcond[2]=((((-1.0)*x443*x455))+(((-1.0)*x444))+x468+(((-1.0)*x442*x443)));
evalcond[3]=((0.19)+(((-1.0)*x443*x457))+(((-1.0)*x469))+(((-1.0)*pz*x446))+(((-1.0)*x443*x461)));
evalcond[4]=((((-1.0)*cj0*x443*x458))+(((-1.0)*sj4*x465))+((cj1*pz*x453))+(((-1.0)*sj0*x443*x449))+((sj1*x450))+((cj0*py*x445))+(((-1.0)*x446*x448)));
evalcond[5]=(((x441*x458))+((px*sj0*x444))+(((-1.0)*pz*x446*x453))+(((0.19)*x453))+((cj1*x450))+(((-1.0)*x443*x448))+(((-0.19)*cj0*r01))+((sj4*x469))+(((-1.0)*py*r02*x441)));
evalcond[6]=(((x455*x456))+((cj1*sj0*x448*x454))+((x445*x451*x461))+((r01*x447*x451))+((cj1*x439*x442))+(((0.0361)*x444))+(((-1.0)*x440*x443*x455))+((cj1*x438*x455))+(((-1.0)*x439*x443*x455))+(((-1.0)*x438*x442*x443))+((x440*x444))+(((-1.0)*x440*x442*x443))+(((0.00164836)*x468))+((x442*x456))+(((-1.0)*x439*x444))+(((-1.0)*r02*x452))+((sj1*x451*x462))+(((-0.38)*x460))+(((-0.38)*x462))+((x445*x470))+(((-1.0)*x444*x466))+((cj0*cj1*x450*x459)));
evalcond[7]=(((cj1*x451*x462))+((cj1*x451*x460))+((x441*x464))+((x441*x463))+(((-0.0361)*x445))+(((-1.0)*r02*x438*x443))+(((0.38)*r02*x457))+(((-1.0)*x441*x450*x459))+((sj1*x438*x442))+(((0.38)*cj0*x449))+((x440*x445))+(((-1.0)*x442*x452))+(((-1.0)*x452*x455))+(((-1.0)*r02*x439*x443))+((sj1*x440*x442))+(((-1.0)*x447*x453*x454))+(((-1.0)*x444*x470))+(((-0.00164836)*x467))+(((-1.0)*r00*x441*x466))+(((0.0361)*sj1*x442))+(((0.0361)*r00*x441))+(((-1.0)*x441*x449*x451))+(((-1.0)*x439*x442*x446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x481=IKPowWithIntegerCheck(cj4,-1);
if(!x481.valid){
continue;
}
IkReal x471=x481.value;
IkReal x472=((2500.0)*cj4);
IkReal x473=(cj1*pz);
IkReal x474=((449.0)*cj3);
IkReal x475=((-0.00287769784172662)*x471);
IkReal x476=(cj0*cj1*r00);
IkReal x477=((449.0)*r02*sj1);
IkReal x478=(cj1*r01*sj0);
IkReal x479=(cj0*px*sj1);
IkReal x480=(py*sj0*sj1);
CheckValue<IkReal> x482=IKPowWithIntegerCheck(sj3,-1);
if(!x482.valid){
continue;
}
if( IKabs((x475*((((x472*x479))+(((-1.0)*x477))+(((-1.0)*x472*x473))+(((-449.0)*x478))+(((-449.0)*x476))+((x472*x480)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x475*(x482.value)*((((cj3*x472*x479))+(((-1.0)*r02*sj1*x474))+(((-347.5)*r02*sj1))+((cj3*x472*x480))+(((-347.5)*x476))+(((-347.5)*x478))+(((-1.0)*cj3*x472*x473))+(((-1.0)*x474*x478))+(((-1.0)*x474*x476)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x475*((((x472*x479))+(((-1.0)*x477))+(((-1.0)*x472*x473))+(((-449.0)*x478))+(((-449.0)*x476))+((x472*x480))))))+IKsqr((x475*(x482.value)*((((cj3*x472*x479))+(((-1.0)*r02*sj1*x474))+(((-347.5)*r02*sj1))+((cj3*x472*x480))+(((-347.5)*x476))+(((-347.5)*x478))+(((-1.0)*cj3*x472*x473))+(((-1.0)*x474*x478))+(((-1.0)*x474*x476))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x475*((((x472*x479))+(((-1.0)*x477))+(((-1.0)*x472*x473))+(((-449.0)*x478))+(((-449.0)*x476))+((x472*x480))))), (x475*(x482.value)*((((cj3*x472*x479))+(((-1.0)*r02*sj1*x474))+(((-347.5)*r02*sj1))+((cj3*x472*x480))+(((-347.5)*x476))+(((-347.5)*x478))+(((-1.0)*cj3*x472*x473))+(((-1.0)*x474*x478))+(((-1.0)*x474*x476))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x483=IKcos(j2);
IkReal x484=IKsin(j2);
IkReal x485=px*px;
IkReal x486=py*py;
IkReal x487=pz*pz;
IkReal x488=(r01*sj0);
IkReal x489=((1.0)*cj1);
IkReal x490=((1.0)*sj1);
IkReal x491=(py*sj1);
IkReal x492=(cj0*r00);
IkReal x493=((2.0)*pz);
IkReal x494=(cj0*sj1);
IkReal x495=(px*r02);
IkReal x496=(cj1*r02);
IkReal x497=((0.0499288)*cj4);
IkReal x498=(pz*r01);
IkReal x499=(py*sj0);
IkReal x500=(px*r00);
IkReal x501=((2.0)*cj1);
IkReal x502=((0.1796)*sj4);
IkReal x503=(cj0*py);
IkReal x504=((0.0361)*cj1);
IkReal x505=((0.38)*r02);
IkReal x506=((0.38)*pz);
IkReal x507=(r02*sj1);
IkReal x508=(px*r01);
IkReal x509=((0.0361)*sj1);
IkReal x510=((0.05157716)*cj4);
IkReal x511=(py*r01);
IkReal x512=(py*r00);
IkReal x513=((0.01293516)*cj4);
IkReal x514=((0.139)*x484);
IkReal x515=(pz*r00*sj0);
IkReal x516=(cj3*x484);
IkReal x517=(sj3*x484);
IkReal x518=(cj3*x483);
IkReal x519=((0.139)*x483);
IkReal x520=(sj3*x483);
IkReal x521=(sj1*x487);
IkReal x522=(r02*x486);
IkReal x523=(r02*x485);
evalcond[0]=(((cj4*x517))+((cj4*x518))+((sj1*x488))+((sj1*x492))+(((-1.0)*r02*x489)));
evalcond[1]=(((cj4*x520))+(((-1.0)*r02*x490))+(((-1.0)*x489*x492))+(((-1.0)*x488*x489))+(((-1.0)*cj4*x516)));
evalcond[2]=((((-1.0)*pz*x489))+(((0.1796)*x516))+(((-0.1796)*x520))+((px*x494))+((sj0*x491))+x514);
evalcond[3]=((0.19)+(((0.1796)*x518))+(((0.1796)*x517))+(((-1.0)*x489*x499))+(((-1.0)*cj0*px*x489))+x519+(((-1.0)*pz*x490)));
evalcond[4]=((((-1.0)*x490*x512))+((sj4*x514))+((x502*x516))+(((-1.0)*cj0*x489*x498))+((sj1*x508))+(((-1.0)*x502*x520))+((x496*x503))+((cj1*x515))+(((-1.0)*sj0*x489*x495)));
evalcond[5]=((((-1.0)*x502*x517))+(((-1.0)*x502*x518))+(((-1.0)*x490*x515))+((cj1*x508))+((x494*x498))+(((-1.0)*x489*x512))+(((-0.19)*cj0*r01))+((sj0*sj1*x495))+(((0.19)*r00*sj0))+(((-1.0)*sj4*x519))+(((-1.0)*r02*x490*x503)));
evalcond[6]=((((-1.0)*pz*x505))+((sj1*x493*x500))+(((-1.0)*x490*x523))+(((-1.0)*x490*x522))+((x488*x504))+(((-1.0)*x487*x489*x492))+(((-1.0)*x487*x488*x489))+(((-0.38)*x500))+((cj1*x485*x492))+(((-1.0)*x485*x488*x489))+((cj0*cj1*x493*x495))+(((0.0361)*x507))+((x499*x500*x501))+((x487*x507))+((x513*x520))+((x492*x504))+(((-1.0)*x484*x497))+((cj1*x486*x488))+((x493*x496*x499))+((r01*x491*x493))+(((-1.0)*x510*x516))+(((-0.38)*x511))+(((-1.0)*x486*x489*x492))+((x501*x503*x508)));
evalcond[7]=(((x492*x521))+(((-0.0361)*x496))+((x510*x518))+(((-1.0)*x488*x506))+(((-1.0)*x485*x490*x492))+(((-1.0)*x486*x488*x490))+(((-1.0)*x493*x494*x495))+((x488*x509))+((x483*x497))+((cj1*x493*x500))+(((-1.0)*x489*x523))+(((-1.0)*x489*x522))+((x488*x521))+(((-1.0)*r02*sj0*x491*x493))+((x513*x517))+(((0.38)*cj0*x495))+(((-2.0)*sj0*x491*x500))+((x492*x509))+(((-2.0)*cj0*x491*x508))+(((-1.0)*x492*x506))+((sj1*x486*x492))+((x499*x505))+((x487*x496))+((cj1*x493*x511))+((sj1*x485*x488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x524=(sj1*sj3);
IkReal x525=((2500.0)*cj4);
IkReal x526=(cj0*px);
IkReal x527=(py*sj0);
IkReal x528=(cj3*sj1);
IkReal x529=(cj0*r00);
IkReal x530=(cj1*pz);
IkReal x531=((347.5)*sj1);
IkReal x532=((449.0)*r01*sj0);
IkReal x533=((449.0)*cj1*r02);
CheckValue<IkReal> x534=IKPowWithIntegerCheck(IKsign(((((347.5)*cj3*cj4))+(((449.0)*cj4)))),-1);
if(!x534.valid){
continue;
}
CheckValue<IkReal> x535 = IKatan2WithCheck(IkReal(((((-1.0)*x524*x532))+(((-1.0)*x525*x526*x528))+((cj3*x525*x530))+((sj3*x533))+(((-449.0)*x524*x529))+(((-1.0)*x525*x527*x528)))),(((x524*x525*x527))+((x524*x525*x526))+(((-1.0)*x529*x531))+(((-1.0)*x528*x532))+(((347.5)*cj1*r02))+((cj3*x533))+(((-449.0)*x528*x529))+(((-1.0)*r01*sj0*x531))+(((-1.0)*sj3*x525*x530))),IKFAST_ATAN2_MAGTHRESH);
if(!x535.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x534.value)))+(x535.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x536=IKcos(j2);
IkReal x537=IKsin(j2);
IkReal x538=px*px;
IkReal x539=py*py;
IkReal x540=pz*pz;
IkReal x541=(r01*sj0);
IkReal x542=((1.0)*cj1);
IkReal x543=((1.0)*sj1);
IkReal x544=(py*sj1);
IkReal x545=(cj0*r00);
IkReal x546=((2.0)*pz);
IkReal x547=(cj0*sj1);
IkReal x548=(px*r02);
IkReal x549=(cj1*r02);
IkReal x550=((0.0499288)*cj4);
IkReal x551=(pz*r01);
IkReal x552=(py*sj0);
IkReal x553=(px*r00);
IkReal x554=((2.0)*cj1);
IkReal x555=((0.1796)*sj4);
IkReal x556=(cj0*py);
IkReal x557=((0.0361)*cj1);
IkReal x558=((0.38)*r02);
IkReal x559=((0.38)*pz);
IkReal x560=(r02*sj1);
IkReal x561=(px*r01);
IkReal x562=((0.0361)*sj1);
IkReal x563=((0.05157716)*cj4);
IkReal x564=(py*r01);
IkReal x565=(py*r00);
IkReal x566=((0.01293516)*cj4);
IkReal x567=((0.139)*x537);
IkReal x568=(pz*r00*sj0);
IkReal x569=(cj3*x537);
IkReal x570=(sj3*x537);
IkReal x571=(cj3*x536);
IkReal x572=((0.139)*x536);
IkReal x573=(sj3*x536);
IkReal x574=(sj1*x540);
IkReal x575=(r02*x539);
IkReal x576=(r02*x538);
evalcond[0]=(((sj1*x541))+((sj1*x545))+(((-1.0)*r02*x542))+((cj4*x570))+((cj4*x571)));
evalcond[1]=((((-1.0)*x541*x542))+(((-1.0)*x542*x545))+(((-1.0)*cj4*x569))+(((-1.0)*r02*x543))+((cj4*x573)));
evalcond[2]=((((-0.1796)*x573))+((sj0*x544))+(((0.1796)*x569))+((px*x547))+(((-1.0)*pz*x542))+x567);
evalcond[3]=((0.19)+(((-1.0)*cj0*px*x542))+(((-1.0)*pz*x543))+x572+(((0.1796)*x571))+(((0.1796)*x570))+(((-1.0)*x542*x552)));
evalcond[4]=(((cj1*x568))+(((-1.0)*x543*x565))+(((-1.0)*cj0*x542*x551))+((sj4*x567))+((sj1*x561))+(((-1.0)*sj0*x542*x548))+((x549*x556))+(((-1.0)*x555*x573))+((x555*x569)));
evalcond[5]=(((cj1*x561))+(((-1.0)*x543*x568))+(((-1.0)*x542*x565))+(((-0.19)*cj0*r01))+((x547*x551))+(((-1.0)*sj4*x572))+(((0.19)*r00*sj0))+(((-1.0)*x555*x571))+(((-1.0)*x555*x570))+((sj0*sj1*x548))+(((-1.0)*r02*x543*x556)));
evalcond[6]=((((-0.38)*x553))+((x541*x557))+((x546*x549*x552))+(((0.0361)*x560))+((x554*x556*x561))+((cj1*x539*x541))+(((-1.0)*x539*x542*x545))+((x552*x553*x554))+((cj1*x538*x545))+(((-0.38)*x564))+((x566*x573))+(((-1.0)*x563*x569))+(((-1.0)*x538*x541*x542))+(((-1.0)*x540*x542*x545))+((sj1*x546*x553))+((r01*x544*x546))+(((-1.0)*pz*x558))+((cj0*cj1*x546*x548))+((x545*x557))+(((-1.0)*x543*x575))+(((-1.0)*x543*x576))+((x540*x560))+(((-1.0)*x537*x550))+(((-1.0)*x540*x541*x542)));
evalcond[7]=((((-1.0)*r02*sj0*x544*x546))+(((-2.0)*cj0*x544*x561))+((x563*x571))+(((-1.0)*x539*x541*x543))+(((-1.0)*x545*x559))+((cj1*x546*x553))+((x545*x574))+(((0.38)*cj0*x548))+(((-1.0)*x542*x575))+(((-1.0)*x542*x576))+((sj1*x539*x545))+(((-2.0)*sj0*x544*x553))+((x540*x549))+((x545*x562))+((x536*x550))+(((-1.0)*x546*x547*x548))+((sj1*x538*x541))+((x541*x562))+((x566*x570))+((cj1*x546*x564))+((x552*x558))+(((-1.0)*x538*x543*x545))+(((-0.0361)*x549))+(((-1.0)*x541*x559))+((x541*x574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x577=(cj0*r00);
IkReal x578=(cj1*sj3);
IkReal x579=(sj1*sj3);
IkReal x580=(cj1*cj3);
IkReal x581=(r01*sj0);
IkReal x582=((1.0)*cj3*sj1);
IkReal x583=((1.0)*cj3*x581);
CheckValue<IkReal> x584 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x582))+(((-1.0)*x580*x581))+(((-1.0)*x577*x580))+((r02*x578))+(((-1.0)*x579*x581))+(((-1.0)*x577*x579)))),(((x578*x581))+((r02*x580))+((r02*x579))+(((-1.0)*x577*x582))+((x577*x578))+(((-1.0)*x581*x582))),IKFAST_ATAN2_MAGTHRESH);
if(!x584.valid){
continue;
}
CheckValue<IkReal> x585=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x585.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x584.value)+(((1.5707963267949)*(x585.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x586=IKcos(j2);
IkReal x587=IKsin(j2);
IkReal x588=px*px;
IkReal x589=py*py;
IkReal x590=pz*pz;
IkReal x591=(r01*sj0);
IkReal x592=((1.0)*cj1);
IkReal x593=((1.0)*sj1);
IkReal x594=(py*sj1);
IkReal x595=(cj0*r00);
IkReal x596=((2.0)*pz);
IkReal x597=(cj0*sj1);
IkReal x598=(px*r02);
IkReal x599=(cj1*r02);
IkReal x600=((0.0499288)*cj4);
IkReal x601=(pz*r01);
IkReal x602=(py*sj0);
IkReal x603=(px*r00);
IkReal x604=((2.0)*cj1);
IkReal x605=((0.1796)*sj4);
IkReal x606=(cj0*py);
IkReal x607=((0.0361)*cj1);
IkReal x608=((0.38)*r02);
IkReal x609=((0.38)*pz);
IkReal x610=(r02*sj1);
IkReal x611=(px*r01);
IkReal x612=((0.0361)*sj1);
IkReal x613=((0.05157716)*cj4);
IkReal x614=(py*r01);
IkReal x615=(py*r00);
IkReal x616=((0.01293516)*cj4);
IkReal x617=((0.139)*x587);
IkReal x618=(pz*r00*sj0);
IkReal x619=(cj3*x587);
IkReal x620=(sj3*x587);
IkReal x621=(cj3*x586);
IkReal x622=((0.139)*x586);
IkReal x623=(sj3*x586);
IkReal x624=(sj1*x590);
IkReal x625=(r02*x589);
IkReal x626=(r02*x588);
evalcond[0]=(((cj4*x620))+((cj4*x621))+(((-1.0)*r02*x592))+((sj1*x591))+((sj1*x595)));
evalcond[1]=((((-1.0)*cj4*x619))+((cj4*x623))+(((-1.0)*x592*x595))+(((-1.0)*r02*x593))+(((-1.0)*x591*x592)));
evalcond[2]=((((-1.0)*pz*x592))+(((0.1796)*x619))+x617+((sj0*x594))+(((-0.1796)*x623))+((px*x597)));
evalcond[3]=((0.19)+(((-1.0)*x592*x602))+(((0.1796)*x621))+(((0.1796)*x620))+(((-1.0)*pz*x593))+x622+(((-1.0)*cj0*px*x592)));
evalcond[4]=((((-1.0)*x605*x623))+((sj4*x617))+((sj1*x611))+((x605*x619))+(((-1.0)*sj0*x592*x598))+(((-1.0)*cj0*x592*x601))+((cj1*x618))+((x599*x606))+(((-1.0)*x593*x615)));
evalcond[5]=((((-1.0)*x605*x621))+(((-1.0)*x605*x620))+((x597*x601))+(((-0.19)*cj0*r01))+((sj0*sj1*x598))+((cj1*x611))+(((0.19)*r00*sj0))+(((-1.0)*r02*x593*x606))+(((-1.0)*x593*x618))+(((-1.0)*x592*x615))+(((-1.0)*sj4*x622)));
evalcond[6]=(((r01*x594*x596))+((x595*x607))+((x616*x623))+(((-1.0)*x588*x591*x592))+(((-1.0)*x587*x600))+((x591*x607))+((cj1*x588*x595))+(((-1.0)*x589*x592*x595))+((cj0*cj1*x596*x598))+((sj1*x596*x603))+((x604*x606*x611))+((x590*x610))+((x596*x599*x602))+(((-1.0)*x593*x626))+(((-1.0)*x593*x625))+(((-1.0)*x613*x619))+((x602*x603*x604))+(((-1.0)*pz*x608))+(((-0.38)*x614))+(((-1.0)*x590*x592*x595))+(((-0.38)*x603))+((cj1*x589*x591))+(((-1.0)*x590*x591*x592))+(((0.0361)*x610)));
evalcond[7]=(((cj1*x596*x614))+(((0.38)*cj0*x598))+((x591*x612))+((x616*x620))+(((-0.0361)*x599))+((x595*x612))+(((-1.0)*x596*x597*x598))+((x613*x621))+(((-1.0)*x589*x591*x593))+(((-1.0)*x591*x609))+((x595*x624))+(((-1.0)*x592*x626))+(((-1.0)*x592*x625))+((x590*x599))+((x586*x600))+((x602*x608))+(((-2.0)*sj0*x594*x603))+((cj1*x596*x603))+(((-2.0)*cj0*x594*x611))+((sj1*x589*x595))+(((-1.0)*r02*sj0*x594*x596))+((sj1*x588*x591))+(((-1.0)*x588*x593*x595))+((x591*x624))+(((-1.0)*x595*x609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x627=(cj1*sj0);
IkReal x628=(cj0*cj1);
CheckValue<IkReal> x629=IKPowWithIntegerCheck(cj4,-1);
if(!x629.valid){
continue;
}
if( IKabs(((0.00719424460431655)*(x629.value)*(((((1000.0)*pz*r02))+(((-190.0)*r00*x628))+(((1000.0)*py*r01))+(((-190.0)*r01*x627))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.309984618096169)+(((-7.6108378330743)*pz*sj1))+(((-7.6108378330743)*px*x628))+(((20.0285206133534)*(py*py)))+(((-7.6108378330743)*py*x627))+(((20.0285206133534)*(px*px)))+(((20.0285206133534)*(pz*pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00719424460431655)*(x629.value)*(((((1000.0)*pz*r02))+(((-190.0)*r00*x628))+(((1000.0)*py*r01))+(((-190.0)*r01*x627))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00))))))+IKsqr(((-0.309984618096169)+(((-7.6108378330743)*pz*sj1))+(((-7.6108378330743)*px*x628))+(((20.0285206133534)*(py*py)))+(((-7.6108378330743)*py*x627))+(((20.0285206133534)*(px*px)))+(((20.0285206133534)*(pz*pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00719424460431655)*(x629.value)*(((((1000.0)*pz*r02))+(((-190.0)*r00*x628))+(((1000.0)*py*r01))+(((-190.0)*r01*x627))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00))))), ((-0.309984618096169)+(((-7.6108378330743)*pz*sj1))+(((-7.6108378330743)*px*x628))+(((20.0285206133534)*(py*py)))+(((-7.6108378330743)*py*x627))+(((20.0285206133534)*(px*px)))+(((20.0285206133534)*(pz*pz)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x630=IKcos(j3);
IkReal x631=px*px;
IkReal x632=pz*pz;
IkReal x633=py*py;
IkReal x634=(r01*sj0);
IkReal x635=((2.0)*py);
IkReal x636=(r00*sj0);
IkReal x637=((0.19)*cj1);
IkReal x638=(px*sj0);
IkReal x639=(py*sj0);
IkReal x640=((1.0)*pz);
IkReal x641=(cj0*r01);
IkReal x642=((0.38)*cj1);
IkReal x643=((0.19)*sj1);
IkReal x644=((0.139)*cj4);
IkReal x645=(cj0*r00);
IkReal x646=(cj0*px);
IkReal x647=(pz*r02);
IkReal x648=((0.38)*r02*sj1);
IkReal x649=((0.0499288)*x630);
IkReal x650=((0.38)*pz*sj1);
IkReal x651=((1.0)*x632);
IkReal x652=((1.0)*x633);
evalcond[0]=(((x634*x637))+(((-1.0)*px*r00))+((x637*x645))+(((-1.0)*r02*x640))+((r02*x643))+(((-1.0)*py*r01))+((x644*(IKsin(j3)))));
evalcond[1]=((0.01547716)+((x639*x642))+(((-1.0)*x652))+(((-1.0)*x651))+x649+x650+(((-1.0)*x631))+((x642*x646)));
evalcond[2]=(((r02*x639))+(((-1.0)*x630*x644))+(((-0.1796)*cj4))+((x643*x645))+(((-1.0)*x640*x645))+(((-1.0)*r02*x637))+((r02*x646))+((x634*x643))+(((-1.0)*x634*x640)));
evalcond[3]=((((-1.0)*sj4*x649))+((x636*x650))+(((-1.0)*x641*x652))+(((-1.0)*x641*x650))+(((-1.0)*px*x635*x645))+(((2.0)*x638*x647))+(((-0.0361)*x636))+((cj0*py*x648))+(((-0.05157716)*sj4))+((x632*x641))+((px*x634*x635))+((py*r00*x642))+(((-1.0)*cj0*x635*x647))+(((0.0361)*x641))+(((-1.0)*x636*x652))+(((-1.0)*x636*x651))+((x631*x641))+(((-1.0)*px*r01*x642))+((x631*x636))+(((-1.0)*x638*x648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x653=(cj3*cj4);
j2eval[0]=((((1.29208633093525)*cj4))+x653);
j2eval[1]=IKsign(((((449.0)*cj4))+(((347.5)*x653))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
bool bgotonextstatement = true;
do
{
IkReal x654=px*px;
IkReal x655=pz*pz;
IkReal x656=py*py;
IkReal x657=((0.0499288)*cj3);
IkReal x658=(r01*sj0);
IkReal x659=((0.19)*cj1);
IkReal x660=(py*r02);
IkReal x661=(cj0*sj1);
IkReal x662=((1.0)*cj1);
IkReal x663=((1.0)*sj1);
IkReal x664=(cj0*r00);
IkReal x665=((2.0)*pz);
IkReal x666=(px*r02);
IkReal x667=(py*sj1);
IkReal x668=(cj0*r01);
IkReal x669=((1.0)*sj0);
IkReal x670=((0.0361)*cj1);
IkReal x671=(cj1*px);
IkReal x672=(r00*sj0);
IkReal x673=((2.0)*py);
IkReal x674=((0.38)*cj0);
IkReal x675=((0.38)*r01);
IkReal x676=((1.0)*pz);
IkReal x677=((0.38)*sj0);
IkReal x678=(cj1*py);
IkReal x679=((0.38)*pz);
IkReal x680=((0.0361)*sj1);
IkReal x681=(px*r00);
IkReal x682=((0.19)*sj1);
IkReal x683=(r00*x656);
IkReal x684=(r02*x655);
IkReal x685=(r02*x654);
IkReal x686=((1.0)*x656);
IkReal x687=(r00*x655);
IkReal x688=(r02*x656);
IkReal x689=((1.0)*x654);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x669))+((cj0*py)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x669))+x668);
evalcond[3]=(((r00*x661))+((sj1*x658))+(((-1.0)*r02*x662)));
evalcond[4]=((((-1.0)*r02*x676))+((x659*x664))+(((-1.0)*py*r01))+(((-1.0)*x681))+((x658*x659))+((r02*x682)));
evalcond[5]=((((-1.0)*x662*x664))+(((-1.0)*x658*x662))+(((-1.0)*r02*x663)));
evalcond[6]=((0.01547716)+((x671*x674))+(((-1.0)*x689))+(((-1.0)*x686))+(((-1.0)*x655))+((x677*x678))+x657+((sj1*x679)));
evalcond[7]=(((cj0*x666))+((x658*x682))+((sj0*x660))+(((0.19)*r00*x661))+(((-1.0)*x658*x676))+(((-1.0)*x664*x676))+(((-1.0)*r02*x659)));
evalcond[8]=((-0.05157716)+(((0.38)*r00*x678))+(((0.0361)*x668))+((px*x658*x673))+(((-0.0361)*x672))+(((-1.0)*cj0*x660*x665))+(((-1.0)*sj1*x666*x677))+(((-1.0)*x668*x686))+(((0.38)*x660*x661))+(((-1.0)*x657))+(((-1.0)*px*x664*x673))+((x654*x668))+(((-1.0)*x671*x675))+((x654*x672))+((sj0*x665*x666))+((sj1*x672*x679))+(((-1.0)*pz*x661*x675))+((x655*x668))+(((-1.0)*x669*x687))+(((-1.0)*x669*x683)));
evalcond[9]=((((-1.0)*r02*x679))+((x671*x672*x673))+((x668*x671*x673))+((sj1*x665*x681))+((x664*x670))+(((-0.38)*x681))+((cj1*x656*x658))+(((-1.0)*x663*x685))+(((-1.0)*x663*x688))+((x658*x670))+((cj1*sj0*x660*x665))+(((-1.0)*py*x675))+(((-1.0)*x656*x662*x664))+(((-1.0)*x655*x658*x662))+((cj1*x654*x664))+((sj1*x684))+((r01*x665*x667))+((cj0*cj1*x665*x666))+(((-1.0)*x654*x658*x662))+((r02*x680))+(((-1.0)*x655*x662*x664)));
evalcond[10]=((((-1.0)*r02*x670))+((x661*x683))+((x661*x687))+((x660*x677))+((cj1*x684))+((x658*x680))+(((-1.0)*sj0*sj1*x660*x665))+((sj1*x655*x658))+((r01*x665*x678))+(((-1.0)*px*r01*x661*x673))+(((-1.0)*x662*x688))+(((-1.0)*x662*x685))+(((0.0361)*r00*x661))+(((-1.0)*x658*x679))+(((-1.0)*x661*x665*x666))+(((-1.0)*x664*x679))+((x666*x674))+((sj1*x654*x658))+(((-1.0)*x656*x658*x663))+((r00*x665*x671))+(((-2.0)*px*x667*x672))+(((-1.0)*r00*x661*x689)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.03301421223823)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-322357.25)+(((-312055.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x690=((868750.0)*pz);
IkReal x691=((1122500.0)*cj3);
IkReal x692=(py*sj0);
IkReal x693=(pz*sj1);
IkReal x694=((868750.0)*sj1);
IkReal x695=((1122500.0)*sj3);
IkReal x696=(cj1*pz);
IkReal x697=(cj0*cj1*px);
IkReal x698=(cj0*px*sj1);
CheckValue<IkReal> x699=IKPowWithIntegerCheck(IKsign(((-322357.25)+(((-312055.0)*cj3)))),-1);
if(!x699.valid){
continue;
}
CheckValue<IkReal> x700 = IKatan2WithCheck(IkReal(((((-1.0)*x693*x695))+(((-1.0)*cj1*x690))+(((213275.0)*sj3))+((x691*x698))+((x692*x694))+(((-1.0)*cj1*x692*x695))+((sj1*x691*x692))+(((-1.0)*x695*x697))+((cj0*px*x694))+(((-1.0)*x691*x696)))),((165062.5)+((x695*x696))+(((-1.0)*sj1*x690))+(((-1.0)*sj1*x692*x695))+(((213275.0)*cj3))+(((-1.0)*x695*x698))+(((-868750.0)*cj1*x692))+(((-868750.0)*x697))+(((-1.0)*x691*x697))+(((-1.0)*x691*x693))+(((-1.0)*cj1*x691*x692))),IKFAST_ATAN2_MAGTHRESH);
if(!x700.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x699.value)))+(x700.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x701=IKsin(j2);
IkReal x702=IKcos(j2);
IkReal x703=(px*sj1);
IkReal x704=(py*sj1);
IkReal x705=((1.0)*r00);
IkReal x706=(cj1*sj0);
IkReal x707=((1.0)*px);
IkReal x708=((1.0)*pz);
IkReal x709=(cj0*r01);
IkReal x710=(pz*sj1);
IkReal x711=(cj0*cj1);
IkReal x712=((0.139)*x701);
IkReal x713=((0.139)*x702);
IkReal x714=((0.1796)*x702);
IkReal x715=((0.1796)*x701);
IkReal x716=(cj3*x715);
IkReal x717=(sj3*x714);
IkReal x718=(sj3*x715);
IkReal x719=(cj3*x714);
IkReal x720=(x712+x716);
IkReal x721=(x719+x718+x713);
evalcond[0]=(((cj0*x703))+(((-1.0)*cj1*x708))+(((-1.0)*x717))+((sj0*x704))+x720);
evalcond[1]=((0.19)+(((-1.0)*x707*x711))+(((-1.0)*py*x706))+x721+(((-1.0)*sj1*x708)));
evalcond[2]=(((r01*x703))+((py*r02*x711))+((pz*r00*x706))+(((-1.0)*cj1*x708*x709))+(((-1.0)*x717))+(((-1.0)*x704*x705))+x720+(((-1.0)*r02*x706*x707)));
evalcond[3]=((((-1.0)*sj0*x705*x710))+(((-0.19)*x709))+((r02*sj0*x703))+(((-1.0)*cj1*py*x705))+((x709*x710))+(((-1.0)*x721))+(((-1.0)*cj0*r02*x704))+(((0.19)*r00*sj0))+((cj1*px*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x722=((0.0499288)*cj3);
IkReal x723=px*px;
IkReal x724=pz*pz;
IkReal x725=py*py;
IkReal x726=(r01*sj0);
IkReal x727=((0.19)*cj1);
IkReal x728=(py*r02);
IkReal x729=(cj0*sj1);
IkReal x730=((1.0)*cj1);
IkReal x731=((1.0)*sj1);
IkReal x732=(cj0*r00);
IkReal x733=((2.0)*pz);
IkReal x734=(px*r02);
IkReal x735=(py*sj1);
IkReal x736=(cj0*r01);
IkReal x737=((1.0)*sj0);
IkReal x738=((0.0361)*cj1);
IkReal x739=(cj1*px);
IkReal x740=(r00*sj0);
IkReal x741=((2.0)*py);
IkReal x742=((0.38)*cj0);
IkReal x743=((0.38)*r01);
IkReal x744=((1.0)*pz);
IkReal x745=((0.38)*sj0);
IkReal x746=(cj1*py);
IkReal x747=((0.38)*pz);
IkReal x748=((0.0361)*sj1);
IkReal x749=(px*r00);
IkReal x750=((0.19)*sj1);
IkReal x751=(r00*x725);
IkReal x752=(r02*x724);
IkReal x753=(r02*x723);
IkReal x754=((1.0)*x725);
IkReal x755=(r00*x724);
IkReal x756=(r02*x725);
IkReal x757=((1.0)*x723);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x737))+((cj0*py)));
evalcond[2]=((1.0)+x736+(((-1.0)*r00*x737)));
evalcond[3]=((((-1.0)*r02*x730))+((r00*x729))+((sj1*x726)));
evalcond[4]=(((r02*x750))+((x727*x732))+((x726*x727))+(((-1.0)*r02*x744))+(((-1.0)*x749))+(((-1.0)*py*r01)));
evalcond[5]=((((-1.0)*r02*x731))+(((-1.0)*x730*x732))+(((-1.0)*x726*x730)));
evalcond[6]=((0.01547716)+((x745*x746))+((x739*x742))+(((-1.0)*x724))+((sj1*x747))+x722+(((-1.0)*x757))+(((-1.0)*x754)));
evalcond[7]=((((-1.0)*r02*x727))+(((-1.0)*x732*x744))+(((-1.0)*x726*x744))+((cj0*x734))+(((0.19)*r00*x729))+((sj0*x728))+((x726*x750)));
evalcond[8]=((0.05157716)+((x723*x736))+(((-1.0)*sj1*x734*x745))+((sj1*x740*x747))+(((0.38)*x728*x729))+((sj0*x733*x734))+(((-1.0)*x737*x751))+(((-1.0)*x737*x755))+(((-0.0361)*x740))+((x723*x740))+(((-1.0)*pz*x729*x743))+(((-1.0)*cj0*x728*x733))+((x724*x736))+x722+(((-1.0)*x739*x743))+(((0.38)*r00*x746))+(((-1.0)*px*x732*x741))+(((-1.0)*x736*x754))+(((0.0361)*x736))+((px*x726*x741)));
evalcond[9]=(((r02*x748))+((cj0*cj1*x733*x734))+((cj1*x723*x732))+((cj1*x725*x726))+((x726*x738))+((x739*x740*x741))+(((-1.0)*x725*x730*x732))+((r01*x733*x735))+((sj1*x752))+(((-1.0)*x724*x726*x730))+(((-1.0)*x724*x730*x732))+((cj1*sj0*x728*x733))+(((-1.0)*x731*x756))+(((-1.0)*x731*x753))+(((-1.0)*py*x743))+(((-1.0)*r02*x747))+(((-1.0)*x723*x726*x730))+(((-0.38)*x749))+((sj1*x733*x749))+((x736*x739*x741))+((x732*x738)));
evalcond[10]=(((x734*x742))+((x726*x748))+(((-1.0)*x730*x753))+(((-1.0)*x730*x756))+((r01*x733*x746))+((cj1*x752))+(((-1.0)*sj0*sj1*x728*x733))+((sj1*x723*x726))+(((-1.0)*r02*x738))+(((-1.0)*x725*x726*x731))+((sj1*x724*x726))+(((-1.0)*x732*x747))+(((0.0361)*r00*x729))+((r00*x733*x739))+(((-1.0)*x729*x733*x734))+(((-1.0)*x726*x747))+((x729*x755))+((x729*x751))+(((-2.0)*px*x735*x740))+(((-1.0)*r00*x729*x757))+(((-1.0)*px*r01*x729*x741))+((x728*x745)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.03301421223823)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-322357.25)+(((-312055.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x758=((868750.0)*pz);
IkReal x759=((1122500.0)*cj3);
IkReal x760=(py*sj0);
IkReal x761=(pz*sj1);
IkReal x762=((868750.0)*sj1);
IkReal x763=((1122500.0)*sj3);
IkReal x764=(cj1*pz);
IkReal x765=(cj0*cj1*px);
IkReal x766=(cj0*px*sj1);
CheckValue<IkReal> x767=IKPowWithIntegerCheck(IKsign(((-322357.25)+(((-312055.0)*cj3)))),-1);
if(!x767.valid){
continue;
}
CheckValue<IkReal> x768 = IKatan2WithCheck(IkReal((((cj0*px*x762))+(((-1.0)*x763*x765))+(((-1.0)*cj1*x760*x763))+((x760*x762))+(((213275.0)*sj3))+((sj1*x759*x760))+((x759*x766))+(((-1.0)*cj1*x758))+(((-1.0)*x761*x763))+(((-1.0)*x759*x764)))),((165062.5)+(((-1.0)*sj1*x758))+(((-1.0)*x763*x766))+(((-1.0)*sj1*x760*x763))+((x763*x764))+(((-868750.0)*cj1*x760))+(((213275.0)*cj3))+(((-1.0)*cj1*x759*x760))+(((-868750.0)*x765))+(((-1.0)*x759*x765))+(((-1.0)*x759*x761))),IKFAST_ATAN2_MAGTHRESH);
if(!x768.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x767.value)))+(x768.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x769=IKsin(j2);
IkReal x770=IKcos(j2);
IkReal x771=(px*sj1);
IkReal x772=(py*sj1);
IkReal x773=((1.0)*r00);
IkReal x774=(cj1*sj0);
IkReal x775=((1.0)*px);
IkReal x776=((1.0)*pz);
IkReal x777=(cj0*r01);
IkReal x778=(pz*sj1);
IkReal x779=(cj0*cj1);
IkReal x780=((0.139)*x769);
IkReal x781=((0.139)*x770);
IkReal x782=((0.1796)*x770);
IkReal x783=((0.1796)*x769);
IkReal x784=(sj3*x782);
IkReal x785=(cj3*x783);
IkReal x786=(sj3*x783);
IkReal x787=(cj3*x782);
IkReal x788=(x780+x785);
IkReal x789=(x781+x786+x787);
evalcond[0]=((((-1.0)*x784))+((sj0*x772))+x788+((cj0*x771))+(((-1.0)*cj1*x776)));
evalcond[1]=((0.19)+(((-1.0)*py*x774))+(((-1.0)*x775*x779))+x789+(((-1.0)*sj1*x776)));
evalcond[2]=(((py*r02*x779))+(((-1.0)*x788))+((pz*r00*x774))+((r01*x771))+(((-1.0)*x772*x773))+x784+(((-1.0)*cj1*x776*x777))+(((-1.0)*r02*x774*x775)));
evalcond[3]=(((x777*x778))+(((-1.0)*cj0*r02*x772))+(((-0.19)*x777))+(((-1.0)*cj1*py*x773))+(((0.19)*r00*sj0))+((r02*sj0*x771))+x789+((cj1*px*r01))+(((-1.0)*sj0*x773*x778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x790=px*px;
IkReal x791=pz*pz;
IkReal x792=py*py;
IkReal x793=(r01*sj0);
IkReal x794=((2.0)*py);
IkReal x795=(r00*sj0);
IkReal x796=((0.19)*cj1);
IkReal x797=(cj0*py);
IkReal x798=(px*sj0);
IkReal x799=(py*sj0);
IkReal x800=((1.0)*pz);
IkReal x801=((0.38)*r01);
IkReal x802=(cj1*px);
IkReal x803=(pz*sj1);
IkReal x804=((0.38)*cj1);
IkReal x805=(cj0*r01);
IkReal x806=((0.19)*sj1);
IkReal x807=(cj0*r00);
IkReal x808=(cj0*r02);
IkReal x809=((0.38)*r02*sj1);
IkReal x810=((1.0)*x791);
IkReal x811=((1.0)*x792);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(x797+(((-1.0)*x798)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*x795))+x805);
evalcond[3]=((((-1.0)*px*r00))+((x793*x796))+(((-1.0)*r02*x800))+((r02*x806))+(((-1.0)*py*r01))+((x796*x807)));
evalcond[4]=((0.06540596)+(((0.38)*x803))+(((-1.0)*x811))+(((-1.0)*x810))+((x799*x804))+(((0.38)*cj0*x802))+(((-1.0)*x790)));
evalcond[5]=(((x793*x806))+((x806*x807))+(((-1.0)*x793*x800))+(((-1.0)*x800*x807))+(((-0.3186)*cj4))+((r02*x799))+((px*x808))+(((-1.0)*r02*x796)));
evalcond[6]=((((-0.10150596)*sj4))+((x790*x805))+(((-1.0)*x798*x809))+(((-1.0)*cj0*x801*x803))+(((2.0)*pz*r02*x798))+((x790*x795))+((x797*x809))+((x791*x805))+((py*r00*x804))+((px*x793*x794))+(((0.38)*x795*x803))+(((-1.0)*x805*x811))+(((-1.0)*px*x794*x807))+(((-1.0)*pz*x794*x808))+(((-1.0)*x801*x802))+(((0.0361)*x805))+(((-0.0361)*x795))+(((-1.0)*x795*x811))+(((-1.0)*x795*x810)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x812=((3.13873195229127)*pz);
IkReal x813=((3.13873195229127)*cj0*px);
IkReal x814=((3.13873195229127)*py*sj0);
if( IKabs((((cj1*x812))+(((-1.0)*sj1*x813))+(((-1.0)*sj1*x814)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.596359070935342)+((sj1*x812))+((cj1*x813))+((cj1*x814)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x812))+(((-1.0)*sj1*x813))+(((-1.0)*sj1*x814))))+IKsqr(((-0.596359070935342)+((sj1*x812))+((cj1*x813))+((cj1*x814))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x812))+(((-1.0)*sj1*x813))+(((-1.0)*sj1*x814))), ((-0.596359070935342)+((sj1*x812))+((cj1*x813))+((cj1*x814))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x815=IKsin(j2);
IkReal x816=IKcos(j2);
IkReal x817=px*px;
IkReal x818=py*py;
IkReal x819=pz*pz;
IkReal x820=(px*sj1);
IkReal x821=(cj0*r00);
IkReal x822=((0.10150596)*cj4);
IkReal x823=(cj1*sj0);
IkReal x824=((1.0)*r01);
IkReal x825=(sj0*sj1);
IkReal x826=((1.0)*sj1);
IkReal x827=(py*r00);
IkReal x828=((1.0)*cj1);
IkReal x829=(px*r02);
IkReal x830=((2.0)*pz);
IkReal x831=(cj0*r02);
IkReal x832=((0.3186)*sj4);
IkReal x833=((0.38)*pz);
IkReal x834=(r01*sj0);
IkReal x835=(r01*sj1);
IkReal x836=(pz*r00);
IkReal x837=((0.0361)*cj1);
IkReal x838=((0.0361)*r01);
IkReal x839=((0.38)*py);
IkReal x840=(r02*sj0);
IkReal x841=(cj0*pz);
IkReal x842=((0.0361)*sj1);
IkReal x843=(py*r01);
IkReal x844=((2.0)*cj0);
IkReal x845=(cj1*px);
IkReal x846=(sj1*x819);
IkReal x847=(r02*x818);
IkReal x848=(r02*x817);
IkReal x849=(py*r02*x830);
evalcond[0]=((((-1.0)*r02*x828))+((sj1*x821))+((r01*x825))+((cj4*x816)));
evalcond[1]=(((py*x825))+(((-1.0)*pz*x828))+(((0.3186)*x815))+((cj0*x820)));
evalcond[2]=((((-1.0)*r02*x826))+(((-1.0)*x823*x824))+(((-1.0)*cj4*x815))+(((-1.0)*x821*x828)));
evalcond[3]=((0.19)+(((-1.0)*pz*x826))+(((0.3186)*x816))+(((-1.0)*cj0*px*x828))+(((-1.0)*py*x823)));
evalcond[4]=((((-1.0)*x823*x829))+((r01*x820))+(((-1.0)*x826*x827))+((cj1*py*x831))+((x823*x836))+((x815*x832))+(((-1.0)*cj1*x824*x841)));
evalcond[5]=(((x820*x840))+(((-1.0)*py*x826*x831))+((x835*x841))+(((-1.0)*x827*x828))+((r01*x845))+(((-0.19)*cj0*r01))+(((-1.0)*x816*x832))+(((0.19)*r00*sj0))+(((-1.0)*x825*x836)));
evalcond[6]=(((r00*x820*x830))+(((-1.0)*x818*x821*x828))+(((-1.0)*x819*x823*x824))+(((-1.0)*r02*x833))+(((-1.0)*x826*x848))+(((-1.0)*x826*x847))+((r02*x842))+((r02*x846))+(((-1.0)*x817*x823*x824))+((x821*x837))+((x843*x844*x845))+((cj0*cj1*x829*x830))+((cj1*x817*x821))+(((-1.0)*x815*x822))+((x823*x849))+((x823*x838))+((r01*x818*x823))+(((-1.0)*x819*x821*x828))+(((-1.0)*r01*x839))+((py*x830*x835))+(((2.0)*px*x823*x827))+(((-0.38)*px*r00)));
evalcond[7]=(((sj1*x818*x821))+(((-1.0)*x821*x833))+(((-1.0)*x828*x847))+(((-1.0)*x828*x848))+(((-1.0)*r02*x837))+((r00*x830*x845))+((x821*x846))+((x821*x842))+((r01*x817*x825))+((x839*x840))+(((-1.0)*x833*x834))+(((-1.0)*x818*x824*x825))+((x816*x822))+(((-2.0)*sj0*x820*x827))+((cj1*x830*x843))+(((-1.0)*x820*x843*x844))+(((-1.0)*x820*x830*x831))+(((-1.0)*x825*x849))+((r01*x819*x825))+(((0.38)*cj0*x829))+(((-1.0)*x817*x821*x826))+((x825*x838))+((cj1*r02*x819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x850=px*px;
IkReal x851=pz*pz;
IkReal x852=py*py;
IkReal x853=(r01*sj0);
IkReal x854=((2.0)*py);
IkReal x855=(r00*sj0);
IkReal x856=((0.19)*cj1);
IkReal x857=(cj0*py);
IkReal x858=(px*sj0);
IkReal x859=(py*sj0);
IkReal x860=((1.0)*pz);
IkReal x861=((0.38)*r01);
IkReal x862=(cj1*px);
IkReal x863=(pz*sj1);
IkReal x864=((0.38)*cj1);
IkReal x865=(cj0*r01);
IkReal x866=((0.19)*sj1);
IkReal x867=(cj0*r00);
IkReal x868=(cj0*r02);
IkReal x869=((0.38)*r02*sj1);
IkReal x870=((1.0)*x851);
IkReal x871=((1.0)*x852);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x858))+x857);
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*x855))+x865);
evalcond[3]=((((-1.0)*px*r00))+((x856*x867))+((r02*x866))+(((-1.0)*r02*x860))+(((-1.0)*py*r01))+((x853*x856)));
evalcond[4]=((-0.03445164)+(((0.38)*x863))+(((-1.0)*x850))+(((0.38)*cj0*x862))+((x859*x864))+(((-1.0)*x871))+(((-1.0)*x870)));
evalcond[5]=((((-1.0)*x853*x860))+(((-1.0)*x860*x867))+((x866*x867))+(((-1.0)*r02*x856))+((px*x868))+((x853*x866))+((r02*x859))+(((-0.0406)*cj4)));
evalcond[6]=(((x850*x855))+((x850*x865))+(((2.0)*pz*r02*x858))+(((0.0361)*x865))+(((0.38)*x855*x863))+(((-1.0)*px*x854*x867))+(((-0.0361)*x855))+(((-1.0)*x861*x862))+((x851*x865))+((px*x853*x854))+((py*r00*x864))+(((-1.0)*cj0*x861*x863))+(((-0.00164836)*sj4))+(((-1.0)*x858*x869))+((x857*x869))+(((-1.0)*pz*x854*x868))+(((-1.0)*x855*x870))+(((-1.0)*x855*x871))+(((-1.0)*x865*x871)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x872=((24.6305418719212)*pz);
IkReal x873=((24.6305418719212)*py*sj0);
IkReal x874=((24.6305418719212)*cj0*px);
if( IKabs((((sj1*x874))+((sj1*x873))+(((-1.0)*cj1*x872)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((4.67980295566502)+(((-1.0)*sj1*x872))+(((-1.0)*cj1*x873))+(((-1.0)*cj1*x874)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x874))+((sj1*x873))+(((-1.0)*cj1*x872))))+IKsqr(((4.67980295566502)+(((-1.0)*sj1*x872))+(((-1.0)*cj1*x873))+(((-1.0)*cj1*x874))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x874))+((sj1*x873))+(((-1.0)*cj1*x872))), ((4.67980295566502)+(((-1.0)*sj1*x872))+(((-1.0)*cj1*x873))+(((-1.0)*cj1*x874))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x875=IKsin(j2);
IkReal x876=IKcos(j2);
IkReal x877=px*px;
IkReal x878=py*py;
IkReal x879=pz*pz;
IkReal x880=(cj0*sj1);
IkReal x881=(r01*sj0);
IkReal x882=((1.0)*cj1);
IkReal x883=(r02*sj1);
IkReal x884=(cj1*r02);
IkReal x885=((1.0)*sj1);
IkReal x886=(py*sj1);
IkReal x887=(py*r00);
IkReal x888=(px*r02);
IkReal x889=(px*r01);
IkReal x890=((2.0)*pz);
IkReal x891=((0.38)*pz);
IkReal x892=(r00*sj0);
IkReal x893=((2.0)*px);
IkReal x894=(cj0*r00);
IkReal x895=((0.0361)*cj1);
IkReal x896=(py*sj0);
IkReal x897=(pz*r01);
IkReal x898=((2.0)*py);
IkReal x899=(py*r01);
IkReal x900=(cj0*px);
IkReal x901=(px*r00);
IkReal x902=(r00*x879);
IkReal x903=(r00*x878);
IkReal x904=((0.0406)*x875);
IkReal x905=((1.0)*x877);
IkReal x906=(cj4*x876);
IkReal x907=(cj4*x875);
IkReal x908=((0.0406)*x876);
IkReal x909=(x890*x896);
evalcond[0]=(((sj0*x886))+((px*x880))+(((-1.0)*pz*x882))+(((-1.0)*x904)));
evalcond[1]=(((sj1*x881))+((r00*x880))+(((-1.0)*x906))+(((-1.0)*r02*x882)));
evalcond[2]=((((-1.0)*x882*x894))+(((-1.0)*x883))+(((-1.0)*x881*x882))+x907);
evalcond[3]=((0.19)+(((-1.0)*x882*x896))+(((-1.0)*pz*x885))+(((-1.0)*x908))+(((-1.0)*x882*x900)));
evalcond[4]=(((sj1*x889))+(((-1.0)*sj0*x882*x888))+((cj1*pz*x892))+(((-1.0)*cj0*x882*x897))+(((-1.0)*sj4*x904))+(((-1.0)*x885*x887))+((cj0*py*x884)));
evalcond[5]=((((-1.0)*py*r02*x880))+((px*sj0*x883))+((x880*x897))+(((-1.0)*x882*x887))+(((0.19)*x892))+(((-1.0)*pz*x885*x892))+(((-0.19)*cj0*r01))+((cj1*x889))+((sj4*x908)));
evalcond[6]=(((cj0*cj1*x889*x898))+(((-1.0)*x878*x883))+(((-0.38)*x899))+((x879*x883))+((x884*x909))+((x894*x895))+((x881*x895))+(((0.0361)*x883))+((x884*x890*x900))+(((-1.0)*x883*x905))+((cj1*x877*x894))+(((0.00164836)*x907))+((cj1*x878*x881))+(((-1.0)*x879*x882*x894))+(((-1.0)*r02*x891))+(((-1.0)*x879*x881*x882))+((r01*x886*x890))+(((-0.38)*x901))+((cj1*sj0*x887*x893))+((sj1*x890*x901))+(((-1.0)*x878*x882*x894))+(((-1.0)*x877*x881*x882)));
evalcond[7]=(((cj1*x890*x901))+(((0.0361)*sj1*x881))+((sj1*x877*x881))+((x879*x884))+(((0.38)*cj0*x888))+((cj1*x890*x899))+(((-1.0)*x880*x888*x890))+(((-1.0)*x886*x892*x893))+(((-1.0)*x881*x891))+(((-1.0)*x878*x881*x885))+(((-1.0)*x883*x909))+((sj1*x879*x881))+(((0.0361)*r00*x880))+(((-0.0361)*x884))+((x880*x902))+((x880*x903))+(((-1.0)*r02*x877*x882))+(((0.38)*r02*x896))+(((-1.0)*x880*x889*x898))+(((-1.0)*x891*x894))+(((-1.0)*r02*x878*x882))+(((-0.00164836)*x906))+(((-1.0)*r00*x880*x905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x920=IKPowWithIntegerCheck(cj4,-1);
if(!x920.valid){
continue;
}
IkReal x910=x920.value;
IkReal x911=((2500.0)*cj4);
IkReal x912=(cj1*pz);
IkReal x913=((449.0)*cj3);
IkReal x914=((-0.00287769784172662)*x910);
IkReal x915=(cj0*cj1*r00);
IkReal x916=((449.0)*r02*sj1);
IkReal x917=(cj1*r01*sj0);
IkReal x918=(cj0*px*sj1);
IkReal x919=(py*sj0*sj1);
CheckValue<IkReal> x921=IKPowWithIntegerCheck(sj3,-1);
if(!x921.valid){
continue;
}
if( IKabs((x914*(((((-1.0)*x916))+((x911*x918))+((x911*x919))+(((-449.0)*x917))+(((-449.0)*x915))+(((-1.0)*x911*x912)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x914*(x921.value)*(((((-1.0)*r02*sj1*x913))+(((-1.0)*x913*x915))+(((-1.0)*x913*x917))+(((-1.0)*cj3*x911*x912))+(((-347.5)*r02*sj1))+((cj3*x911*x919))+((cj3*x911*x918))+(((-347.5)*x917))+(((-347.5)*x915)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x914*(((((-1.0)*x916))+((x911*x918))+((x911*x919))+(((-449.0)*x917))+(((-449.0)*x915))+(((-1.0)*x911*x912))))))+IKsqr((x914*(x921.value)*(((((-1.0)*r02*sj1*x913))+(((-1.0)*x913*x915))+(((-1.0)*x913*x917))+(((-1.0)*cj3*x911*x912))+(((-347.5)*r02*sj1))+((cj3*x911*x919))+((cj3*x911*x918))+(((-347.5)*x917))+(((-347.5)*x915))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x914*(((((-1.0)*x916))+((x911*x918))+((x911*x919))+(((-449.0)*x917))+(((-449.0)*x915))+(((-1.0)*x911*x912))))), (x914*(x921.value)*(((((-1.0)*r02*sj1*x913))+(((-1.0)*x913*x915))+(((-1.0)*x913*x917))+(((-1.0)*cj3*x911*x912))+(((-347.5)*r02*sj1))+((cj3*x911*x919))+((cj3*x911*x918))+(((-347.5)*x917))+(((-347.5)*x915))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x922=IKcos(j2);
IkReal x923=IKsin(j2);
IkReal x924=px*px;
IkReal x925=py*py;
IkReal x926=pz*pz;
IkReal x927=(r01*sj0);
IkReal x928=((1.0)*cj1);
IkReal x929=((1.0)*sj1);
IkReal x930=(py*sj1);
IkReal x931=(cj0*r00);
IkReal x932=((2.0)*pz);
IkReal x933=(cj0*sj1);
IkReal x934=(px*r02);
IkReal x935=(cj1*r02);
IkReal x936=((0.0499288)*cj4);
IkReal x937=(pz*r01);
IkReal x938=(py*sj0);
IkReal x939=(px*r00);
IkReal x940=((2.0)*cj1);
IkReal x941=((0.1796)*sj4);
IkReal x942=(cj0*py);
IkReal x943=((0.0361)*cj1);
IkReal x944=((0.38)*r02);
IkReal x945=((0.38)*pz);
IkReal x946=(r02*sj1);
IkReal x947=(px*r01);
IkReal x948=((0.0361)*sj1);
IkReal x949=((0.05157716)*cj4);
IkReal x950=(py*r01);
IkReal x951=(py*r00);
IkReal x952=((0.01293516)*cj4);
IkReal x953=((0.139)*x923);
IkReal x954=(pz*r00*sj0);
IkReal x955=(cj3*x923);
IkReal x956=(sj3*x923);
IkReal x957=(cj3*x922);
IkReal x958=((0.139)*x922);
IkReal x959=(sj3*x922);
IkReal x960=(sj1*x926);
IkReal x961=(r02*x925);
IkReal x962=(r02*x924);
evalcond[0]=((((-1.0)*r02*x928))+((sj1*x931))+((sj1*x927))+((cj4*x956))+((cj4*x957)));
evalcond[1]=((((-1.0)*x928*x931))+(((-1.0)*r02*x929))+(((-1.0)*x927*x928))+(((-1.0)*cj4*x955))+((cj4*x959)));
evalcond[2]=((((0.1796)*x955))+((sj0*x930))+(((-0.1796)*x959))+(((-1.0)*pz*x928))+((px*x933))+x953);
evalcond[3]=((0.19)+(((-1.0)*cj0*px*x928))+(((0.1796)*x957))+(((0.1796)*x956))+(((-1.0)*x928*x938))+(((-1.0)*pz*x929))+x958);
evalcond[4]=(((sj1*x947))+((sj4*x953))+((cj1*x954))+(((-1.0)*x941*x959))+((x941*x955))+(((-1.0)*x929*x951))+(((-1.0)*sj0*x928*x934))+((x935*x942))+(((-1.0)*cj0*x928*x937)));
evalcond[5]=((((-1.0)*x941*x956))+(((-1.0)*x941*x957))+(((-0.19)*cj0*r01))+((cj1*x947))+(((-1.0)*r02*x929*x942))+(((-1.0)*x929*x954))+((sj0*sj1*x934))+(((0.19)*r00*sj0))+(((-1.0)*x928*x951))+(((-1.0)*sj4*x958))+((x933*x937)));
evalcond[6]=((((-0.38)*x939))+((x952*x959))+(((-1.0)*pz*x944))+(((-1.0)*x926*x928*x931))+((cj0*cj1*x932*x934))+((cj1*x924*x931))+(((-0.38)*x950))+((x938*x939*x940))+((sj1*x932*x939))+((x931*x943))+(((0.0361)*x946))+(((-1.0)*x929*x961))+(((-1.0)*x929*x962))+(((-1.0)*x924*x927*x928))+((x926*x946))+(((-1.0)*x949*x955))+((x940*x942*x947))+(((-1.0)*x925*x928*x931))+((x932*x935*x938))+(((-1.0)*x926*x927*x928))+(((-1.0)*x923*x936))+((r01*x930*x932))+((x927*x943))+((cj1*x925*x927)));
evalcond[7]=((((-2.0)*sj0*x930*x939))+(((-1.0)*x924*x929*x931))+((x952*x956))+((cj1*x932*x939))+(((0.38)*cj0*x934))+((cj1*x932*x950))+((sj1*x925*x931))+((x927*x960))+(((-1.0)*r02*sj0*x930*x932))+(((-1.0)*x927*x945))+((x938*x944))+((x949*x957))+(((-2.0)*cj0*x930*x947))+((x931*x948))+((sj1*x924*x927))+((x922*x936))+((x931*x960))+(((-0.0361)*x935))+(((-1.0)*x931*x945))+((x926*x935))+(((-1.0)*x932*x933*x934))+(((-1.0)*x925*x927*x929))+(((-1.0)*x928*x962))+(((-1.0)*x928*x961))+((x927*x948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x963=(sj1*sj3);
IkReal x964=((2500.0)*cj4);
IkReal x965=(cj0*px);
IkReal x966=(py*sj0);
IkReal x967=(cj3*sj1);
IkReal x968=(cj0*r00);
IkReal x969=(cj1*pz);
IkReal x970=((347.5)*sj1);
IkReal x971=((449.0)*r01*sj0);
IkReal x972=((449.0)*cj1*r02);
CheckValue<IkReal> x973=IKPowWithIntegerCheck(IKsign(((((347.5)*cj3*cj4))+(((449.0)*cj4)))),-1);
if(!x973.valid){
continue;
}
CheckValue<IkReal> x974 = IKatan2WithCheck(IkReal(((((-1.0)*x963*x971))+((cj3*x964*x969))+(((-1.0)*x964*x965*x967))+(((-449.0)*x963*x968))+(((-1.0)*x964*x966*x967))+((sj3*x972)))),(((x963*x964*x966))+((x963*x964*x965))+(((-1.0)*r01*sj0*x970))+(((-1.0)*sj3*x964*x969))+(((-449.0)*x967*x968))+(((347.5)*cj1*r02))+(((-1.0)*x967*x971))+((cj3*x972))+(((-1.0)*x968*x970))),IKFAST_ATAN2_MAGTHRESH);
if(!x974.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x973.value)))+(x974.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x975=IKcos(j2);
IkReal x976=IKsin(j2);
IkReal x977=px*px;
IkReal x978=py*py;
IkReal x979=pz*pz;
IkReal x980=(r01*sj0);
IkReal x981=((1.0)*cj1);
IkReal x982=((1.0)*sj1);
IkReal x983=(py*sj1);
IkReal x984=(cj0*r00);
IkReal x985=((2.0)*pz);
IkReal x986=(cj0*sj1);
IkReal x987=(px*r02);
IkReal x988=(cj1*r02);
IkReal x989=((0.0499288)*cj4);
IkReal x990=(pz*r01);
IkReal x991=(py*sj0);
IkReal x992=(px*r00);
IkReal x993=((2.0)*cj1);
IkReal x994=((0.1796)*sj4);
IkReal x995=(cj0*py);
IkReal x996=((0.0361)*cj1);
IkReal x997=((0.38)*r02);
IkReal x998=((0.38)*pz);
IkReal x999=(r02*sj1);
IkReal x1000=(px*r01);
IkReal x1001=((0.0361)*sj1);
IkReal x1002=((0.05157716)*cj4);
IkReal x1003=(py*r01);
IkReal x1004=(py*r00);
IkReal x1005=((0.01293516)*cj4);
IkReal x1006=((0.139)*x976);
IkReal x1007=(pz*r00*sj0);
IkReal x1008=(cj3*x976);
IkReal x1009=(sj3*x976);
IkReal x1010=(cj3*x975);
IkReal x1011=((0.139)*x975);
IkReal x1012=(sj3*x975);
IkReal x1013=(sj1*x979);
IkReal x1014=(r02*x978);
IkReal x1015=(r02*x977);
evalcond[0]=(((sj1*x980))+((sj1*x984))+((cj4*x1009))+((cj4*x1010))+(((-1.0)*r02*x981)));
evalcond[1]=(((cj4*x1012))+(((-1.0)*x980*x981))+(((-1.0)*x981*x984))+(((-1.0)*r02*x982))+(((-1.0)*cj4*x1008)));
evalcond[2]=(x1006+(((-1.0)*pz*x981))+(((0.1796)*x1008))+(((-0.1796)*x1012))+((sj0*x983))+((px*x986)));
evalcond[3]=((0.19)+(((-1.0)*cj0*px*x981))+x1011+(((-1.0)*pz*x982))+(((0.1796)*x1009))+(((0.1796)*x1010))+(((-1.0)*x981*x991)));
evalcond[4]=(((sj4*x1006))+(((-1.0)*x1012*x994))+((x988*x995))+((sj1*x1000))+(((-1.0)*x1004*x982))+(((-1.0)*cj0*x981*x990))+(((-1.0)*sj0*x981*x987))+((x1008*x994))+((cj1*x1007)));
evalcond[5]=((((-1.0)*x1009*x994))+((x986*x990))+(((-1.0)*r02*x982*x995))+((sj0*sj1*x987))+(((-1.0)*x1004*x981))+(((-1.0)*x1010*x994))+(((-0.19)*cj0*r01))+(((0.19)*r00*sj0))+((cj1*x1000))+(((-1.0)*x1007*x982))+(((-1.0)*sj4*x1011)));
evalcond[6]=((((0.0361)*x999))+(((-1.0)*x1014*x982))+(((-1.0)*x1015*x982))+((sj1*x985*x992))+((r01*x983*x985))+(((-1.0)*pz*x997))+((x985*x988*x991))+((cj1*x978*x980))+((x1000*x993*x995))+((x1005*x1012))+((cj0*cj1*x985*x987))+((x980*x996))+(((-1.0)*x1002*x1008))+(((-1.0)*x977*x980*x981))+((cj1*x977*x984))+(((-0.38)*x992))+(((-1.0)*x979*x981*x984))+(((-1.0)*x976*x989))+((x991*x992*x993))+(((-1.0)*x978*x981*x984))+((x979*x999))+(((-1.0)*x979*x980*x981))+((x984*x996))+(((-0.38)*x1003)));
evalcond[7]=((((-1.0)*x1014*x981))+(((-1.0)*r02*sj0*x983*x985))+((sj1*x977*x980))+((x991*x997))+(((-0.0361)*x988))+((x975*x989))+(((-1.0)*x1015*x981))+((cj1*x985*x992))+((x1001*x984))+((x1001*x980))+(((-2.0)*cj0*x1000*x983))+((sj1*x978*x984))+((x979*x988))+(((-1.0)*x977*x982*x984))+(((-1.0)*x984*x998))+(((-1.0)*x978*x980*x982))+(((0.38)*cj0*x987))+((x1005*x1009))+((x1002*x1010))+(((-2.0)*sj0*x983*x992))+((cj1*x1003*x985))+(((-1.0)*x985*x986*x987))+(((-1.0)*x980*x998))+((x1013*x984))+((x1013*x980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1016=(cj0*r00);
IkReal x1017=(cj1*sj3);
IkReal x1018=(sj1*sj3);
IkReal x1019=(cj1*cj3);
IkReal x1020=(r01*sj0);
IkReal x1021=((1.0)*cj3*sj1);
IkReal x1022=((1.0)*cj3*x1020);
CheckValue<IkReal> x1023=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1023.valid){
continue;
}
CheckValue<IkReal> x1024 = IKatan2WithCheck(IkReal(((((-1.0)*x1019*x1020))+((r02*x1017))+(((-1.0)*x1018*x1020))+(((-1.0)*x1016*x1019))+(((-1.0)*x1016*x1018))+(((-1.0)*r02*x1021)))),(((x1017*x1020))+((x1016*x1017))+((r02*x1018))+((r02*x1019))+(((-1.0)*x1020*x1021))+(((-1.0)*x1016*x1021))),IKFAST_ATAN2_MAGTHRESH);
if(!x1024.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1023.value)))+(x1024.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1025=IKcos(j2);
IkReal x1026=IKsin(j2);
IkReal x1027=px*px;
IkReal x1028=py*py;
IkReal x1029=pz*pz;
IkReal x1030=(r01*sj0);
IkReal x1031=((1.0)*cj1);
IkReal x1032=((1.0)*sj1);
IkReal x1033=(py*sj1);
IkReal x1034=(cj0*r00);
IkReal x1035=((2.0)*pz);
IkReal x1036=(cj0*sj1);
IkReal x1037=(px*r02);
IkReal x1038=(cj1*r02);
IkReal x1039=((0.0499288)*cj4);
IkReal x1040=(pz*r01);
IkReal x1041=(py*sj0);
IkReal x1042=(px*r00);
IkReal x1043=((2.0)*cj1);
IkReal x1044=((0.1796)*sj4);
IkReal x1045=(cj0*py);
IkReal x1046=((0.0361)*cj1);
IkReal x1047=((0.38)*r02);
IkReal x1048=((0.38)*pz);
IkReal x1049=(r02*sj1);
IkReal x1050=(px*r01);
IkReal x1051=((0.0361)*sj1);
IkReal x1052=((0.05157716)*cj4);
IkReal x1053=(py*r01);
IkReal x1054=(py*r00);
IkReal x1055=((0.01293516)*cj4);
IkReal x1056=((0.139)*x1026);
IkReal x1057=(pz*r00*sj0);
IkReal x1058=(cj3*x1026);
IkReal x1059=(sj3*x1026);
IkReal x1060=(cj3*x1025);
IkReal x1061=((0.139)*x1025);
IkReal x1062=(sj3*x1025);
IkReal x1063=(sj1*x1029);
IkReal x1064=(r02*x1028);
IkReal x1065=(r02*x1027);
evalcond[0]=(((sj1*x1030))+((sj1*x1034))+(((-1.0)*r02*x1031))+((cj4*x1060))+((cj4*x1059)));
evalcond[1]=((((-1.0)*cj4*x1058))+(((-1.0)*r02*x1032))+((cj4*x1062))+(((-1.0)*x1031*x1034))+(((-1.0)*x1030*x1031)));
evalcond[2]=(x1056+((px*x1036))+(((0.1796)*x1058))+(((-1.0)*pz*x1031))+((sj0*x1033))+(((-0.1796)*x1062)));
evalcond[3]=((0.19)+(((-1.0)*x1031*x1041))+x1061+(((0.1796)*x1059))+(((-1.0)*pz*x1032))+(((-1.0)*cj0*px*x1031))+(((0.1796)*x1060)));
evalcond[4]=(((x1044*x1058))+((x1038*x1045))+(((-1.0)*x1044*x1062))+((cj1*x1057))+((sj1*x1050))+(((-1.0)*cj0*x1031*x1040))+(((-1.0)*sj0*x1031*x1037))+((sj4*x1056))+(((-1.0)*x1032*x1054)));
evalcond[5]=((((-1.0)*x1031*x1054))+((sj0*sj1*x1037))+(((-1.0)*x1044*x1059))+(((-1.0)*x1044*x1060))+(((-1.0)*r02*x1032*x1045))+((cj1*x1050))+(((-0.19)*cj0*r01))+(((-1.0)*sj4*x1061))+((x1036*x1040))+(((0.19)*r00*sj0))+(((-1.0)*x1032*x1057)));
evalcond[6]=((((-1.0)*x1052*x1058))+((x1034*x1046))+((x1055*x1062))+((x1043*x1045*x1050))+((cj1*x1028*x1030))+(((-1.0)*x1027*x1030*x1031))+(((-1.0)*x1026*x1039))+(((-1.0)*x1029*x1031*x1034))+((x1041*x1042*x1043))+(((-0.38)*x1042))+((x1035*x1038*x1041))+(((-0.38)*x1053))+((x1030*x1046))+(((0.0361)*x1049))+(((-1.0)*pz*x1047))+(((-1.0)*x1029*x1030*x1031))+((x1029*x1049))+((cj1*x1027*x1034))+(((-1.0)*x1028*x1031*x1034))+((sj1*x1035*x1042))+(((-1.0)*x1032*x1065))+(((-1.0)*x1032*x1064))+((r01*x1033*x1035))+((cj0*cj1*x1035*x1037)));
evalcond[7]=((((-1.0)*x1027*x1032*x1034))+((x1055*x1059))+(((-1.0)*r02*sj0*x1033*x1035))+((x1034*x1051))+((cj1*x1035*x1053))+((cj1*x1035*x1042))+((x1030*x1063))+((x1041*x1047))+((x1030*x1051))+(((-2.0)*cj0*x1033*x1050))+((x1029*x1038))+((x1052*x1060))+(((0.38)*cj0*x1037))+(((-2.0)*sj0*x1033*x1042))+(((-0.0361)*x1038))+((x1025*x1039))+(((-1.0)*x1035*x1036*x1037))+(((-1.0)*x1028*x1030*x1032))+((sj1*x1028*x1034))+((sj1*x1027*x1030))+(((-1.0)*x1034*x1048))+(((-1.0)*x1030*x1048))+(((-1.0)*x1031*x1064))+(((-1.0)*x1031*x1065))+((x1034*x1063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1066=((1000.0)*r02);
IkReal x1067=((1000.0)*r00);
IkReal x1068=((1000.0)*r01);
IkReal x1069=((190.0)*sj1);
IkReal x1070=(cj0*r00);
IkReal x1071=((190.0)*cj1);
IkReal x1072=((190.0)*r01*sj0);
CheckValue<IkReal> x1073=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1073.valid){
continue;
}
CheckValue<IkReal> x1074 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1069))+((py*x1068))+(((-1.0)*x1070*x1071))+((pz*x1066))+((px*x1067))+(((-1.0)*r01*sj0*x1071)))),(((x1069*x1070))+(((-1.0)*cj0*pz*x1067))+(((-1.0)*r02*x1071))+((r01*sj0*x1069))+(((-1.0)*pz*sj0*x1068))+((cj0*px*x1066))+((py*sj0*x1066))+(((-179.6)*cj4))),IKFAST_ATAN2_MAGTHRESH);
if(!x1074.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1073.value)))+(x1074.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1075=IKcos(j3);
IkReal x1076=px*px;
IkReal x1077=pz*pz;
IkReal x1078=py*py;
IkReal x1079=(r01*sj0);
IkReal x1080=((2.0)*py);
IkReal x1081=(r00*sj0);
IkReal x1082=((0.19)*cj1);
IkReal x1083=(px*sj0);
IkReal x1084=(py*sj0);
IkReal x1085=((1.0)*pz);
IkReal x1086=(cj0*r01);
IkReal x1087=((0.38)*cj1);
IkReal x1088=((0.19)*sj1);
IkReal x1089=((0.139)*cj4);
IkReal x1090=(cj0*r00);
IkReal x1091=(cj0*px);
IkReal x1092=(pz*r02);
IkReal x1093=((0.38)*r02*sj1);
IkReal x1094=((0.0499288)*x1075);
IkReal x1095=((0.38)*pz*sj1);
IkReal x1096=((1.0)*x1077);
IkReal x1097=((1.0)*x1078);
evalcond[0]=(((x1079*x1082))+(((-1.0)*px*r00))+((x1089*(IKsin(j3))))+(((-1.0)*r02*x1085))+((x1082*x1090))+(((-1.0)*py*r01))+((r02*x1088)));
evalcond[1]=((0.01547716)+((x1087*x1091))+x1094+x1095+(((-1.0)*x1097))+(((-1.0)*x1096))+(((-1.0)*x1076))+((x1084*x1087)));
evalcond[2]=(((x1079*x1088))+(((-0.1796)*cj4))+((r02*x1091))+((x1088*x1090))+(((-1.0)*x1085*x1090))+(((-1.0)*x1079*x1085))+(((-1.0)*r02*x1082))+((r02*x1084))+(((-1.0)*x1075*x1089)));
evalcond[3]=((((-0.0361)*x1081))+(((2.0)*x1083*x1092))+(((-1.0)*x1086*x1097))+(((-1.0)*x1086*x1095))+((x1076*x1081))+((x1076*x1086))+((py*r00*x1087))+((px*x1079*x1080))+(((0.0361)*x1086))+(((-1.0)*x1083*x1093))+(((-1.0)*x1081*x1096))+(((-1.0)*x1081*x1097))+(((-0.05157716)*sj4))+((cj0*py*x1093))+((x1081*x1095))+((x1077*x1086))+(((-1.0)*px*r01*x1087))+(((-1.0)*px*x1080*x1090))+(((-1.0)*cj0*x1080*x1092))+(((-1.0)*sj4*x1094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x1098=(cj3*cj4);
j2eval[0]=(x1098+(((1.29208633093525)*cj4)));
j2eval[1]=IKsign(((((449.0)*cj4))+(((347.5)*x1098))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
bool bgotonextstatement = true;
do
{
IkReal x1099=px*px;
IkReal x1100=pz*pz;
IkReal x1101=py*py;
IkReal x1102=((0.0499288)*cj3);
IkReal x1103=(r01*sj0);
IkReal x1104=((0.19)*cj1);
IkReal x1105=(py*r02);
IkReal x1106=(cj0*sj1);
IkReal x1107=((1.0)*cj1);
IkReal x1108=((1.0)*sj1);
IkReal x1109=(cj0*r00);
IkReal x1110=((2.0)*pz);
IkReal x1111=(px*r02);
IkReal x1112=(py*sj1);
IkReal x1113=(cj0*r01);
IkReal x1114=((1.0)*sj0);
IkReal x1115=((0.0361)*cj1);
IkReal x1116=(cj1*px);
IkReal x1117=(r00*sj0);
IkReal x1118=((2.0)*py);
IkReal x1119=((0.38)*cj0);
IkReal x1120=((0.38)*r01);
IkReal x1121=((1.0)*pz);
IkReal x1122=((0.38)*sj0);
IkReal x1123=(cj1*py);
IkReal x1124=((0.38)*pz);
IkReal x1125=((0.0361)*sj1);
IkReal x1126=(px*r00);
IkReal x1127=((0.19)*sj1);
IkReal x1128=(r00*x1101);
IkReal x1129=(r02*x1100);
IkReal x1130=(r02*x1099);
IkReal x1131=((1.0)*x1101);
IkReal x1132=(r00*x1100);
IkReal x1133=(r02*x1101);
IkReal x1134=((1.0)*x1099);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x1114))+((cj0*py)));
evalcond[2]=((-1.0)+x1113+(((-1.0)*r00*x1114)));
evalcond[3]=(((r00*x1106))+(((-1.0)*r02*x1107))+((sj1*x1103)));
evalcond[4]=(((x1104*x1109))+(((-1.0)*x1126))+(((-1.0)*py*r01))+(((-1.0)*r02*x1121))+((x1103*x1104))+((r02*x1127)));
evalcond[5]=((((-1.0)*x1103*x1107))+(((-1.0)*x1107*x1109))+(((-1.0)*r02*x1108)));
evalcond[6]=((0.01547716)+x1102+((sj1*x1124))+(((-1.0)*x1100))+(((-1.0)*x1134))+(((-1.0)*x1131))+((x1116*x1119))+((x1122*x1123)));
evalcond[7]=((((-1.0)*x1109*x1121))+((x1103*x1127))+((sj0*x1105))+(((-1.0)*r02*x1104))+(((-1.0)*x1103*x1121))+((cj0*x1111))+(((0.19)*r00*x1106)));
evalcond[8]=((-0.05157716)+(((-1.0)*x1114*x1128))+(((-1.0)*cj0*x1105*x1110))+(((-1.0)*x1114*x1132))+(((-1.0)*x1113*x1131))+(((-1.0)*x1116*x1120))+(((-1.0)*px*x1109*x1118))+((sj0*x1110*x1111))+((x1099*x1113))+((x1099*x1117))+(((0.38)*x1105*x1106))+((sj1*x1117*x1124))+(((-0.0361)*x1117))+(((-1.0)*pz*x1106*x1120))+((x1100*x1113))+(((0.38)*r00*x1123))+(((0.0361)*x1113))+(((-1.0)*x1102))+(((-1.0)*sj1*x1111*x1122))+((px*x1103*x1118)));
evalcond[9]=(((x1109*x1115))+((x1113*x1116*x1118))+((cj1*x1099*x1109))+((sj1*x1129))+(((-1.0)*x1099*x1103*x1107))+(((-1.0)*x1100*x1103*x1107))+((cj1*x1101*x1103))+((r01*x1110*x1112))+((cj1*sj0*x1105*x1110))+((x1116*x1117*x1118))+(((-1.0)*py*x1120))+((sj1*x1110*x1126))+(((-1.0)*x1108*x1133))+(((-1.0)*x1108*x1130))+(((-0.38)*x1126))+((x1103*x1115))+(((-1.0)*r02*x1124))+((cj0*cj1*x1110*x1111))+(((-1.0)*x1100*x1107*x1109))+((r02*x1125))+(((-1.0)*x1101*x1107*x1109)));
evalcond[10]=((((-1.0)*px*r01*x1106*x1118))+((x1111*x1119))+((r00*x1110*x1116))+(((-1.0)*r00*x1106*x1134))+(((0.0361)*r00*x1106))+(((-1.0)*x1109*x1124))+((sj1*x1099*x1103))+((sj1*x1100*x1103))+((r01*x1110*x1123))+(((-1.0)*sj0*sj1*x1105*x1110))+(((-1.0)*x1107*x1133))+(((-1.0)*x1107*x1130))+(((-1.0)*x1101*x1103*x1108))+(((-1.0)*x1106*x1110*x1111))+((x1103*x1125))+(((-2.0)*px*x1112*x1117))+((x1106*x1128))+(((-1.0)*x1103*x1124))+((x1106*x1132))+((cj1*x1129))+(((-1.0)*r02*x1115))+((x1105*x1122)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.03301421223823)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-322357.25)+(((-312055.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1135=((868750.0)*pz);
IkReal x1136=((1122500.0)*cj3);
IkReal x1137=(py*sj0);
IkReal x1138=(pz*sj1);
IkReal x1139=((868750.0)*sj1);
IkReal x1140=((1122500.0)*sj3);
IkReal x1141=(cj1*pz);
IkReal x1142=(cj0*cj1*px);
IkReal x1143=(cj0*px*sj1);
CheckValue<IkReal> x1144=IKPowWithIntegerCheck(IKsign(((-322357.25)+(((-312055.0)*cj3)))),-1);
if(!x1144.valid){
continue;
}
CheckValue<IkReal> x1145 = IKatan2WithCheck(IkReal(((((-1.0)*x1136*x1141))+(((-1.0)*x1140*x1142))+((sj1*x1136*x1137))+((x1137*x1139))+(((213275.0)*sj3))+(((-1.0)*cj1*x1135))+(((-1.0)*cj1*x1137*x1140))+((cj0*px*x1139))+((x1136*x1143))+(((-1.0)*x1138*x1140)))),((165062.5)+(((-1.0)*x1136*x1142))+(((-1.0)*x1140*x1143))+((x1140*x1141))+(((-1.0)*sj1*x1135))+(((-868750.0)*x1142))+(((-868750.0)*cj1*x1137))+(((-1.0)*cj1*x1136*x1137))+(((-1.0)*sj1*x1137*x1140))+(((213275.0)*cj3))+(((-1.0)*x1136*x1138))),IKFAST_ATAN2_MAGTHRESH);
if(!x1145.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1144.value)))+(x1145.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1146=IKsin(j2);
IkReal x1147=IKcos(j2);
IkReal x1148=(px*sj1);
IkReal x1149=(py*sj1);
IkReal x1150=((1.0)*r00);
IkReal x1151=(cj1*sj0);
IkReal x1152=((1.0)*px);
IkReal x1153=((1.0)*pz);
IkReal x1154=(cj0*r01);
IkReal x1155=(pz*sj1);
IkReal x1156=(cj0*cj1);
IkReal x1157=((0.139)*x1146);
IkReal x1158=((0.139)*x1147);
IkReal x1159=((0.1796)*x1147);
IkReal x1160=((0.1796)*x1146);
IkReal x1161=(cj3*x1160);
IkReal x1162=(sj3*x1159);
IkReal x1163=(sj3*x1160);
IkReal x1164=(cj3*x1159);
IkReal x1165=(x1157+x1161);
IkReal x1166=(x1158+x1164+x1163);
evalcond[0]=(x1165+(((-1.0)*cj1*x1153))+((sj0*x1149))+(((-1.0)*x1162))+((cj0*x1148)));
evalcond[1]=((0.19)+x1166+(((-1.0)*py*x1151))+(((-1.0)*x1152*x1156))+(((-1.0)*sj1*x1153)));
evalcond[2]=(((pz*r00*x1151))+x1165+(((-1.0)*x1149*x1150))+(((-1.0)*r02*x1151*x1152))+((py*r02*x1156))+((r01*x1148))+(((-1.0)*x1162))+(((-1.0)*cj1*x1153*x1154)));
evalcond[3]=((((-1.0)*cj0*r02*x1149))+(((0.19)*r00*sj0))+(((-0.19)*x1154))+(((-1.0)*sj0*x1150*x1155))+(((-1.0)*x1166))+((cj1*px*r01))+(((-1.0)*cj1*py*x1150))+((r02*sj0*x1148))+((x1154*x1155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1167=((0.0499288)*cj3);
IkReal x1168=px*px;
IkReal x1169=pz*pz;
IkReal x1170=py*py;
IkReal x1171=(r01*sj0);
IkReal x1172=((0.19)*cj1);
IkReal x1173=(py*r02);
IkReal x1174=(cj0*sj1);
IkReal x1175=((1.0)*cj1);
IkReal x1176=((1.0)*sj1);
IkReal x1177=(cj0*r00);
IkReal x1178=((2.0)*pz);
IkReal x1179=(px*r02);
IkReal x1180=(py*sj1);
IkReal x1181=(cj0*r01);
IkReal x1182=((1.0)*sj0);
IkReal x1183=((0.0361)*cj1);
IkReal x1184=(cj1*px);
IkReal x1185=(r00*sj0);
IkReal x1186=((2.0)*py);
IkReal x1187=((0.38)*cj0);
IkReal x1188=((0.38)*r01);
IkReal x1189=((1.0)*pz);
IkReal x1190=((0.38)*sj0);
IkReal x1191=(cj1*py);
IkReal x1192=((0.38)*pz);
IkReal x1193=((0.0361)*sj1);
IkReal x1194=(px*r00);
IkReal x1195=((0.19)*sj1);
IkReal x1196=(r00*x1170);
IkReal x1197=(r02*x1169);
IkReal x1198=(r02*x1168);
IkReal x1199=((1.0)*x1170);
IkReal x1200=(r00*x1169);
IkReal x1201=(r02*x1170);
IkReal x1202=((1.0)*x1168);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=(((cj0*py))+(((-1.0)*px*x1182)));
evalcond[2]=((1.0)+x1181+(((-1.0)*r00*x1182)));
evalcond[3]=((((-1.0)*r02*x1175))+((sj1*x1171))+((r00*x1174)));
evalcond[4]=(((x1172*x1177))+((r02*x1195))+(((-1.0)*py*r01))+(((-1.0)*x1194))+(((-1.0)*r02*x1189))+((x1171*x1172)));
evalcond[5]=((((-1.0)*r02*x1176))+(((-1.0)*x1171*x1175))+(((-1.0)*x1175*x1177)));
evalcond[6]=((0.01547716)+x1167+((x1184*x1187))+(((-1.0)*x1199))+((sj1*x1192))+(((-1.0)*x1202))+((x1190*x1191))+(((-1.0)*x1169)));
evalcond[7]=((((-1.0)*x1171*x1189))+(((-1.0)*r02*x1172))+((sj0*x1173))+((cj0*x1179))+(((0.19)*r00*x1174))+((x1171*x1195))+(((-1.0)*x1177*x1189)));
evalcond[8]=((0.05157716)+x1167+(((-1.0)*x1181*x1199))+(((0.0361)*x1181))+((x1169*x1181))+(((0.38)*x1173*x1174))+(((-1.0)*x1184*x1188))+(((-0.0361)*x1185))+((px*x1171*x1186))+(((-1.0)*px*x1177*x1186))+((sj0*x1178*x1179))+(((-1.0)*x1182*x1196))+(((-1.0)*cj0*x1173*x1178))+(((-1.0)*x1182*x1200))+((x1168*x1181))+((x1168*x1185))+(((-1.0)*sj1*x1179*x1190))+((sj1*x1185*x1192))+(((-1.0)*pz*x1174*x1188))+(((0.38)*r00*x1191)));
evalcond[9]=(((x1184*x1185*x1186))+((cj1*sj0*x1173*x1178))+((cj1*x1170*x1171))+((cj0*cj1*x1178*x1179))+((sj1*x1178*x1194))+(((-1.0)*x1169*x1171*x1175))+((x1177*x1183))+(((-1.0)*py*x1188))+((sj1*x1197))+(((-0.38)*x1194))+((x1171*x1183))+((r01*x1178*x1180))+((r02*x1193))+((cj1*x1168*x1177))+(((-1.0)*x1176*x1201))+(((-1.0)*x1169*x1175*x1177))+((x1181*x1184*x1186))+(((-1.0)*r02*x1192))+(((-1.0)*x1168*x1171*x1175))+(((-1.0)*x1170*x1175*x1177))+(((-1.0)*x1176*x1198)));
evalcond[10]=((((-1.0)*x1177*x1192))+(((-1.0)*r00*x1174*x1202))+((x1174*x1200))+(((-1.0)*x1170*x1171*x1176))+(((-1.0)*sj0*sj1*x1173*x1178))+(((-1.0)*px*r01*x1174*x1186))+((x1179*x1187))+((r00*x1178*x1184))+((x1173*x1190))+((x1174*x1196))+(((-1.0)*x1174*x1178*x1179))+((r01*x1178*x1191))+((sj1*x1168*x1171))+((sj1*x1169*x1171))+((x1171*x1193))+(((0.0361)*r00*x1174))+(((-1.0)*x1175*x1201))+(((-2.0)*px*x1180*x1185))+((cj1*x1197))+(((-1.0)*x1171*x1192))+(((-1.0)*r02*x1183))+(((-1.0)*x1175*x1198)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.03301421223823)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-322357.25)+(((-312055.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1203=((868750.0)*pz);
IkReal x1204=((1122500.0)*cj3);
IkReal x1205=(py*sj0);
IkReal x1206=(pz*sj1);
IkReal x1207=((868750.0)*sj1);
IkReal x1208=((1122500.0)*sj3);
IkReal x1209=(cj1*pz);
IkReal x1210=(cj0*cj1*px);
IkReal x1211=(cj0*px*sj1);
CheckValue<IkReal> x1212=IKPowWithIntegerCheck(IKsign(((-322357.25)+(((-312055.0)*cj3)))),-1);
if(!x1212.valid){
continue;
}
CheckValue<IkReal> x1213 = IKatan2WithCheck(IkReal(((((-1.0)*x1204*x1209))+(((-1.0)*x1208*x1210))+(((-1.0)*cj1*x1205*x1208))+((x1204*x1211))+(((213275.0)*sj3))+((cj0*px*x1207))+(((-1.0)*cj1*x1203))+((x1205*x1207))+((sj1*x1204*x1205))+(((-1.0)*x1206*x1208)))),((165062.5)+(((-1.0)*x1204*x1206))+(((-1.0)*x1204*x1210))+(((-1.0)*x1208*x1211))+(((-868750.0)*cj1*x1205))+(((-1.0)*sj1*x1203))+(((-1.0)*cj1*x1204*x1205))+((x1208*x1209))+(((-868750.0)*x1210))+(((-1.0)*sj1*x1205*x1208))+(((213275.0)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x1213.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1212.value)))+(x1213.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1214=IKsin(j2);
IkReal x1215=IKcos(j2);
IkReal x1216=(px*sj1);
IkReal x1217=(py*sj1);
IkReal x1218=((1.0)*r00);
IkReal x1219=(cj1*sj0);
IkReal x1220=((1.0)*px);
IkReal x1221=((1.0)*pz);
IkReal x1222=(cj0*r01);
IkReal x1223=(pz*sj1);
IkReal x1224=(cj0*cj1);
IkReal x1225=((0.139)*x1214);
IkReal x1226=((0.139)*x1215);
IkReal x1227=((0.1796)*x1215);
IkReal x1228=((0.1796)*x1214);
IkReal x1229=(sj3*x1227);
IkReal x1230=(cj3*x1228);
IkReal x1231=(sj3*x1228);
IkReal x1232=(cj3*x1227);
IkReal x1233=(x1230+x1225);
IkReal x1234=(x1231+x1232+x1226);
evalcond[0]=(x1233+(((-1.0)*x1229))+((cj0*x1216))+((sj0*x1217))+(((-1.0)*cj1*x1221)));
evalcond[1]=((0.19)+x1234+(((-1.0)*py*x1219))+(((-1.0)*x1220*x1224))+(((-1.0)*sj1*x1221)));
evalcond[2]=(((pz*r00*x1219))+(((-1.0)*cj1*x1221*x1222))+x1229+(((-1.0)*r02*x1219*x1220))+(((-1.0)*x1233))+((py*r02*x1224))+(((-1.0)*x1217*x1218))+((r01*x1216)));
evalcond[3]=(x1234+((r02*sj0*x1216))+(((-1.0)*cj0*r02*x1217))+((x1222*x1223))+(((0.19)*r00*sj0))+(((-1.0)*sj0*x1218*x1223))+((cj1*px*r01))+(((-1.0)*cj1*py*x1218))+(((-0.19)*x1222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1235=px*px;
IkReal x1236=pz*pz;
IkReal x1237=py*py;
IkReal x1238=(r01*sj0);
IkReal x1239=((2.0)*py);
IkReal x1240=(r00*sj0);
IkReal x1241=((0.19)*cj1);
IkReal x1242=(cj0*py);
IkReal x1243=(px*sj0);
IkReal x1244=(py*sj0);
IkReal x1245=((1.0)*pz);
IkReal x1246=((0.38)*r01);
IkReal x1247=(cj1*px);
IkReal x1248=(pz*sj1);
IkReal x1249=((0.38)*cj1);
IkReal x1250=(cj0*r01);
IkReal x1251=((0.19)*sj1);
IkReal x1252=(cj0*r00);
IkReal x1253=(cj0*r02);
IkReal x1254=((0.38)*r02*sj1);
IkReal x1255=((1.0)*x1236);
IkReal x1256=((1.0)*x1237);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(x1242+(((-1.0)*x1243)));
evalcond[2]=(x1250+(((-1.0)*sj4))+(((-1.0)*x1240)));
evalcond[3]=((((-1.0)*r02*x1245))+((x1241*x1252))+(((-1.0)*px*r00))+((r02*x1251))+((x1238*x1241))+(((-1.0)*py*r01)));
evalcond[4]=((0.06540596)+(((-1.0)*x1255))+(((-1.0)*x1256))+(((-1.0)*x1235))+(((0.38)*x1248))+(((0.38)*cj0*x1247))+((x1244*x1249)));
evalcond[5]=((((-1.0)*r02*x1241))+((x1238*x1251))+(((-1.0)*x1245*x1252))+(((-0.3186)*cj4))+(((-1.0)*x1238*x1245))+((r02*x1244))+((x1251*x1252))+((px*x1253)));
evalcond[6]=((((-0.10150596)*sj4))+(((-1.0)*cj0*x1246*x1248))+(((2.0)*pz*r02*x1243))+(((-0.0361)*x1240))+((py*r00*x1249))+((x1235*x1250))+(((0.38)*x1240*x1248))+(((-1.0)*px*x1239*x1252))+((px*x1238*x1239))+((x1236*x1250))+(((-1.0)*x1250*x1256))+((x1235*x1240))+(((0.0361)*x1250))+(((-1.0)*x1243*x1254))+(((-1.0)*x1240*x1255))+(((-1.0)*x1240*x1256))+(((-1.0)*x1246*x1247))+(((-1.0)*pz*x1239*x1253))+((x1242*x1254)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1257=((3.13873195229127)*pz);
IkReal x1258=((3.13873195229127)*cj0*px);
IkReal x1259=((3.13873195229127)*py*sj0);
if( IKabs(((((-1.0)*sj1*x1258))+(((-1.0)*sj1*x1259))+((cj1*x1257)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.596359070935342)+((sj1*x1257))+((cj1*x1258))+((cj1*x1259)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x1258))+(((-1.0)*sj1*x1259))+((cj1*x1257))))+IKsqr(((-0.596359070935342)+((sj1*x1257))+((cj1*x1258))+((cj1*x1259))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x1258))+(((-1.0)*sj1*x1259))+((cj1*x1257))), ((-0.596359070935342)+((sj1*x1257))+((cj1*x1258))+((cj1*x1259))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1260=IKsin(j2);
IkReal x1261=IKcos(j2);
IkReal x1262=px*px;
IkReal x1263=py*py;
IkReal x1264=pz*pz;
IkReal x1265=(px*sj1);
IkReal x1266=(cj0*r00);
IkReal x1267=((0.10150596)*cj4);
IkReal x1268=(cj1*sj0);
IkReal x1269=((1.0)*r01);
IkReal x1270=(sj0*sj1);
IkReal x1271=((1.0)*sj1);
IkReal x1272=(py*r00);
IkReal x1273=((1.0)*cj1);
IkReal x1274=(px*r02);
IkReal x1275=((2.0)*pz);
IkReal x1276=(cj0*r02);
IkReal x1277=((0.3186)*sj4);
IkReal x1278=((0.38)*pz);
IkReal x1279=(r01*sj0);
IkReal x1280=(r01*sj1);
IkReal x1281=(pz*r00);
IkReal x1282=((0.0361)*cj1);
IkReal x1283=((0.0361)*r01);
IkReal x1284=((0.38)*py);
IkReal x1285=(r02*sj0);
IkReal x1286=(cj0*pz);
IkReal x1287=((0.0361)*sj1);
IkReal x1288=(py*r01);
IkReal x1289=((2.0)*cj0);
IkReal x1290=(cj1*px);
IkReal x1291=(sj1*x1264);
IkReal x1292=(r02*x1263);
IkReal x1293=(r02*x1262);
IkReal x1294=(py*r02*x1275);
evalcond[0]=(((sj1*x1266))+(((-1.0)*r02*x1273))+((r01*x1270))+((cj4*x1261)));
evalcond[1]=(((py*x1270))+(((0.3186)*x1260))+((cj0*x1265))+(((-1.0)*pz*x1273)));
evalcond[2]=((((-1.0)*cj4*x1260))+(((-1.0)*x1268*x1269))+(((-1.0)*x1266*x1273))+(((-1.0)*r02*x1271)));
evalcond[3]=((0.19)+(((0.3186)*x1261))+(((-1.0)*py*x1268))+(((-1.0)*cj0*px*x1273))+(((-1.0)*pz*x1271)));
evalcond[4]=(((cj1*py*x1276))+(((-1.0)*x1268*x1274))+(((-1.0)*x1271*x1272))+((x1260*x1277))+((x1268*x1281))+(((-1.0)*cj1*x1269*x1286))+((r01*x1265)));
evalcond[5]=((((-1.0)*x1261*x1277))+(((-1.0)*x1270*x1281))+((x1265*x1285))+(((-1.0)*py*x1271*x1276))+(((-1.0)*x1272*x1273))+(((-0.19)*cj0*r01))+(((0.19)*r00*sj0))+((x1280*x1286))+((r01*x1290)));
evalcond[6]=((((-1.0)*x1262*x1268*x1269))+(((-1.0)*x1264*x1266*x1273))+((x1268*x1294))+((r02*x1287))+(((-1.0)*x1260*x1267))+(((-1.0)*x1264*x1268*x1269))+((cj0*cj1*x1274*x1275))+(((2.0)*px*x1268*x1272))+(((-1.0)*r01*x1284))+((x1288*x1289*x1290))+((x1268*x1283))+(((-1.0)*r02*x1278))+((r02*x1291))+((r01*x1263*x1268))+((r00*x1265*x1275))+((x1266*x1282))+((py*x1275*x1280))+(((-1.0)*x1263*x1266*x1273))+((cj1*x1262*x1266))+(((-1.0)*x1271*x1293))+(((-1.0)*x1271*x1292))+(((-0.38)*px*r00)));
evalcond[7]=(((x1270*x1283))+(((-1.0)*r02*x1282))+((r00*x1275*x1290))+((x1261*x1267))+((x1284*x1285))+(((-1.0)*x1266*x1278))+((x1266*x1291))+(((-1.0)*x1265*x1288*x1289))+((cj1*x1275*x1288))+((sj1*x1263*x1266))+(((-1.0)*x1270*x1294))+(((-1.0)*x1278*x1279))+((r01*x1262*x1270))+((x1266*x1287))+(((-1.0)*x1263*x1269*x1270))+(((-2.0)*sj0*x1265*x1272))+(((0.38)*cj0*x1274))+(((-1.0)*x1265*x1275*x1276))+(((-1.0)*x1273*x1292))+(((-1.0)*x1273*x1293))+((r01*x1264*x1270))+(((-1.0)*x1262*x1266*x1271))+((cj1*r02*x1264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1295=px*px;
IkReal x1296=pz*pz;
IkReal x1297=py*py;
IkReal x1298=(r01*sj0);
IkReal x1299=((2.0)*py);
IkReal x1300=(r00*sj0);
IkReal x1301=((0.19)*cj1);
IkReal x1302=(cj0*py);
IkReal x1303=(px*sj0);
IkReal x1304=(py*sj0);
IkReal x1305=((1.0)*pz);
IkReal x1306=((0.38)*r01);
IkReal x1307=(cj1*px);
IkReal x1308=(pz*sj1);
IkReal x1309=((0.38)*cj1);
IkReal x1310=(cj0*r01);
IkReal x1311=((0.19)*sj1);
IkReal x1312=(cj0*r00);
IkReal x1313=(cj0*r02);
IkReal x1314=((0.38)*r02*sj1);
IkReal x1315=((1.0)*x1296);
IkReal x1316=((1.0)*x1297);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(x1302+(((-1.0)*x1303)));
evalcond[2]=(x1310+(((-1.0)*sj4))+(((-1.0)*x1300)));
evalcond[3]=((((-1.0)*px*r00))+(((-1.0)*r02*x1305))+((r02*x1311))+(((-1.0)*py*r01))+((x1298*x1301))+((x1301*x1312)));
evalcond[4]=((-0.03445164)+(((0.38)*x1308))+(((-1.0)*x1315))+(((-1.0)*x1316))+((x1304*x1309))+(((-1.0)*x1295))+(((0.38)*cj0*x1307)));
evalcond[5]=(((x1298*x1311))+((x1311*x1312))+((px*x1313))+(((-1.0)*r02*x1301))+(((-1.0)*x1305*x1312))+(((-1.0)*x1298*x1305))+(((-0.0406)*cj4))+((r02*x1304)));
evalcond[6]=((((0.38)*x1300*x1308))+(((-1.0)*x1300*x1315))+(((-1.0)*x1300*x1316))+(((-1.0)*x1306*x1307))+((py*r00*x1309))+((x1295*x1300))+(((0.0361)*x1310))+(((-1.0)*px*x1299*x1312))+(((-1.0)*pz*x1299*x1313))+(((-1.0)*x1303*x1314))+((x1295*x1310))+(((-0.00164836)*sj4))+((x1296*x1310))+(((-1.0)*cj0*x1306*x1308))+(((2.0)*pz*r02*x1303))+((x1302*x1314))+(((-1.0)*x1310*x1316))+((px*x1298*x1299))+(((-0.0361)*x1300)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1317=((24.6305418719212)*pz);
IkReal x1318=((24.6305418719212)*py*sj0);
IkReal x1319=((24.6305418719212)*cj0*px);
if( IKabs(((((-1.0)*cj1*x1317))+((sj1*x1318))+((sj1*x1319)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((4.67980295566502)+(((-1.0)*sj1*x1317))+(((-1.0)*cj1*x1318))+(((-1.0)*cj1*x1319)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x1317))+((sj1*x1318))+((sj1*x1319))))+IKsqr(((4.67980295566502)+(((-1.0)*sj1*x1317))+(((-1.0)*cj1*x1318))+(((-1.0)*cj1*x1319))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x1317))+((sj1*x1318))+((sj1*x1319))), ((4.67980295566502)+(((-1.0)*sj1*x1317))+(((-1.0)*cj1*x1318))+(((-1.0)*cj1*x1319))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1320=IKsin(j2);
IkReal x1321=IKcos(j2);
IkReal x1322=px*px;
IkReal x1323=py*py;
IkReal x1324=pz*pz;
IkReal x1325=(cj0*sj1);
IkReal x1326=(r01*sj0);
IkReal x1327=((1.0)*cj1);
IkReal x1328=(r02*sj1);
IkReal x1329=(cj1*r02);
IkReal x1330=((1.0)*sj1);
IkReal x1331=(py*sj1);
IkReal x1332=(py*r00);
IkReal x1333=(px*r02);
IkReal x1334=(px*r01);
IkReal x1335=((2.0)*pz);
IkReal x1336=((0.38)*pz);
IkReal x1337=(r00*sj0);
IkReal x1338=((2.0)*px);
IkReal x1339=(cj0*r00);
IkReal x1340=((0.0361)*cj1);
IkReal x1341=(py*sj0);
IkReal x1342=(pz*r01);
IkReal x1343=((2.0)*py);
IkReal x1344=(py*r01);
IkReal x1345=(cj0*px);
IkReal x1346=(px*r00);
IkReal x1347=(r00*x1324);
IkReal x1348=(r00*x1323);
IkReal x1349=((0.0406)*x1320);
IkReal x1350=((1.0)*x1322);
IkReal x1351=(cj4*x1321);
IkReal x1352=(cj4*x1320);
IkReal x1353=((0.0406)*x1321);
IkReal x1354=(x1335*x1341);
evalcond[0]=((((-1.0)*x1349))+((px*x1325))+((sj0*x1331))+(((-1.0)*pz*x1327)));
evalcond[1]=((((-1.0)*x1351))+((r00*x1325))+(((-1.0)*r02*x1327))+((sj1*x1326)));
evalcond[2]=(x1352+(((-1.0)*x1327*x1339))+(((-1.0)*x1328))+(((-1.0)*x1326*x1327)));
evalcond[3]=((0.19)+(((-1.0)*x1353))+(((-1.0)*pz*x1330))+(((-1.0)*x1327*x1341))+(((-1.0)*x1327*x1345)));
evalcond[4]=((((-1.0)*cj0*x1327*x1342))+(((-1.0)*sj0*x1327*x1333))+((cj0*py*x1329))+(((-1.0)*sj4*x1349))+(((-1.0)*x1330*x1332))+((sj1*x1334))+((cj1*pz*x1337)));
evalcond[5]=((((-1.0)*x1327*x1332))+((sj4*x1353))+((cj1*x1334))+(((-0.19)*cj0*r01))+((px*sj0*x1328))+(((-1.0)*py*r02*x1325))+(((0.19)*x1337))+((x1325*x1342))+(((-1.0)*pz*x1330*x1337)));
evalcond[6]=((((0.00164836)*x1352))+(((-1.0)*x1323*x1328))+((x1326*x1340))+((x1339*x1340))+((cj1*x1323*x1326))+((sj1*x1335*x1346))+((x1329*x1335*x1345))+(((-1.0)*x1324*x1326*x1327))+(((-0.38)*x1344))+(((-0.38)*x1346))+(((-1.0)*x1324*x1327*x1339))+((x1329*x1354))+((x1324*x1328))+((cj1*sj0*x1332*x1338))+(((-1.0)*x1323*x1327*x1339))+(((0.0361)*x1328))+((cj1*x1322*x1339))+((cj0*cj1*x1334*x1343))+(((-1.0)*r02*x1336))+(((-1.0)*x1328*x1350))+((r01*x1331*x1335))+(((-1.0)*x1322*x1326*x1327)));
evalcond[7]=((((-0.0361)*x1329))+(((-1.0)*x1326*x1336))+(((-1.0)*x1325*x1333*x1335))+(((0.38)*cj0*x1333))+(((-1.0)*x1323*x1326*x1330))+(((-1.0)*r02*x1323*x1327))+(((-1.0)*r02*x1322*x1327))+(((-1.0)*r00*x1325*x1350))+((x1324*x1329))+(((0.38)*r02*x1341))+(((-1.0)*x1325*x1334*x1343))+(((0.0361)*sj1*x1326))+(((-1.0)*x1336*x1339))+(((-1.0)*x1331*x1337*x1338))+((sj1*x1324*x1326))+((cj1*x1335*x1346))+((cj1*x1335*x1344))+((sj1*x1322*x1326))+((x1325*x1347))+((x1325*x1348))+(((-1.0)*x1328*x1354))+(((0.0361)*r00*x1325))+(((-0.00164836)*x1351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1365=IKPowWithIntegerCheck(cj4,-1);
if(!x1365.valid){
continue;
}
IkReal x1355=x1365.value;
IkReal x1356=((2500.0)*cj4);
IkReal x1357=(cj1*pz);
IkReal x1358=((449.0)*cj3);
IkReal x1359=((-0.00287769784172662)*x1355);
IkReal x1360=(cj0*cj1*r00);
IkReal x1361=((449.0)*r02*sj1);
IkReal x1362=(cj1*r01*sj0);
IkReal x1363=(cj0*px*sj1);
IkReal x1364=(py*sj0*sj1);
CheckValue<IkReal> x1366=IKPowWithIntegerCheck(sj3,-1);
if(!x1366.valid){
continue;
}
if( IKabs((x1359*((((x1356*x1364))+((x1356*x1363))+(((-449.0)*x1360))+(((-449.0)*x1362))+(((-1.0)*x1356*x1357))+(((-1.0)*x1361)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1359*(x1366.value)*(((((-1.0)*cj3*x1356*x1357))+(((-347.5)*x1360))+(((-347.5)*x1362))+(((-347.5)*r02*sj1))+(((-1.0)*r02*sj1*x1358))+((cj3*x1356*x1364))+((cj3*x1356*x1363))+(((-1.0)*x1358*x1362))+(((-1.0)*x1358*x1360)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1359*((((x1356*x1364))+((x1356*x1363))+(((-449.0)*x1360))+(((-449.0)*x1362))+(((-1.0)*x1356*x1357))+(((-1.0)*x1361))))))+IKsqr((x1359*(x1366.value)*(((((-1.0)*cj3*x1356*x1357))+(((-347.5)*x1360))+(((-347.5)*x1362))+(((-347.5)*r02*sj1))+(((-1.0)*r02*sj1*x1358))+((cj3*x1356*x1364))+((cj3*x1356*x1363))+(((-1.0)*x1358*x1362))+(((-1.0)*x1358*x1360))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x1359*((((x1356*x1364))+((x1356*x1363))+(((-449.0)*x1360))+(((-449.0)*x1362))+(((-1.0)*x1356*x1357))+(((-1.0)*x1361))))), (x1359*(x1366.value)*(((((-1.0)*cj3*x1356*x1357))+(((-347.5)*x1360))+(((-347.5)*x1362))+(((-347.5)*r02*sj1))+(((-1.0)*r02*sj1*x1358))+((cj3*x1356*x1364))+((cj3*x1356*x1363))+(((-1.0)*x1358*x1362))+(((-1.0)*x1358*x1360))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1367=IKcos(j2);
IkReal x1368=IKsin(j2);
IkReal x1369=px*px;
IkReal x1370=py*py;
IkReal x1371=pz*pz;
IkReal x1372=(r01*sj0);
IkReal x1373=((1.0)*cj1);
IkReal x1374=((1.0)*sj1);
IkReal x1375=(py*sj1);
IkReal x1376=(cj0*r00);
IkReal x1377=((2.0)*pz);
IkReal x1378=(cj0*sj1);
IkReal x1379=(px*r02);
IkReal x1380=(cj1*r02);
IkReal x1381=((0.0499288)*cj4);
IkReal x1382=(pz*r01);
IkReal x1383=(py*sj0);
IkReal x1384=(px*r00);
IkReal x1385=((2.0)*cj1);
IkReal x1386=((0.1796)*sj4);
IkReal x1387=(cj0*py);
IkReal x1388=((0.0361)*cj1);
IkReal x1389=((0.38)*r02);
IkReal x1390=((0.38)*pz);
IkReal x1391=(r02*sj1);
IkReal x1392=(px*r01);
IkReal x1393=((0.0361)*sj1);
IkReal x1394=((0.05157716)*cj4);
IkReal x1395=(py*r01);
IkReal x1396=(py*r00);
IkReal x1397=((0.01293516)*cj4);
IkReal x1398=((0.139)*x1368);
IkReal x1399=(pz*r00*sj0);
IkReal x1400=(cj3*x1368);
IkReal x1401=(sj3*x1368);
IkReal x1402=(cj3*x1367);
IkReal x1403=((0.139)*x1367);
IkReal x1404=(sj3*x1367);
IkReal x1405=(sj1*x1371);
IkReal x1406=(r02*x1370);
IkReal x1407=(r02*x1369);
evalcond[0]=(((cj4*x1401))+((cj4*x1402))+(((-1.0)*r02*x1373))+((sj1*x1376))+((sj1*x1372)));
evalcond[1]=((((-1.0)*cj4*x1400))+((cj4*x1404))+(((-1.0)*x1372*x1373))+(((-1.0)*r02*x1374))+(((-1.0)*x1373*x1376)));
evalcond[2]=(x1398+((px*x1378))+(((-1.0)*pz*x1373))+(((-0.1796)*x1404))+((sj0*x1375))+(((0.1796)*x1400)));
evalcond[3]=((0.19)+(((-1.0)*x1373*x1383))+x1403+(((-1.0)*pz*x1374))+(((0.1796)*x1402))+(((0.1796)*x1401))+(((-1.0)*cj0*px*x1373)));
evalcond[4]=(((x1380*x1387))+((x1386*x1400))+(((-1.0)*sj0*x1373*x1379))+((sj4*x1398))+(((-1.0)*x1374*x1396))+((sj1*x1392))+(((-1.0)*x1386*x1404))+(((-1.0)*cj0*x1373*x1382))+((cj1*x1399)));
evalcond[5]=((((-1.0)*sj4*x1403))+(((-1.0)*r02*x1374*x1387))+(((-1.0)*x1374*x1399))+(((-0.19)*cj0*r01))+(((0.19)*r00*sj0))+((sj0*sj1*x1379))+(((-1.0)*x1386*x1402))+(((-1.0)*x1386*x1401))+((x1378*x1382))+(((-1.0)*x1373*x1396))+((cj1*x1392)));
evalcond[6]=(((x1385*x1387*x1392))+(((-1.0)*x1369*x1372*x1373))+((cj1*x1369*x1376))+((x1371*x1391))+((x1397*x1404))+(((-0.38)*x1395))+(((-1.0)*x1371*x1372*x1373))+(((-0.38)*x1384))+((sj1*x1377*x1384))+(((-1.0)*x1374*x1407))+(((-1.0)*x1374*x1406))+((x1377*x1380*x1383))+((r01*x1375*x1377))+((x1372*x1388))+((x1376*x1388))+((x1383*x1384*x1385))+(((0.0361)*x1391))+((cj1*x1370*x1372))+((cj0*cj1*x1377*x1379))+(((-1.0)*x1368*x1381))+(((-1.0)*x1370*x1373*x1376))+(((-1.0)*pz*x1389))+(((-1.0)*x1371*x1373*x1376))+(((-1.0)*x1394*x1400)));
evalcond[7]=(((x1376*x1405))+((x1371*x1380))+(((-1.0)*x1372*x1390))+(((-2.0)*sj0*x1375*x1384))+(((-1.0)*x1376*x1390))+((x1397*x1401))+((x1372*x1405))+(((-0.0361)*x1380))+(((-1.0)*x1373*x1407))+(((-1.0)*x1373*x1406))+((cj1*x1377*x1395))+((cj1*x1377*x1384))+((x1394*x1402))+(((-1.0)*x1370*x1372*x1374))+(((0.38)*cj0*x1379))+((x1372*x1393))+((x1376*x1393))+(((-1.0)*x1377*x1378*x1379))+(((-1.0)*x1369*x1374*x1376))+((sj1*x1370*x1376))+(((-1.0)*r02*sj0*x1375*x1377))+(((-2.0)*cj0*x1375*x1392))+((sj1*x1369*x1372))+((x1367*x1381))+((x1383*x1389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1408=(sj1*sj3);
IkReal x1409=((2500.0)*cj4);
IkReal x1410=(cj0*px);
IkReal x1411=(py*sj0);
IkReal x1412=(cj3*sj1);
IkReal x1413=(cj0*r00);
IkReal x1414=(cj1*pz);
IkReal x1415=((347.5)*sj1);
IkReal x1416=((449.0)*r01*sj0);
IkReal x1417=((449.0)*cj1*r02);
CheckValue<IkReal> x1418=IKPowWithIntegerCheck(IKsign(((((347.5)*cj3*cj4))+(((449.0)*cj4)))),-1);
if(!x1418.valid){
continue;
}
CheckValue<IkReal> x1419 = IKatan2WithCheck(IkReal(((((-449.0)*x1408*x1413))+(((-1.0)*x1408*x1416))+((cj3*x1409*x1414))+(((-1.0)*x1409*x1411*x1412))+(((-1.0)*x1409*x1410*x1412))+((sj3*x1417)))),((((-1.0)*r01*sj0*x1415))+(((-1.0)*x1412*x1416))+(((-1.0)*x1413*x1415))+(((-1.0)*sj3*x1409*x1414))+((x1408*x1409*x1410))+((x1408*x1409*x1411))+(((347.5)*cj1*r02))+(((-449.0)*x1412*x1413))+((cj3*x1417))),IKFAST_ATAN2_MAGTHRESH);
if(!x1419.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1418.value)))+(x1419.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1420=IKcos(j2);
IkReal x1421=IKsin(j2);
IkReal x1422=px*px;
IkReal x1423=py*py;
IkReal x1424=pz*pz;
IkReal x1425=(r01*sj0);
IkReal x1426=((1.0)*cj1);
IkReal x1427=((1.0)*sj1);
IkReal x1428=(py*sj1);
IkReal x1429=(cj0*r00);
IkReal x1430=((2.0)*pz);
IkReal x1431=(cj0*sj1);
IkReal x1432=(px*r02);
IkReal x1433=(cj1*r02);
IkReal x1434=((0.0499288)*cj4);
IkReal x1435=(pz*r01);
IkReal x1436=(py*sj0);
IkReal x1437=(px*r00);
IkReal x1438=((2.0)*cj1);
IkReal x1439=((0.1796)*sj4);
IkReal x1440=(cj0*py);
IkReal x1441=((0.0361)*cj1);
IkReal x1442=((0.38)*r02);
IkReal x1443=((0.38)*pz);
IkReal x1444=(r02*sj1);
IkReal x1445=(px*r01);
IkReal x1446=((0.0361)*sj1);
IkReal x1447=((0.05157716)*cj4);
IkReal x1448=(py*r01);
IkReal x1449=(py*r00);
IkReal x1450=((0.01293516)*cj4);
IkReal x1451=((0.139)*x1421);
IkReal x1452=(pz*r00*sj0);
IkReal x1453=(cj3*x1421);
IkReal x1454=(sj3*x1421);
IkReal x1455=(cj3*x1420);
IkReal x1456=((0.139)*x1420);
IkReal x1457=(sj3*x1420);
IkReal x1458=(sj1*x1424);
IkReal x1459=(r02*x1423);
IkReal x1460=(r02*x1422);
evalcond[0]=(((sj1*x1429))+((sj1*x1425))+((cj4*x1455))+((cj4*x1454))+(((-1.0)*r02*x1426)));
evalcond[1]=((((-1.0)*x1426*x1429))+((cj4*x1457))+(((-1.0)*x1425*x1426))+(((-1.0)*cj4*x1453))+(((-1.0)*r02*x1427)));
evalcond[2]=(((px*x1431))+(((-1.0)*pz*x1426))+x1451+(((0.1796)*x1453))+(((-0.1796)*x1457))+((sj0*x1428)));
evalcond[3]=((0.19)+(((-1.0)*pz*x1427))+(((-1.0)*cj0*px*x1426))+x1456+(((0.1796)*x1454))+(((0.1796)*x1455))+(((-1.0)*x1426*x1436)));
evalcond[4]=((((-1.0)*sj0*x1426*x1432))+((cj1*x1452))+((sj1*x1445))+(((-1.0)*cj0*x1426*x1435))+((x1439*x1453))+((x1433*x1440))+((sj4*x1451))+(((-1.0)*x1439*x1457))+(((-1.0)*x1427*x1449)));
evalcond[5]=((((-1.0)*x1426*x1449))+(((-1.0)*sj4*x1456))+((cj1*x1445))+(((-1.0)*r02*x1427*x1440))+(((-0.19)*cj0*r01))+(((0.19)*r00*sj0))+(((-1.0)*x1439*x1454))+(((-1.0)*x1439*x1455))+((sj0*sj1*x1432))+(((-1.0)*x1427*x1452))+((x1431*x1435)));
evalcond[6]=((((-0.38)*x1448))+(((-1.0)*x1447*x1453))+((x1425*x1441))+(((-1.0)*x1424*x1425*x1426))+(((0.0361)*x1444))+((x1424*x1444))+(((-1.0)*x1423*x1426*x1429))+((x1430*x1433*x1436))+(((-1.0)*x1424*x1426*x1429))+(((-0.38)*x1437))+((x1450*x1457))+(((-1.0)*x1427*x1460))+((x1436*x1437*x1438))+(((-1.0)*pz*x1442))+((sj1*x1430*x1437))+((x1438*x1440*x1445))+(((-1.0)*x1421*x1434))+((cj0*cj1*x1430*x1432))+(((-1.0)*x1422*x1425*x1426))+((r01*x1428*x1430))+((x1429*x1441))+((cj1*x1423*x1425))+(((-1.0)*x1427*x1459))+((cj1*x1422*x1429)));
evalcond[7]=((((-2.0)*sj0*x1428*x1437))+(((-1.0)*x1430*x1431*x1432))+(((-1.0)*r02*sj0*x1428*x1430))+((x1425*x1446))+((x1447*x1455))+((x1450*x1454))+(((-1.0)*x1422*x1427*x1429))+(((-1.0)*x1426*x1460))+((x1436*x1442))+(((-0.0361)*x1433))+(((-1.0)*x1425*x1443))+((x1424*x1433))+((cj1*x1430*x1448))+((x1425*x1458))+(((-1.0)*x1429*x1443))+(((-2.0)*cj0*x1428*x1445))+((sj1*x1422*x1425))+((x1420*x1434))+(((-1.0)*x1423*x1425*x1427))+((x1429*x1446))+(((-1.0)*x1426*x1459))+((x1429*x1458))+((sj1*x1423*x1429))+((cj1*x1430*x1437))+(((0.38)*cj0*x1432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1461=(cj0*r00);
IkReal x1462=(cj1*sj3);
IkReal x1463=(sj1*sj3);
IkReal x1464=(cj1*cj3);
IkReal x1465=(r01*sj0);
IkReal x1466=((1.0)*cj3*sj1);
IkReal x1467=((1.0)*cj3*x1465);
CheckValue<IkReal> x1468 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1466))+(((-1.0)*x1463*x1465))+((r02*x1462))+(((-1.0)*x1464*x1465))+(((-1.0)*x1461*x1463))+(((-1.0)*x1461*x1464)))),(((x1461*x1462))+((x1462*x1465))+(((-1.0)*x1461*x1466))+((r02*x1464))+((r02*x1463))+(((-1.0)*x1465*x1466))),IKFAST_ATAN2_MAGTHRESH);
if(!x1468.valid){
continue;
}
CheckValue<IkReal> x1469=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1469.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1468.value)+(((1.5707963267949)*(x1469.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1470=IKcos(j2);
IkReal x1471=IKsin(j2);
IkReal x1472=px*px;
IkReal x1473=py*py;
IkReal x1474=pz*pz;
IkReal x1475=(r01*sj0);
IkReal x1476=((1.0)*cj1);
IkReal x1477=((1.0)*sj1);
IkReal x1478=(py*sj1);
IkReal x1479=(cj0*r00);
IkReal x1480=((2.0)*pz);
IkReal x1481=(cj0*sj1);
IkReal x1482=(px*r02);
IkReal x1483=(cj1*r02);
IkReal x1484=((0.0499288)*cj4);
IkReal x1485=(pz*r01);
IkReal x1486=(py*sj0);
IkReal x1487=(px*r00);
IkReal x1488=((2.0)*cj1);
IkReal x1489=((0.1796)*sj4);
IkReal x1490=(cj0*py);
IkReal x1491=((0.0361)*cj1);
IkReal x1492=((0.38)*r02);
IkReal x1493=((0.38)*pz);
IkReal x1494=(r02*sj1);
IkReal x1495=(px*r01);
IkReal x1496=((0.0361)*sj1);
IkReal x1497=((0.05157716)*cj4);
IkReal x1498=(py*r01);
IkReal x1499=(py*r00);
IkReal x1500=((0.01293516)*cj4);
IkReal x1501=((0.139)*x1471);
IkReal x1502=(pz*r00*sj0);
IkReal x1503=(cj3*x1471);
IkReal x1504=(sj3*x1471);
IkReal x1505=(cj3*x1470);
IkReal x1506=((0.139)*x1470);
IkReal x1507=(sj3*x1470);
IkReal x1508=(sj1*x1474);
IkReal x1509=(r02*x1473);
IkReal x1510=(r02*x1472);
evalcond[0]=(((sj1*x1479))+((sj1*x1475))+((cj4*x1504))+((cj4*x1505))+(((-1.0)*r02*x1476)));
evalcond[1]=((((-1.0)*x1476*x1479))+(((-1.0)*x1475*x1476))+((cj4*x1507))+(((-1.0)*r02*x1477))+(((-1.0)*cj4*x1503)));
evalcond[2]=(((sj0*x1478))+(((0.1796)*x1503))+(((-0.1796)*x1507))+x1501+(((-1.0)*pz*x1476))+((px*x1481)));
evalcond[3]=((0.19)+(((-1.0)*cj0*px*x1476))+(((0.1796)*x1505))+(((0.1796)*x1504))+x1506+(((-1.0)*pz*x1477))+(((-1.0)*x1476*x1486)));
evalcond[4]=(((sj1*x1495))+(((-1.0)*sj0*x1476*x1482))+(((-1.0)*cj0*x1476*x1485))+((cj1*x1502))+((x1489*x1503))+((x1483*x1490))+(((-1.0)*x1477*x1499))+((sj4*x1501))+(((-1.0)*x1489*x1507)));
evalcond[5]=(((cj1*x1495))+((x1481*x1485))+(((-1.0)*r02*x1477*x1490))+(((-0.19)*cj0*r01))+(((-1.0)*x1477*x1502))+(((0.19)*r00*sj0))+(((-1.0)*x1489*x1504))+(((-1.0)*x1489*x1505))+((sj0*sj1*x1482))+(((-1.0)*x1476*x1499))+(((-1.0)*sj4*x1506)));
evalcond[6]=(((x1479*x1491))+(((0.0361)*x1494))+((r01*x1478*x1480))+((x1488*x1490*x1495))+(((-0.38)*x1487))+((x1480*x1483*x1486))+((cj0*cj1*x1480*x1482))+(((-0.38)*x1498))+((sj1*x1480*x1487))+(((-1.0)*x1472*x1475*x1476))+((x1486*x1487*x1488))+(((-1.0)*x1477*x1510))+(((-1.0)*x1477*x1509))+((x1500*x1507))+(((-1.0)*x1474*x1475*x1476))+(((-1.0)*x1473*x1476*x1479))+(((-1.0)*x1497*x1503))+((x1474*x1494))+((x1475*x1491))+((cj1*x1472*x1479))+(((-1.0)*x1471*x1484))+(((-1.0)*pz*x1492))+(((-1.0)*x1474*x1476*x1479))+((cj1*x1473*x1475)));
evalcond[7]=(((x1479*x1496))+(((-1.0)*x1480*x1481*x1482))+(((-1.0)*x1479*x1493))+(((-1.0)*x1472*x1477*x1479))+((sj1*x1472*x1475))+((sj1*x1473*x1479))+((x1470*x1484))+((x1479*x1508))+((x1475*x1508))+(((-2.0)*cj0*x1478*x1495))+(((-2.0)*sj0*x1478*x1487))+(((-1.0)*r02*sj0*x1478*x1480))+(((-0.0361)*x1483))+(((-1.0)*x1473*x1475*x1477))+((x1486*x1492))+((x1497*x1505))+((x1500*x1504))+(((-1.0)*x1475*x1493))+(((-1.0)*x1476*x1509))+((x1474*x1483))+(((-1.0)*x1476*x1510))+((x1475*x1496))+((cj1*x1480*x1498))+((cj1*x1480*x1487))+(((0.38)*cj0*x1482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - katana_450_6m180 (918a856a82456acdfb669c2d2f271e86)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
