/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 62 generated on 2015-03-17 09:52:19.596392
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==62);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[0]);
x6=IKsin(j[3]);
x7=IKcos(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((IkReal(0.139000000000000))*(x0));
x11=((IkReal(0.257300000000000))*(x5));
x12=((IkReal(1.00000000000000))*(x7));
x13=((IkReal(0.257300000000000))*(x0));
x14=((IkReal(0.139000000000000))*(x5));
x15=((IkReal(1.00000000000000))*(x6));
x16=((IkReal(1.00000000000000))*(x5));
x17=((IkReal(1.00000000000000))*(x0));
x18=((IkReal(0.190000000000000))*(x1));
x19=((x1)*(x2));
x20=((x1)*(x4));
x21=((x2)*(x3));
x22=((x3)*(x4));
IkReal x23=((IkReal(1.00000000000000))*(x22));
eetrans[0]=((((x0)*(x18)))+(((x6)*(((((x13)*(x21)))+(((x13)*(x20)))))))+(((IkReal(-1.00000000000000))*(x10)*(x23)))+(((x10)*(x19)))+(((x7)*(((((IkReal(-1.00000000000000))*(x13)*(x23)))+(((x13)*(x19))))))));
IkReal x24=((IkReal(1.00000000000000))*(x22));
eetrans[1]=((((x18)*(x5)))+(((x6)*(((((x11)*(x20)))+(((x11)*(x21)))))))+(((x7)*(((((x11)*(x19)))+(((IkReal(-1.00000000000000))*(x11)*(x24)))))))+(((x14)*(x19)))+(((IkReal(-1.00000000000000))*(x14)*(x24))));
eetrans[2]=((IkReal(0.201500000000000))+(((x6)*(((((IkReal(0.257300000000000))*(x22)))+(((IkReal(-0.257300000000000))*(x19)))))))+(((x7)*(((((IkReal(0.257300000000000))*(x21)))+(((IkReal(0.257300000000000))*(x20)))))))+(((IkReal(0.190000000000000))*(x3)))+(((IkReal(0.139000000000000))*(x21)))+(((IkReal(0.139000000000000))*(x20))));
eerot[0]=((((IkReal(-1.00000000000000))*(x16)*(x9)))+(((IkReal(-1.00000000000000))*(x8)*(((((x12)*(((((x0)*(x20)))+(((x0)*(x21)))))))+(((x15)*(((((IkReal(-1.00000000000000))*(x17)*(x19)))+(((x17)*(x22))))))))))));
eerot[1]=((((x0)*(x9)))+(((IkReal(-1.00000000000000))*(x8)*(((((x12)*(((((x21)*(x5)))+(((x20)*(x5)))))))+(((x15)*(((((IkReal(-1.00000000000000))*(x16)*(x19)))+(((x16)*(x22))))))))))));
eerot[2]=((IkReal(-1.00000000000000))*(x8)*(((((x12)*(((((IkReal(-1.00000000000000))*(x19)))+(x22)))))+(((x15)*(((((IkReal(-1.00000000000000))*(x21)))+(((IkReal(-1.00000000000000))*(x20))))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((IkReal(-0.201500000000000))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x25=IKatan2(((IkReal(-1.00000000000000))*(py)), px);
j0array[0]=((IkReal(-1.00000000000000))*(x25));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x25))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
op[0]=((((IkReal(-4.00000000000000))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.00688606045364410))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(0.0671160000000000))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.331929160000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(8.00000000000000))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.288800000000000))*(px)*(py)*(r00)*(r01)))+(((IkReal(0.331929160000000))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+((((pp)*(pp))*((r02)*(r02))))+(((IkReal(-0.760000000000000))*(pp)*(px)*(r00)*(r01)*(sj0)))+(((IkReal(4.00000000000000))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.134232000000000))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(3.04000000000000))*(cj0)*(py)*(r00)*(r01)*((px)*(px))))+(((IkReal(4.00000000000000))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(16.0000000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(16.0000000000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((IkReal(1.52000000000000))*(px)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(0.331929160000000))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(0.0630665404000000))*(px)*(r00)*(r01)*(sj0)))+(((IkReal(3.04000000000000))*(px)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(1.52000000000000))*(cj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-0.760000000000000))*(pp)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(8.00000000000000))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(16.0000000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(1.52000000000000))*(cj0)*(px)*((py)*(py))*((r01)*(r01))))+(((IkReal(0.187529160000000))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.0630665404000000))*(py)*(sj0)*((r01)*(r01))))+(((IkReal(8.00000000000000))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(0.331929160000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(-0.760000000000000))*(cj0)*(pp)*(px)*((r00)*(r00))))+(((IkReal(0.197697160000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(0.760000000000000))*(cj0)*(pp)*(px)*((r02)*(r02))))+(((IkReal(2.00000000000000))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+((((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(1.52000000000000))*(r01)*(r02)*(sj0)*((pz)*(pz)*(pz))))+(((IkReal(4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(0.0137721209072882))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(0.0671160000000000))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-1.52000000000000))*(cj0)*(pp)*(pz)*(r00)*(r02)))+(((IkReal(0.0671160000000000))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(0.100629000800000))*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(8.00000000000000))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(0.00688606045364410))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.331929160000000))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(0.331929160000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(-1.52000000000000))*(pp)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(1.52000000000000))*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(0.0671160000000000))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-0.760000000000000))*(cj0)*(pp)*(py)*(r00)*(r01)))+(((IkReal(0.331929160000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(1.52000000000000))*(px)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(8.00000000000000))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(8.00000000000000))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-0.165964580000000))*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(0.0630665404000000))*(cj0)*(py)*(r00)*(r01)))+((((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.197697160000000))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(0.331929160000000))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(1.52000000000000))*(cj0)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(8.00000000000000))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-0.0375624604000000))*(py)*(sj0)*((r02)*(r02))))+(((IkReal(-0.0215645800000000))*(pp)*((r02)*(r02))))+(((IkReal(4.00000000000000))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(0.197697160000000))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-0.00267369462235590))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(0.197697160000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(8.00000000000000))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(0.144400000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(8.00000000000000))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(0.331929160000000))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(0.134232000000000))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(8.00000000000000))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(1.52000000000000))*(py)*(sj0)*((px)*(px))*((r00)*(r00))))+(((IkReal(4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(1.52000000000000))*(cj0)*(pz)*(r00)*(r02)*((px)*(px))))+(((IkReal(1.52000000000000))*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-4.00000000000000))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(1.52000000000000))*(py)*(sj0)*((pz)*(pz))*((r01)*(r01))))+(((IkReal(4.00000000000000))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(0.0630665404000000))*(cj0)*(px)*((r00)*(r00))))+(((IkReal(4.00000000000000))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(0.760000000000000))*(pp)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(1.52000000000000))*(cj0)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(-4.00000000000000))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.331929160000000))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(0.331929160000000))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(8.00000000000000))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-0.165964580000000))*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.0375624604000000))*(cj0)*(px)*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(1.52000000000000))*(cj0)*(px)*(py)*(pz)*(r01)*(r02)))+(((IkReal(0.100629000800000))*(cj0)*(pz)*(r00)*(r02)))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(0.144400000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(1.52000000000000))*(cj0)*(px)*((pz)*(pz))*((r00)*(r00)))));
op[1]=((((IkReal(-6.08000000000000))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(-6.08000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(3.04000000000000))*(px)*(r00)*(r02)*((cj0)*(cj0))*((pz)*(pz))))+(((IkReal(1.52000000000000))*(pp)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(3.04000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(-6.08000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-3.04000000000000))*((pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.577600000000000))*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-3.04000000000000))*(px)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-0.0751249208000000))*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-0.126133080800000))*(py)*(r01)*(r02)))+(((IkReal(1.52000000000000))*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(1.52000000000000))*(pp)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-3.04000000000000))*(pz)*((py)*(py))*((r01)*(r01))))+(((IkReal(3.04000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(-3.04000000000000))*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-0.577600000000000))*(cj0)*(px)*(pz)*((r02)*(r02))))+(((IkReal(-0.577600000000000))*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(-0.126133080800000))*(pz)*((r02)*(r02))))+(((IkReal(-0.0382390203040000))*(cj0)*(r00)*(r02)))+(((IkReal(-0.577600000000000))*(cj0)*(px)*(py)*(r01)*(r02)))+(((IkReal(-0.577600000000000))*(px)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-0.577600000000000))*(cj0)*(py)*(pz)*(r00)*(r01)))+(((IkReal(-0.577600000000000))*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(3.04000000000000))*(pz)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(3.04000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-0.577600000000000))*(cj0)*(r00)*(r02)*((px)*(px))))+(((IkReal(-6.08000000000000))*(px)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(-3.04000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-1.52000000000000))*(pp)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(3.04000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(pp)*(py)*(r01)*(r02)))+(((IkReal(-0.126133080800000))*(px)*(r00)*(r02)))+(((IkReal(0.577600000000000))*(pp)*(r01)*(r02)*(sj0)))+(((IkReal(3.04000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(0.150249841600000))*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(3.04000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(1.52000000000000))*(pp)*(pz)*((r02)*(r02))))+(((IkReal(-6.08000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(-0.0382390203040000))*(r01)*(r02)*(sj0)))+(((IkReal(-3.04000000000000))*(pz)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-0.577600000000000))*(cj0)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(3.04000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r00)*(r00))))+(((IkReal(-0.577600000000000))*(cj0)*(px)*(pz)*((r00)*(r00))))+(((IkReal(-3.04000000000000))*(py)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-0.0751249208000000))*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(0.0751249208000000))*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-6.08000000000000))*(py)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(-3.04000000000000))*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(3.04000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(0.577600000000000))*(cj0)*(pp)*(r00)*(r02)))+(((IkReal(-0.577600000000000))*(px)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(1.52000000000000))*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-0.0751249208000000))*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-1.52000000000000))*(pp)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.0751249208000000))*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-3.04000000000000))*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-0.577600000000000))*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(1.52000000000000))*(pp)*(px)*(r00)*(r02)))+(((IkReal(3.04000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(3.04000000000000))*(py)*(r01)*(r02)*((pz)*(pz))*((sj0)*(sj0))))+(((IkReal(-3.04000000000000))*(pz)*((px)*(px))*((r00)*(r00))))+(((IkReal(0.0751249208000000))*(pz)*((cj0)*(cj0))*((r00)*(r00)))));
op[2]=((((IkReal(-8.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(0.491341680000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(-0.759805680000000))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(0.0328916310592882))*((r02)*(r02))))+(((IkReal(16.0000000000000))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(0.288800000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(0.134232000000000))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(32.0000000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(16.0000000000000))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-0.0489337987934236))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(-8.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(16.0000000000000))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-0.0244668993967118))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(16.0000000000000))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(32.0000000000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((IkReal(16.0000000000000))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(-0.491341680000000))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(0.577600000000000))*(px)*(py)*(r00)*(r01)))+(((IkReal(-0.759805680000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(16.0000000000000))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.491341680000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-0.759805680000000))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-0.491341680000000))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(8.00000000000000))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-8.00000000000000))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.134232000000000))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-0.491341680000000))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(16.0000000000000))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(16.0000000000000))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(8.00000000000000))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(1.81905832000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(-0.759805680000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(1.81905832000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(8.00000000000000))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(1.53025832000000))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(2.00000000000000))*((pp)*(pp))*((r02)*(r02))))+(((IkReal(-8.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-0.491341680000000))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-0.491341680000000))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(2.00000000000000))*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(0.288800000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(32.0000000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(2.00000000000000))*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((IkReal(-8.00000000000000))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(16.0000000000000))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(8.00000000000000))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.491341680000000))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(-8.00000000000000))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(16.0000000000000))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-0.491341680000000))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(0.134232000000000))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(-0.0244668993967118))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-8.00000000000000))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(0.268464000000000))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(16.0000000000000))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-8.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(-0.620729160000000))*(pp)*((r02)*(r02))))+(((IkReal(-8.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(0.245670840000000))*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-8.00000000000000))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(0.268464000000000))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(8.00000000000000))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.134232000000000))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-8.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(16.0000000000000))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(0.245670840000000))*(pp)*((r01)*(r01))*((sj0)*(sj0)))));
op[3]=((((IkReal(-6.08000000000000))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(-6.08000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(3.04000000000000))*(px)*(r00)*(r02)*((cj0)*(cj0))*((pz)*(pz))))+(((IkReal(1.52000000000000))*(pp)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(3.04000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(-0.577600000000000))*(cj0)*(pp)*(r00)*(r02)))+(((IkReal(0.577600000000000))*(cj0)*(px)*(pz)*((r02)*(r02))))+(((IkReal(-6.08000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-3.04000000000000))*((pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(-3.04000000000000))*(px)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(0.577600000000000))*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(-0.0751249208000000))*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-0.126133080800000))*(py)*(r01)*(r02)))+(((IkReal(1.52000000000000))*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(1.52000000000000))*(pp)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-3.04000000000000))*(pz)*((py)*(py))*((r01)*(r01))))+(((IkReal(3.04000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(0.577600000000000))*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(-3.04000000000000))*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(0.577600000000000))*(cj0)*(py)*(pz)*(r00)*(r01)))+(((IkReal(-0.126133080800000))*(pz)*((r02)*(r02))))+(((IkReal(0.577600000000000))*(cj0)*(r00)*(r02)*((px)*(px))))+(((IkReal(0.577600000000000))*(cj0)*(px)*(pz)*((r00)*(r00))))+(((IkReal(3.04000000000000))*(pz)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(3.04000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-6.08000000000000))*(px)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(0.577600000000000))*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(0.577600000000000))*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(-3.04000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-1.52000000000000))*(pp)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(3.04000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(pp)*(py)*(r01)*(r02)))+(((IkReal(-0.126133080800000))*(px)*(r00)*(r02)))+(((IkReal(3.04000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(0.0382390203040000))*(r01)*(r02)*(sj0)))+(((IkReal(0.150249841600000))*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(3.04000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(1.52000000000000))*(pp)*(pz)*((r02)*(r02))))+(((IkReal(-6.08000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(0.577600000000000))*(cj0)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(-3.04000000000000))*(pz)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(3.04000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r00)*(r00))))+(((IkReal(0.577600000000000))*(cj0)*(px)*(py)*(r01)*(r02)))+(((IkReal(-3.04000000000000))*(py)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(0.0382390203040000))*(cj0)*(r00)*(r02)))+(((IkReal(-0.0751249208000000))*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(0.0751249208000000))*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-6.08000000000000))*(py)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(-3.04000000000000))*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(3.04000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(1.52000000000000))*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-0.577600000000000))*(pp)*(r01)*(r02)*(sj0)))+(((IkReal(-0.0751249208000000))*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-1.52000000000000))*(pp)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.0751249208000000))*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(0.577600000000000))*(px)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-3.04000000000000))*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(pp)*(px)*(r00)*(r02)))+(((IkReal(3.04000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(3.04000000000000))*(py)*(r01)*(r02)*((pz)*(pz))*((sj0)*(sj0))))+(((IkReal(-3.04000000000000))*(pz)*((px)*(px))*((r00)*(r00))))+(((IkReal(0.577600000000000))*(px)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(0.0751249208000000))*(pz)*((cj0)*(cj0))*((r00)*(r00)))));
op[4]=((((IkReal(-4.00000000000000))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.00688606045364410))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(0.0671160000000000))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.331929160000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(8.00000000000000))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.288800000000000))*(px)*(py)*(r00)*(r01)))+(((IkReal(0.331929160000000))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+((((pp)*(pp))*((r02)*(r02))))+(((IkReal(0.760000000000000))*(cj0)*(pp)*(px)*((r00)*(r00))))+(((IkReal(-0.100629000800000))*(cj0)*(pz)*(r00)*(r02)))+(((IkReal(4.00000000000000))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.134232000000000))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(0.760000000000000))*(cj0)*(pp)*(py)*(r00)*(r01)))+(((IkReal(4.00000000000000))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(16.0000000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(16.0000000000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(0.331929160000000))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(0.760000000000000))*(pp)*(px)*(r00)*(r01)*(sj0)))+(((IkReal(8.00000000000000))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(16.0000000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(0.187529160000000))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-1.52000000000000))*(px)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(8.00000000000000))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(0.331929160000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(0.197697160000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(0.0375624604000000))*(cj0)*(px)*((r02)*(r02))))+(((IkReal(-1.52000000000000))*(py)*(sj0)*((pz)*(pz))*((r01)*(r01))))+(((IkReal(-0.760000000000000))*(cj0)*(pp)*(px)*((r02)*(r02))))+(((IkReal(-0.0630665404000000))*(cj0)*(py)*(r00)*(r01)))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((IkReal(-1.52000000000000))*(cj0)*(px)*((pz)*(pz))*((r00)*(r00))))+((((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(0.0137721209072882))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(0.0671160000000000))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-1.52000000000000))*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-3.04000000000000))*(cj0)*(py)*(r00)*(r01)*((px)*(px))))+(((IkReal(0.0671160000000000))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(8.00000000000000))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(0.00688606045364410))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.331929160000000))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-0.100629000800000))*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(0.0375624604000000))*(py)*(sj0)*((r02)*(r02))))+(((IkReal(-1.52000000000000))*(px)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(0.331929160000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(0.0671160000000000))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(0.331929160000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(-1.52000000000000))*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-1.52000000000000))*(cj0)*(px)*((py)*(py))*((r01)*(r01))))+(((IkReal(8.00000000000000))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(8.00000000000000))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-1.52000000000000))*(cj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-0.165964580000000))*(pp)*((cj0)*(cj0))*((r00)*(r00))))+((((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.197697160000000))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-1.52000000000000))*(cj0)*(px)*(py)*(pz)*(r01)*(r02)))+(((IkReal(-0.760000000000000))*(pp)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(0.331929160000000))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(0.760000000000000))*(pp)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(8.00000000000000))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-0.0630665404000000))*(cj0)*(px)*((r00)*(r00))))+(((IkReal(-0.0215645800000000))*(pp)*((r02)*(r02))))+(((IkReal(4.00000000000000))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(0.197697160000000))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-1.52000000000000))*(cj0)*(pz)*(r00)*(r02)*((px)*(px))))+(((IkReal(-0.00267369462235590))*((r02)*(r02))))+(((IkReal(-3.04000000000000))*(px)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(0.197697160000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(8.00000000000000))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(0.144400000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(1.52000000000000))*(cj0)*(pp)*(pz)*(r00)*(r02)))+(((IkReal(8.00000000000000))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(0.331929160000000))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(-0.0630665404000000))*(py)*(sj0)*((r01)*(r01))))+(((IkReal(0.134232000000000))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(8.00000000000000))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-4.00000000000000))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-1.52000000000000))*(py)*(sj0)*((px)*(px))*((r00)*(r00))))+(((IkReal(4.00000000000000))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-1.52000000000000))*(cj0)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(4.00000000000000))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-4.00000000000000))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(1.52000000000000))*(pp)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-1.52000000000000))*(cj0)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(0.331929160000000))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(0.331929160000000))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(8.00000000000000))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-1.52000000000000))*(r01)*(r02)*(sj0)*((pz)*(pz)*(pz))))+(((IkReal(-0.165964580000000))*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(0.144400000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.0630665404000000))*(px)*(r00)*(r01)*(sj0))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
IkReal x26=(pz)*(pz);
IkReal x27=(py)*(py);
IkReal x28=(px)*(px);
IkReal x29=((r01)*(sj0));
IkReal x30=((IkReal(0.190000000000000))*(cj1));
IkReal x31=((pp)*(sj1));
IkReal x32=((IkReal(1.00000000000000))*(r02));
IkReal x33=((IkReal(2.00000000000000))*(pz));
IkReal x34=((IkReal(1.00000000000000))*(pz));
IkReal x35=((IkReal(0.380000000000000))*(pz));
IkReal x36=((py)*(sj1));
IkReal x37=((px)*(sj0));
IkReal x38=((cj0)*(r00));
IkReal x39=((IkReal(1.00000000000000))*(cj1));
IkReal x40=((cj0)*(py));
IkReal x41=((IkReal(2.00000000000000))*(sj1));
IkReal x42=((IkReal(0.0361000000000000))*(cj1));
IkReal x43=((IkReal(0.0361000000000000))*(sj1));
IkReal x44=((IkReal(2.00000000000000))*(cj1));
IkReal x45=((IkReal(0.190000000000000))*(sj1));
IkReal x46=((cj0)*(r01));
IkReal x47=((py)*(r01));
IkReal x48=((px)*(r00));
IkReal x49=((py)*(r02)*(sj0));
IkReal x50=((cj0)*(px)*(r02));
IkReal x51=((r02)*(x26));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x37)))+(x40));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(x46));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x32)))+(((sj1)*(x38)))+(((sj1)*(x29))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x48)))+(((IkReal(-1.00000000000000))*(x47)))+(((x29)*(x30)))+(((IkReal(-1.00000000000000))*(pz)*(x32)))+(((r02)*(x45)))+(((x30)*(x38))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x29)*(x39)))+(((IkReal(-1.00000000000000))*(x38)*(x39)))+(((IkReal(-1.00000000000000))*(sj1)*(x32))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x29)*(x34)))+(((IkReal(-1.00000000000000))*(r02)*(x30)))+(((x29)*(x45)))+(((x38)*(x45)))+(x49)+(x50)+(((IkReal(-1.00000000000000))*(x34)*(x38))));
evalcond[7]=((((cj1)*(x33)*(x50)))+(((IkReal(-1.00000000000000))*(r02)*(x35)))+(((x29)*(x42)))+(((py)*(r00)*(x37)*(x44)))+(((IkReal(-1.00000000000000))*(pp)*(x38)*(x39)))+(((sj1)*(x33)*(x48)))+(((x38)*(x42)))+(((x27)*(x29)*(x44)))+(((IkReal(-1.00000000000000))*(x31)*(x32)))+(((x28)*(x38)*(x44)))+(((IkReal(-0.380000000000000))*(x47)))+(((IkReal(-0.380000000000000))*(x48)))+(((r01)*(x33)*(x36)))+(((r02)*(x43)))+(((x41)*(x51)))+(((cj1)*(x33)*(x49)))+(((IkReal(-1.00000000000000))*(pp)*(x29)*(x39)))+(((px)*(r01)*(x40)*(x44))));
evalcond[8]=((((IkReal(-1.00000000000000))*(r02)*(x42)))+(((IkReal(-1.00000000000000))*(x29)*(x35)))+(((x29)*(x31)))+(((IkReal(-1.00000000000000))*(x28)*(x38)*(x41)))+(((IkReal(-2.00000000000000))*(r00)*(x36)*(x37)))+(((x29)*(x43)))+(((IkReal(-2.00000000000000))*(px)*(x36)*(x46)))+(((IkReal(0.380000000000000))*(x50)))+(((x44)*(x51)))+(((x38)*(x43)))+(((IkReal(-1.00000000000000))*(sj1)*(x33)*(x50)))+(((IkReal(0.380000000000000))*(x49)))+(((IkReal(-1.00000000000000))*(x35)*(x38)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x32)))+(((x31)*(x38)))+(((IkReal(-1.00000000000000))*(r02)*(sj0)*(x33)*(x36)))+(((cj1)*(x33)*(x47)))+(((cj1)*(x33)*(x48)))+(((IkReal(-1.00000000000000))*(x27)*(x29)*(x41))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x52=((IkReal(5.31250087376659))*(cj1));
cj3array[0]=((IkReal(-0.690964694237614))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x52)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x52)))+(((IkReal(13.9802654572805))*(pp)))+(((IkReal(-5.31250087376659))*(pz)*(sj1))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x53=((px)*(sj0));
IkReal x54=((IkReal(2.00000000000000))*(py));
IkReal x55=((cj0)*(r01));
IkReal x56=((pz)*(r02));
IkReal x57=((r00)*(sj0));
IkReal x58=((IkReal(0.380000000000000))*(cj1));
IkReal x59=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x60=((IkReal(0.380000000000000))*(pz)*(sj1));
evalcond[0]=((IkReal(-0.0855242900000000))+(((r01)*(x53)*(x54)))+(((IkReal(-1.00000000000000))*(x53)*(x59)))+(((pp)*(x55)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(r00)*(x54)))+(((IkReal(0.0361000000000000))*(x55)))+(((IkReal(-1.00000000000000))*(pp)*(x57)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x53)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x58)))+(((IkReal(2.00000000000000))*(x53)*(x56)))+(((IkReal(-1.00000000000000))*(py)*(x54)*(x55)))+(((cj0)*(py)*(x59)))+(((IkReal(-1.00000000000000))*(x55)*(x60)))+(((x57)*(x60)))+(((py)*(r00)*(x58)))+(((IkReal(-0.0361000000000000))*(x57)))+(((IkReal(-0.0715294000000000))*(IKcos(j3))))+(((IkReal(-1.00000000000000))*(cj0)*(x54)*(x56))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((IkReal(-1932100.00000000))+(((IkReal(-6620329.00000000))*((sj3)*(sj3))))+(((IkReal(-6620329.00000000))*((cj3)*(cj3))))+(((IkReal(-7152940.00000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.70215827338129))*(cj3)))+(((IkReal(-3.42649397029139))*((sj3)*(sj3))))+(((IkReal(-3.42649397029139))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((IkReal(-1932100.00000000))+(((IkReal(-6620329.00000000))*((sj3)*(sj3))))+(((IkReal(-6620329.00000000))*((cj3)*(cj3))))+(((IkReal(-7152940.00000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.70215827338129))*(cj3)))+(((IkReal(-3.42649397029139))*((sj3)*(sj3))))+(((IkReal(-3.42649397029139))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x61=((px)*(sj1));
IkReal x62=((cj0)*(cj1));
IkReal x63=((IkReal(13900000.0000000))*(r01));
IkReal x64=((cj1)*(sj0));
IkReal x65=((IkReal(13900000.0000000))*(pz));
IkReal x66=((IkReal(25730000.0000000))*(cj3));
IkReal x67=((px)*(r02));
IkReal x68=((pz)*(r00));
IkReal x69=((r00)*(sj1));
IkReal x70=((IkReal(13900000.0000000))*(py));
IkReal x71=((IkReal(25730000.0000000))*(sj3));
IkReal x72=((r01)*(x71));
IkReal x73=((py)*(x71));
IkReal x74=((IkReal(25730000.0000000))*(pz)*(sj1));
if( IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(pz)*(r01)*(x62)*(x66)))+(((r02)*(x62)*(x70)))+(((r01)*(x61)*(x66)))+(((IkReal(-13900000.0000000))*(x64)*(x67)))+(((x64)*(x66)*(x68)))+(((IkReal(-1.00000000000000))*(px)*(x62)*(x71)))+(((x61)*(x63)))+(((IkReal(-1.00000000000000))*(pz)*(x62)*(x63)))+(((IkReal(-1.00000000000000))*(x64)*(x66)*(x67)))+(((IkReal(-1.00000000000000))*(py)*(x66)*(x69)))+(((IkReal(4888700.00000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x69)*(x70)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x71)))+(((py)*(r02)*(x62)*(x66)))+(((IkReal(-1.00000000000000))*(x64)*(x73)))+(((r00)*(x64)*(x65))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((IkReal(2641000.00000000))+(((pz)*(x62)*(x72)))+(((x64)*(x67)*(x71)))+(((IkReal(-1.00000000000000))*(px)*(x62)*(x66)))+(((x69)*(x73)))+(((IkReal(-1.00000000000000))*(py)*(x64)*(x66)))+(((IkReal(-13900000.0000000))*(px)*(x62)))+(((IkReal(-1.00000000000000))*(x64)*(x68)*(x71)))+(((IkReal(-1.00000000000000))*(x61)*(x72)))+(((IkReal(-1.00000000000000))*(sj1)*(x65)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x66)))+(((IkReal(4888700.00000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x64)*(x70)))+(((IkReal(-1.00000000000000))*(r02)*(x62)*(x73))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst8)*(((((IkReal(-1.00000000000000))*(pz)*(r01)*(x62)*(x66)))+(((r02)*(x62)*(x70)))+(((r01)*(x61)*(x66)))+(((IkReal(-13900000.0000000))*(x64)*(x67)))+(((x64)*(x66)*(x68)))+(((IkReal(-1.00000000000000))*(px)*(x62)*(x71)))+(((x61)*(x63)))+(((IkReal(-1.00000000000000))*(pz)*(x62)*(x63)))+(((IkReal(-1.00000000000000))*(x64)*(x66)*(x67)))+(((IkReal(-1.00000000000000))*(py)*(x66)*(x69)))+(((IkReal(4888700.00000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x69)*(x70)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x71)))+(((py)*(r02)*(x62)*(x66)))+(((IkReal(-1.00000000000000))*(x64)*(x73)))+(((r00)*(x64)*(x65)))))), ((gconst8)*(((IkReal(2641000.00000000))+(((pz)*(x62)*(x72)))+(((x64)*(x67)*(x71)))+(((IkReal(-1.00000000000000))*(px)*(x62)*(x66)))+(((x69)*(x73)))+(((IkReal(-1.00000000000000))*(py)*(x64)*(x66)))+(((IkReal(-13900000.0000000))*(px)*(x62)))+(((IkReal(-1.00000000000000))*(x64)*(x68)*(x71)))+(((IkReal(-1.00000000000000))*(x61)*(x72)))+(((IkReal(-1.00000000000000))*(sj1)*(x65)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x66)))+(((IkReal(4888700.00000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x64)*(x70)))+(((IkReal(-1.00000000000000))*(r02)*(x62)*(x73)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x75=IKsin(j2);
IkReal x76=IKcos(j2);
IkReal x77=((IkReal(0.257300000000000))*(sj3));
IkReal x78=((px)*(sj1));
IkReal x79=((IkReal(0.257300000000000))*(cj3));
IkReal x80=((py)*(sj1));
IkReal x81=((IkReal(1.00000000000000))*(r00));
IkReal x82=((cj1)*(sj0));
IkReal x83=((IkReal(1.00000000000000))*(px));
IkReal x84=((IkReal(1.00000000000000))*(pz));
IkReal x85=((cj0)*(r01));
IkReal x86=((pz)*(sj1));
IkReal x87=((cj0)*(cj1));
IkReal x88=((IkReal(0.139000000000000))*(x75));
IkReal x89=((IkReal(0.139000000000000))*(x76));
IkReal x90=((x75)*(x79));
IkReal x91=((x76)*(x77));
IkReal x92=((x75)*(x77));
IkReal x93=((x76)*(x79));
IkReal x94=((x88)+(x90));
IkReal x95=((x89)+(x93)+(x92));
evalcond[0]=((((cj0)*(x78)))+(((sj0)*(x80)))+(x94)+(((IkReal(-1.00000000000000))*(cj1)*(x84)))+(((IkReal(-1.00000000000000))*(x91))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x84)))+(((IkReal(-1.00000000000000))*(x83)*(x87)))+(((IkReal(-1.00000000000000))*(py)*(x82)))+(x95));
evalcond[2]=((((IkReal(-1.00000000000000))*(x80)*(x81)))+(((pz)*(r00)*(x82)))+(x94)+(((IkReal(-1.00000000000000))*(cj1)*(x84)*(x85)))+(((IkReal(-1.00000000000000))*(x91)))+(((py)*(r02)*(x87)))+(((IkReal(-1.00000000000000))*(r02)*(x82)*(x83)))+(((r01)*(x78))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x85)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x80)))+(((x85)*(x86)))+(((IkReal(-1.00000000000000))*(sj0)*(x81)*(x86)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x81)))+(((r02)*(sj0)*(x78)))+(((IkReal(-1.00000000000000))*(x95)))+(((cj1)*(px)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x96=((IkReal(25730000.0000000))*(cj1));
IkReal x97=((cj3)*(pz));
IkReal x98=((py)*(sj0));
IkReal x99=((IkReal(25730000.0000000))*(sj1));
IkReal x100=((pz)*(sj3));
IkReal x101=((cj0)*(px));
IkReal x102=((IkReal(13900000.0000000))*(cj1));
IkReal x103=((IkReal(13900000.0000000))*(sj1));
IkReal x104=((sj1)*(x101));
if( IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(pz)*(x102)))+(((x103)*(x98)))+(((cj3)*(x101)*(x99)))+(((IkReal(-1.00000000000000))*(sj3)*(x101)*(x96)))+(((IkReal(4888700.00000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x100)*(x99)))+(((cj3)*(x98)*(x99)))+(((x101)*(x103)))+(((IkReal(-1.00000000000000))*(x96)*(x97)))+(((IkReal(-1.00000000000000))*(sj3)*(x96)*(x98))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((IkReal(2641000.00000000))+(((IkReal(-1.00000000000000))*(pz)*(x103)))+(((IkReal(-1.00000000000000))*(sj3)*(x98)*(x99)))+(((IkReal(-1.00000000000000))*(x102)*(x98)))+(((x100)*(x96)))+(((IkReal(-1.00000000000000))*(x101)*(x102)))+(((IkReal(-1.00000000000000))*(cj3)*(x101)*(x96)))+(((IkReal(-1.00000000000000))*(sj3)*(x101)*(x99)))+(((IkReal(4888700.00000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x97)*(x99)))+(((IkReal(-1.00000000000000))*(cj3)*(x96)*(x98))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst7)*(((((IkReal(-1.00000000000000))*(pz)*(x102)))+(((x103)*(x98)))+(((cj3)*(x101)*(x99)))+(((IkReal(-1.00000000000000))*(sj3)*(x101)*(x96)))+(((IkReal(4888700.00000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x100)*(x99)))+(((cj3)*(x98)*(x99)))+(((x101)*(x103)))+(((IkReal(-1.00000000000000))*(x96)*(x97)))+(((IkReal(-1.00000000000000))*(sj3)*(x96)*(x98)))))), ((gconst7)*(((IkReal(2641000.00000000))+(((IkReal(-1.00000000000000))*(pz)*(x103)))+(((IkReal(-1.00000000000000))*(sj3)*(x98)*(x99)))+(((IkReal(-1.00000000000000))*(x102)*(x98)))+(((x100)*(x96)))+(((IkReal(-1.00000000000000))*(x101)*(x102)))+(((IkReal(-1.00000000000000))*(cj3)*(x101)*(x96)))+(((IkReal(-1.00000000000000))*(sj3)*(x101)*(x99)))+(((IkReal(4888700.00000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x97)*(x99)))+(((IkReal(-1.00000000000000))*(cj3)*(x96)*(x98)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x105=IKsin(j2);
IkReal x106=IKcos(j2);
IkReal x107=((IkReal(0.257300000000000))*(sj3));
IkReal x108=((px)*(sj1));
IkReal x109=((IkReal(0.257300000000000))*(cj3));
IkReal x110=((py)*(sj1));
IkReal x111=((IkReal(1.00000000000000))*(r00));
IkReal x112=((cj1)*(sj0));
IkReal x113=((IkReal(1.00000000000000))*(px));
IkReal x114=((IkReal(1.00000000000000))*(pz));
IkReal x115=((cj0)*(r01));
IkReal x116=((pz)*(sj1));
IkReal x117=((cj0)*(cj1));
IkReal x118=((IkReal(0.139000000000000))*(x105));
IkReal x119=((IkReal(0.139000000000000))*(x106));
IkReal x120=((x105)*(x109));
IkReal x121=((x106)*(x107));
IkReal x122=((x105)*(x107));
IkReal x123=((x106)*(x109));
IkReal x124=((x120)+(x118));
IkReal x125=((x122)+(x123)+(x119));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj1)*(x114)))+(((sj0)*(x110)))+(((IkReal(-1.00000000000000))*(x121)))+(x124)+(((cj0)*(x108))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x114)))+(((IkReal(-1.00000000000000))*(x113)*(x117)))+(x125)+(((IkReal(-1.00000000000000))*(py)*(x112))));
evalcond[2]=((((pz)*(r00)*(x112)))+(((py)*(r02)*(x117)))+(((IkReal(-1.00000000000000))*(r02)*(x112)*(x113)))+(((IkReal(-1.00000000000000))*(x110)*(x111)))+(((IkReal(-1.00000000000000))*(x121)))+(x124)+(((r01)*(x108)))+(((IkReal(-1.00000000000000))*(cj1)*(x114)*(x115))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj0)*(x111)*(x116)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x111)))+(((IkReal(-1.00000000000000))*(x125)))+(((IkReal(-0.190000000000000))*(x115)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((r02)*(sj0)*(x108)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x110)))+(((x115)*(x116)))+(((cj1)*(px)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
IkReal x126=(pz)*(pz);
IkReal x127=(py)*(py);
IkReal x128=(px)*(px);
IkReal x129=((r01)*(sj0));
IkReal x130=((IkReal(0.190000000000000))*(cj1));
IkReal x131=((pp)*(sj1));
IkReal x132=((IkReal(1.00000000000000))*(r02));
IkReal x133=((IkReal(2.00000000000000))*(pz));
IkReal x134=((IkReal(1.00000000000000))*(pz));
IkReal x135=((IkReal(0.380000000000000))*(pz));
IkReal x136=((py)*(sj1));
IkReal x137=((px)*(sj0));
IkReal x138=((cj0)*(r00));
IkReal x139=((IkReal(1.00000000000000))*(cj1));
IkReal x140=((cj0)*(py));
IkReal x141=((IkReal(2.00000000000000))*(sj1));
IkReal x142=((IkReal(0.0361000000000000))*(cj1));
IkReal x143=((IkReal(0.0361000000000000))*(sj1));
IkReal x144=((IkReal(2.00000000000000))*(cj1));
IkReal x145=((IkReal(0.190000000000000))*(sj1));
IkReal x146=((cj0)*(r01));
IkReal x147=((py)*(r01));
IkReal x148=((px)*(r00));
IkReal x149=((py)*(r02)*(sj0));
IkReal x150=((cj0)*(px)*(r02));
IkReal x151=((r02)*(x126));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((x140)+(((IkReal(-1.00000000000000))*(x137))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(x146));
evalcond[3]=((((sj1)*(x138)))+(((IkReal(-1.00000000000000))*(cj1)*(x132)))+(((sj1)*(x129))));
evalcond[4]=((((IkReal(-1.00000000000000))*(pz)*(x132)))+(((x129)*(x130)))+(((x130)*(x138)))+(((IkReal(-1.00000000000000))*(x147)))+(((IkReal(-1.00000000000000))*(x148)))+(((r02)*(x145))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj1)*(x132)))+(((IkReal(-1.00000000000000))*(x138)*(x139)))+(((IkReal(-1.00000000000000))*(x129)*(x139))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x134)*(x138)))+(((x138)*(x145)))+(x150)+(x149)+(((x129)*(x145)))+(((IkReal(-1.00000000000000))*(r02)*(x130)))+(((IkReal(-1.00000000000000))*(x129)*(x134))));
evalcond[7]=((((cj1)*(x133)*(x150)))+(((IkReal(-1.00000000000000))*(pp)*(x129)*(x139)))+(((IkReal(-1.00000000000000))*(pp)*(x138)*(x139)))+(((cj1)*(x133)*(x149)))+(((x138)*(x142)))+(((x141)*(x151)))+(((x128)*(x138)*(x144)))+(((x129)*(x142)))+(((py)*(r00)*(x137)*(x144)))+(((IkReal(-1.00000000000000))*(r02)*(x135)))+(((IkReal(-0.380000000000000))*(x147)))+(((IkReal(-0.380000000000000))*(x148)))+(((sj1)*(x133)*(x148)))+(((x127)*(x129)*(x144)))+(((r02)*(x143)))+(((r01)*(x133)*(x136)))+(((IkReal(-1.00000000000000))*(x131)*(x132)))+(((px)*(r01)*(x140)*(x144))));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj1)*(pp)*(x132)))+(((IkReal(-2.00000000000000))*(px)*(x136)*(x146)))+(((IkReal(-1.00000000000000))*(x135)*(x138)))+(((cj1)*(x133)*(x148)))+(((cj1)*(x133)*(x147)))+(((IkReal(0.380000000000000))*(x149)))+(((IkReal(0.380000000000000))*(x150)))+(((x129)*(x131)))+(((x144)*(x151)))+(((IkReal(-1.00000000000000))*(sj1)*(x133)*(x150)))+(((IkReal(-1.00000000000000))*(r02)*(x142)))+(((IkReal(-1.00000000000000))*(x127)*(x129)*(x141)))+(((x138)*(x143)))+(((IkReal(-1.00000000000000))*(r02)*(sj0)*(x133)*(x136)))+(((x129)*(x143)))+(((x131)*(x138)))+(((IkReal(-2.00000000000000))*(r00)*(x136)*(x137)))+(((IkReal(-1.00000000000000))*(x129)*(x135)))+(((IkReal(-1.00000000000000))*(x128)*(x138)*(x141))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x152=((IkReal(5.31250087376659))*(cj1));
cj3array[0]=((IkReal(-0.690964694237614))+(((IkReal(13.9802654572805))*(pp)))+(((IkReal(-5.31250087376659))*(pz)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x152)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x152))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x153=((px)*(sj0));
IkReal x154=((IkReal(2.00000000000000))*(py));
IkReal x155=((cj0)*(r01));
IkReal x156=((pz)*(r02));
IkReal x157=((r00)*(sj0));
IkReal x158=((IkReal(0.380000000000000))*(cj1));
IkReal x159=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x160=((IkReal(0.380000000000000))*(pz)*(sj1));
evalcond[0]=((IkReal(0.0855242900000000))+(((IkReal(-0.0361000000000000))*(x157)))+(((IkReal(0.0715294000000000))*(IKcos(j3))))+(((x157)*(x160)))+(((cj0)*(py)*(x159)))+(((IkReal(-1.00000000000000))*(cj0)*(x154)*(x156)))+(((IkReal(-1.00000000000000))*(x153)*(x159)))+(((r01)*(x153)*(x154)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x153)))+(((IkReal(-1.00000000000000))*(py)*(x154)*(x155)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(r00)*(x154)))+(((IkReal(2.00000000000000))*(x153)*(x156)))+(((py)*(r00)*(x158)))+(((IkReal(-1.00000000000000))*(pp)*(x157)))+(((IkReal(-1.00000000000000))*(x155)*(x160)))+(((pp)*(x155)))+(((IkReal(0.0361000000000000))*(x155)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x158))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((IkReal(-1932100.00000000))+(((IkReal(-6620329.00000000))*((sj3)*(sj3))))+(((IkReal(-6620329.00000000))*((cj3)*(cj3))))+(((IkReal(-7152940.00000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.70215827338129))*(cj3)))+(((IkReal(-3.42649397029139))*((sj3)*(sj3))))+(((IkReal(-3.42649397029139))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((IkReal(-1932100.00000000))+(((IkReal(-6620329.00000000))*((sj3)*(sj3))))+(((IkReal(-6620329.00000000))*((cj3)*(cj3))))+(((IkReal(-7152940.00000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.70215827338129))*(cj3)))+(((IkReal(-3.42649397029139))*((sj3)*(sj3))))+(((IkReal(-3.42649397029139))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x161=((px)*(sj1));
IkReal x162=((cj0)*(cj1));
IkReal x163=((px)*(r02));
IkReal x164=((IkReal(13900000.0000000))*(r01));
IkReal x165=((IkReal(25730000.0000000))*(cj3));
IkReal x166=((pz)*(sj1));
IkReal x167=((IkReal(25730000.0000000))*(sj3));
IkReal x168=((cj1)*(sj0));
IkReal x169=((pz)*(r00));
IkReal x170=((py)*(r02));
IkReal x171=((r01)*(x167));
IkReal x172=((py)*(r00)*(sj1));
IkReal x173=((x167)*(x168));
if( IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(x166)*(x167)))+(((IkReal(-1.00000000000000))*(px)*(x162)*(x167)))+(((IkReal(13900000.0000000))*(x163)*(x168)))+(((IkReal(-1.00000000000000))*(x161)*(x164)))+(((IkReal(-1.00000000000000))*(py)*(x173)))+(((IkReal(-1.00000000000000))*(r01)*(x161)*(x165)))+(((pz)*(r01)*(x162)*(x165)))+(((x163)*(x165)*(x168)))+(((IkReal(-1.00000000000000))*(x165)*(x168)*(x169)))+(((x165)*(x172)))+(((IkReal(-13900000.0000000))*(x168)*(x169)))+(((IkReal(-1.00000000000000))*(x162)*(x165)*(x170)))+(((IkReal(4888700.00000000))*(sj3)))+(((pz)*(x162)*(x164)))+(((IkReal(13900000.0000000))*(x172)))+(((IkReal(-13900000.0000000))*(x162)*(x170))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((IkReal(2641000.00000000))+(((IkReal(-1.00000000000000))*(py)*(x165)*(x168)))+(((x161)*(x171)))+(((IkReal(-1.00000000000000))*(px)*(x162)*(x165)))+(((IkReal(-1.00000000000000))*(pz)*(x162)*(x171)))+(((IkReal(-1.00000000000000))*(x163)*(x173)))+(((x169)*(x173)))+(((IkReal(-13900000.0000000))*(x166)))+(((IkReal(-13900000.0000000))*(py)*(x168)))+(((x162)*(x167)*(x170)))+(((IkReal(-13900000.0000000))*(px)*(x162)))+(((IkReal(4888700.00000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x165)*(x166)))+(((IkReal(-1.00000000000000))*(x167)*(x172))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst10)*(((((IkReal(-1.00000000000000))*(x166)*(x167)))+(((IkReal(-1.00000000000000))*(px)*(x162)*(x167)))+(((IkReal(13900000.0000000))*(x163)*(x168)))+(((IkReal(-1.00000000000000))*(x161)*(x164)))+(((IkReal(-1.00000000000000))*(py)*(x173)))+(((IkReal(-1.00000000000000))*(r01)*(x161)*(x165)))+(((pz)*(r01)*(x162)*(x165)))+(((x163)*(x165)*(x168)))+(((IkReal(-1.00000000000000))*(x165)*(x168)*(x169)))+(((x165)*(x172)))+(((IkReal(-13900000.0000000))*(x168)*(x169)))+(((IkReal(-1.00000000000000))*(x162)*(x165)*(x170)))+(((IkReal(4888700.00000000))*(sj3)))+(((pz)*(x162)*(x164)))+(((IkReal(13900000.0000000))*(x172)))+(((IkReal(-13900000.0000000))*(x162)*(x170)))))), ((gconst10)*(((IkReal(2641000.00000000))+(((IkReal(-1.00000000000000))*(py)*(x165)*(x168)))+(((x161)*(x171)))+(((IkReal(-1.00000000000000))*(px)*(x162)*(x165)))+(((IkReal(-1.00000000000000))*(pz)*(x162)*(x171)))+(((IkReal(-1.00000000000000))*(x163)*(x173)))+(((x169)*(x173)))+(((IkReal(-13900000.0000000))*(x166)))+(((IkReal(-13900000.0000000))*(py)*(x168)))+(((x162)*(x167)*(x170)))+(((IkReal(-13900000.0000000))*(px)*(x162)))+(((IkReal(4888700.00000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x165)*(x166)))+(((IkReal(-1.00000000000000))*(x167)*(x172)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x174=IKsin(j2);
IkReal x175=IKcos(j2);
IkReal x176=((IkReal(0.257300000000000))*(sj3));
IkReal x177=((px)*(sj1));
IkReal x178=((IkReal(0.257300000000000))*(cj3));
IkReal x179=((py)*(sj1));
IkReal x180=((IkReal(1.00000000000000))*(r00));
IkReal x181=((cj1)*(sj0));
IkReal x182=((IkReal(1.00000000000000))*(px));
IkReal x183=((IkReal(1.00000000000000))*(pz));
IkReal x184=((cj0)*(r01));
IkReal x185=((pz)*(sj1));
IkReal x186=((cj0)*(cj1));
IkReal x187=((IkReal(0.139000000000000))*(x174));
IkReal x188=((IkReal(0.139000000000000))*(x175));
IkReal x189=((x175)*(x176));
IkReal x190=((x174)*(x178));
IkReal x191=((x174)*(x176));
IkReal x192=((x175)*(x178));
IkReal x193=((x190)+(x187));
IkReal x194=((x192)+(x191)+(x188));
evalcond[0]=((((cj0)*(x177)))+(((sj0)*(x179)))+(((IkReal(-1.00000000000000))*(x189)))+(x193)+(((IkReal(-1.00000000000000))*(cj1)*(x183))));
evalcond[1]=((IkReal(0.190000000000000))+(x194)+(((IkReal(-1.00000000000000))*(py)*(x181)))+(((IkReal(-1.00000000000000))*(sj1)*(x183)))+(((IkReal(-1.00000000000000))*(x182)*(x186))));
evalcond[2]=((((r01)*(x177)))+(((IkReal(-1.00000000000000))*(x193)))+(x189)+(((IkReal(-1.00000000000000))*(r02)*(x181)*(x182)))+(((py)*(r02)*(x186)))+(((IkReal(-1.00000000000000))*(cj1)*(x183)*(x184)))+(((IkReal(-1.00000000000000))*(x179)*(x180)))+(((pz)*(r00)*(x181))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(py)*(x180)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x179)))+(((r02)*(sj0)*(x177)))+(((IkReal(-0.190000000000000))*(x184)))+(x194)+(((x184)*(x185)))+(((IkReal(-1.00000000000000))*(sj0)*(x180)*(x185)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((cj1)*(px)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x195=((IkReal(25730000.0000000))*(cj1));
IkReal x196=((cj3)*(pz));
IkReal x197=((py)*(sj0));
IkReal x198=((IkReal(25730000.0000000))*(sj1));
IkReal x199=((pz)*(sj3));
IkReal x200=((cj0)*(px));
IkReal x201=((IkReal(13900000.0000000))*(cj1));
IkReal x202=((IkReal(13900000.0000000))*(sj1));
IkReal x203=((sj1)*(x200));
if( IKabs(((gconst9)*(((((IkReal(-1.00000000000000))*(sj3)*(x195)*(x200)))+(((cj3)*(x198)*(x200)))+(((IkReal(-1.00000000000000))*(x195)*(x196)))+(((x200)*(x202)))+(((IkReal(-1.00000000000000))*(pz)*(x201)))+(((x197)*(x202)))+(((cj3)*(x197)*(x198)))+(((IkReal(-1.00000000000000))*(x198)*(x199)))+(((IkReal(4888700.00000000))*(sj3)))+(((IkReal(-1.00000000000000))*(sj3)*(x195)*(x197))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((IkReal(2641000.00000000))+(((IkReal(-1.00000000000000))*(sj3)*(x197)*(x198)))+(((IkReal(-1.00000000000000))*(x200)*(x201)))+(((IkReal(-1.00000000000000))*(x196)*(x198)))+(((IkReal(-1.00000000000000))*(sj3)*(x198)*(x200)))+(((IkReal(-1.00000000000000))*(x197)*(x201)))+(((IkReal(-1.00000000000000))*(pz)*(x202)))+(((x195)*(x199)))+(((IkReal(4888700.00000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x195)*(x200)))+(((IkReal(-1.00000000000000))*(cj3)*(x195)*(x197))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst9)*(((((IkReal(-1.00000000000000))*(sj3)*(x195)*(x200)))+(((cj3)*(x198)*(x200)))+(((IkReal(-1.00000000000000))*(x195)*(x196)))+(((x200)*(x202)))+(((IkReal(-1.00000000000000))*(pz)*(x201)))+(((x197)*(x202)))+(((cj3)*(x197)*(x198)))+(((IkReal(-1.00000000000000))*(x198)*(x199)))+(((IkReal(4888700.00000000))*(sj3)))+(((IkReal(-1.00000000000000))*(sj3)*(x195)*(x197)))))), ((gconst9)*(((IkReal(2641000.00000000))+(((IkReal(-1.00000000000000))*(sj3)*(x197)*(x198)))+(((IkReal(-1.00000000000000))*(x200)*(x201)))+(((IkReal(-1.00000000000000))*(x196)*(x198)))+(((IkReal(-1.00000000000000))*(sj3)*(x198)*(x200)))+(((IkReal(-1.00000000000000))*(x197)*(x201)))+(((IkReal(-1.00000000000000))*(pz)*(x202)))+(((x195)*(x199)))+(((IkReal(4888700.00000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x195)*(x200)))+(((IkReal(-1.00000000000000))*(cj3)*(x195)*(x197)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x204=IKsin(j2);
IkReal x205=IKcos(j2);
IkReal x206=((IkReal(0.257300000000000))*(sj3));
IkReal x207=((px)*(sj1));
IkReal x208=((IkReal(0.257300000000000))*(cj3));
IkReal x209=((py)*(sj1));
IkReal x210=((IkReal(1.00000000000000))*(r00));
IkReal x211=((cj1)*(sj0));
IkReal x212=((IkReal(1.00000000000000))*(px));
IkReal x213=((IkReal(1.00000000000000))*(pz));
IkReal x214=((cj0)*(r01));
IkReal x215=((pz)*(sj1));
IkReal x216=((cj0)*(cj1));
IkReal x217=((IkReal(0.139000000000000))*(x204));
IkReal x218=((IkReal(0.139000000000000))*(x205));
IkReal x219=((x205)*(x206));
IkReal x220=((x204)*(x208));
IkReal x221=((x204)*(x206));
IkReal x222=((x205)*(x208));
IkReal x223=((x217)+(x220));
IkReal x224=((x218)+(x221)+(x222));
evalcond[0]=((((sj0)*(x209)))+(((IkReal(-1.00000000000000))*(cj1)*(x213)))+(x223)+(((cj0)*(x207)))+(((IkReal(-1.00000000000000))*(x219))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(py)*(x211)))+(((IkReal(-1.00000000000000))*(sj1)*(x213)))+(x224)+(((IkReal(-1.00000000000000))*(x212)*(x216))));
evalcond[2]=((((py)*(r02)*(x216)))+(((IkReal(-1.00000000000000))*(r02)*(x211)*(x212)))+(((r01)*(x207)))+(x219)+(((IkReal(-1.00000000000000))*(cj1)*(x213)*(x214)))+(((pz)*(r00)*(x211)))+(((IkReal(-1.00000000000000))*(x209)*(x210)))+(((IkReal(-1.00000000000000))*(x223))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x214)))+(((x214)*(x215)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x209)))+(x224)+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x210)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((r02)*(sj0)*(x207)))+(((IkReal(-1.00000000000000))*(sj0)*(x210)*(x215)))+(((cj1)*(px)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x225=((cj1)*(sj0));
IkReal x226=((cj0)*(cj1));
if( IKabs(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r00)*(x226)))+(((IkReal(-190.000000000000))*(r01)*(x225)))+(((IkReal(-190.000000000000))*(r02)*(sj1)))+(((IkReal(1000.00000000000))*(px)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.690964694237614))+(((IkReal(13.9802654572805))*(pp)))+(((IkReal(-5.31250087376659))*(pz)*(sj1)))+(((IkReal(-5.31250087376659))*(px)*(x226)))+(((IkReal(-5.31250087376659))*(py)*(x225))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r00)*(x226)))+(((IkReal(-190.000000000000))*(r01)*(x225)))+(((IkReal(-190.000000000000))*(r02)*(sj1)))+(((IkReal(1000.00000000000))*(px)*(r00)))))))+IKsqr(((IkReal(-0.690964694237614))+(((IkReal(13.9802654572805))*(pp)))+(((IkReal(-5.31250087376659))*(pz)*(sj1)))+(((IkReal(-5.31250087376659))*(px)*(x226)))+(((IkReal(-5.31250087376659))*(py)*(x225)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r00)*(x226)))+(((IkReal(-190.000000000000))*(r01)*(x225)))+(((IkReal(-190.000000000000))*(r02)*(sj1)))+(((IkReal(1000.00000000000))*(px)*(r00)))))), ((IkReal(-0.690964694237614))+(((IkReal(13.9802654572805))*(pp)))+(((IkReal(-5.31250087376659))*(pz)*(sj1)))+(((IkReal(-5.31250087376659))*(px)*(x226)))+(((IkReal(-5.31250087376659))*(py)*(x225)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x227=IKcos(j3);
IkReal x228=((r01)*(sj0));
IkReal x229=((IkReal(0.190000000000000))*(cj1));
IkReal x230=((cj0)*(py));
IkReal x231=((px)*(sj0));
IkReal x232=((py)*(sj0));
IkReal x233=((r00)*(sj0));
IkReal x234=((cj0)*(r01));
IkReal x235=((IkReal(1.00000000000000))*(pz));
IkReal x236=((IkReal(1.00000000000000))*(pp));
IkReal x237=((IkReal(0.380000000000000))*(cj1));
IkReal x238=((cj0)*(r00));
IkReal x239=((IkReal(0.190000000000000))*(sj1));
IkReal x240=((IkReal(0.139000000000000))*(cj4));
IkReal x241=((cj0)*(px));
IkReal x242=((IkReal(2.00000000000000))*(px)*(py));
IkReal x243=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x244=((IkReal(0.0715294000000000))*(x227));
IkReal x245=((IkReal(0.380000000000000))*(pz)*(sj1));
IkReal x246=((IkReal(2.00000000000000))*(pz)*(r02));
evalcond[0]=((IkReal(0.0494242900000000))+(((x232)*(x237)))+(((x237)*(x241)))+(((IkReal(-1.00000000000000))*(x236)))+(x245)+(x244));
evalcond[1]=((((r02)*(x239)))+(((x240)*(IKsin(j3))))+(((x229)*(x238)))+(((IkReal(-1.00000000000000))*(px)*(r00)))+(((x228)*(x229)))+(((IkReal(-1.00000000000000))*(r02)*(x235)))+(((IkReal(-1.00000000000000))*(py)*(r01))));
evalcond[2]=((((r02)*(x232)))+(((IkReal(-1.00000000000000))*(r02)*(x229)))+(((r02)*(x241)))+(((IkReal(-1.00000000000000))*(x235)*(x238)))+(((x228)*(x239)))+(((x238)*(x239)))+(((IkReal(-0.257300000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x227)*(x240)))+(((IkReal(-1.00000000000000))*(x228)*(x235))));
evalcond[3]=((((py)*(r00)*(x237)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x231)))+(((IkReal(-1.00000000000000))*(x233)*(x236)))+(((pp)*(x234)))+(((x230)*(x243)))+(((IkReal(-2.00000000000000))*(py)*(r01)*(x230)))+(((x233)*(x245)))+(((IkReal(-0.0361000000000000))*(x233)))+(((IkReal(0.0361000000000000))*(x234)))+(((IkReal(-1.00000000000000))*(x231)*(x243)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x237)))+(((IkReal(-1.00000000000000))*(sj4)*(x244)))+(((IkReal(-1.00000000000000))*(x234)*(x245)))+(((x228)*(x242)))+(((IkReal(-1.00000000000000))*(x230)*(x246)))+(((x231)*(x246)))+(((IkReal(-0.0855242900000000))*(sj4)))+(((IkReal(-2.00000000000000))*(px)*(r00)*(x230))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3))))));
dummyeval[0]=((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x247=((IkReal(2573.00000000000))*(cj4));
gconst2=IKsign(((((x247)*((cj3)*(cj3))))+(((x247)*((sj3)*(sj3))))+(((IkReal(1390.00000000000))*(cj3)*(cj4)))));
IkReal x248=((IkReal(1.85107913669065))*(cj4));
dummyeval[0]=((((x248)*((sj3)*(sj3))))+(((cj3)*(cj4)))+(((x248)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x249=((IkReal(0.0715294000000000))*(cj3));
IkReal x250=(py)*(py);
IkReal x251=(px)*(px);
IkReal x252=(pz)*(pz);
IkReal x253=((IkReal(2.00000000000000))*(px));
IkReal x254=((r01)*(sj0));
IkReal x255=((r00)*(sj1));
IkReal x256=((IkReal(0.190000000000000))*(cj1));
IkReal x257=((cj0)*(py));
IkReal x258=((px)*(sj0));
IkReal x259=((pp)*(sj1));
IkReal x260=((IkReal(2.00000000000000))*(pz));
IkReal x261=((r00)*(sj0));
IkReal x262=((cj0)*(pp));
IkReal x263=((IkReal(1.00000000000000))*(r02));
IkReal x264=((py)*(sj0));
IkReal x265=((r01)*(sj1));
IkReal x266=((IkReal(0.380000000000000))*(cj1));
IkReal x267=((IkReal(0.380000000000000))*(pz));
IkReal x268=((IkReal(1.00000000000000))*(pp));
IkReal x269=((r02)*(sj1));
IkReal x270=((cj0)*(pz));
IkReal x271=((cj0)*(r00));
IkReal x272=((cj0)*(r01));
IkReal x273=((cj1)*(r02));
IkReal x274=((cj1)*(py));
IkReal x275=((cj0)*(px));
IkReal x276=((IkReal(0.0361000000000000))*(cj1));
IkReal x277=((IkReal(1.00000000000000))*(r00));
IkReal x278=((py)*(r01));
IkReal x279=((IkReal(0.380000000000000))*(x269));
IkReal x280=((r02)*(x264));
IkReal x281=((IkReal(2.00000000000000))*(x251));
IkReal x282=((cj1)*(x277));
IkReal x283=((IkReal(2.00000000000000))*(x250));
IkReal x284=((IkReal(2.00000000000000))*(x252));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((x257)+(((IkReal(-1.00000000000000))*(x258))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x261)))+(x272));
evalcond[3]=((IkReal(0.0494242900000000))+(((x266)*(x275)))+(((x264)*(x266)))+(x249)+(((IkReal(-1.00000000000000))*(x268)))+(((sj1)*(x267))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj1)*(x263)))+(((sj1)*(x254)))+(((cj0)*(x255))));
evalcond[5]=((((IkReal(0.190000000000000))*(x269)))+(((IkReal(-1.00000000000000))*(x278)))+(((IkReal(-1.00000000000000))*(px)*(x277)))+(((x254)*(x256)))+(((x256)*(x271)))+(((IkReal(-1.00000000000000))*(pz)*(x263))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj1)*(x254)))+(((IkReal(-1.00000000000000))*(sj1)*(x263)))+(((IkReal(-1.00000000000000))*(cj1)*(x271))));
evalcond[7]=((((IkReal(0.190000000000000))*(sj1)*(x254)))+(((r02)*(x275)))+(((IkReal(-1.00000000000000))*(r02)*(x256)))+(x280)+(((IkReal(-1.00000000000000))*(pz)*(x254)))+(((IkReal(-1.00000000000000))*(x270)*(x277)))+(((IkReal(0.190000000000000))*(cj0)*(x255))));
evalcond[8]=((IkReal(-0.0855242900000000))+(((x261)*(x281)))+(((IkReal(-1.00000000000000))*(r02)*(x257)*(x260)))+(((py)*(r00)*(x266)))+(((IkReal(-1.00000000000000))*(x258)*(x279)))+(((pz)*(r02)*(sj0)*(x253)))+(((IkReal(-0.0361000000000000))*(x261)))+(((IkReal(-1.00000000000000))*(x261)*(x268)))+(((sj0)*(x255)*(x267)))+(((py)*(x253)*(x254)))+(((IkReal(-1.00000000000000))*(r00)*(x253)*(x257)))+(((IkReal(0.0361000000000000))*(x272)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x266)))+(((IkReal(-1.00000000000000))*(cj0)*(x265)*(x267)))+(((IkReal(-1.00000000000000))*(x249)))+(((IkReal(-1.00000000000000))*(x272)*(x283)))+(((x257)*(x279)))+(((r01)*(x262))));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj1)*(x254)*(x268)))+(((x271)*(x276)))+(((x269)*(x284)))+(((IkReal(-1.00000000000000))*(x262)*(x282)))+(((IkReal(-1.00000000000000))*(x259)*(x263)))+(((IkReal(-0.380000000000000))*(x278)))+(((x260)*(x264)*(x273)))+(((IkReal(0.0361000000000000))*(x269)))+(((x254)*(x276)))+(((py)*(x260)*(x265)))+(((x253)*(x270)*(x273)))+(((IkReal(-1.00000000000000))*(r02)*(x267)))+(((cj1)*(x271)*(x281)))+(((cj1)*(x254)*(x283)))+(((cj1)*(r01)*(x253)*(x257)))+(((x253)*(x261)*(x274)))+(((pz)*(x253)*(x255)))+(((IkReal(-0.380000000000000))*(px)*(r00))));
evalcond[10]=((((IkReal(-1.00000000000000))*(sj1)*(x254)*(x283)))+(((r01)*(x260)*(x274)))+(((IkReal(-1.00000000000000))*(x260)*(x264)*(x269)))+(((IkReal(0.0361000000000000))*(cj0)*(x255)))+(((IkReal(-1.00000000000000))*(cj0)*(x255)*(x281)))+(((IkReal(-1.00000000000000))*(x253)*(x269)*(x270)))+(((IkReal(-1.00000000000000))*(x253)*(x255)*(x264)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x263)))+(((x255)*(x262)))+(((x273)*(x284)))+(((cj1)*(pz)*(r00)*(x253)))+(((IkReal(-0.0361000000000000))*(x273)))+(((IkReal(0.0361000000000000))*(sj1)*(x254)))+(((x254)*(x259)))+(((IkReal(-1.00000000000000))*(x267)*(x271)))+(((IkReal(0.380000000000000))*(x280)))+(((IkReal(0.380000000000000))*(r02)*(x275)))+(((IkReal(-1.00000000000000))*(x254)*(x267)))+(((IkReal(-1.00000000000000))*(x253)*(x257)*(x265))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((IkReal(-1932100.00000000))+(((IkReal(-6620329.00000000))*((sj3)*(sj3))))+(((IkReal(-6620329.00000000))*((cj3)*(cj3))))+(((IkReal(-7152940.00000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.70215827338129))*(cj3)))+(((IkReal(-3.42649397029139))*((sj3)*(sj3))))+(((IkReal(-3.42649397029139))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((IkReal(-1932100.00000000))+(((IkReal(-6620329.00000000))*((sj3)*(sj3))))+(((IkReal(-6620329.00000000))*((cj3)*(cj3))))+(((IkReal(-7152940.00000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.70215827338129))*(cj3)))+(((IkReal(-3.42649397029139))*((sj3)*(sj3))))+(((IkReal(-3.42649397029139))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x285=((px)*(sj1));
IkReal x286=((cj0)*(cj1));
IkReal x287=((IkReal(13900000.0000000))*(r01));
IkReal x288=((cj1)*(sj0));
IkReal x289=((px)*(r02));
IkReal x290=((IkReal(13900000.0000000))*(pz));
IkReal x291=((IkReal(25730000.0000000))*(cj3));
IkReal x292=((pz)*(r00));
IkReal x293=((r00)*(sj1));
IkReal x294=((IkReal(13900000.0000000))*(py));
IkReal x295=((IkReal(25730000.0000000))*(sj3));
IkReal x296=((r01)*(x295));
IkReal x297=((py)*(x295));
IkReal x298=((IkReal(25730000.0000000))*(pz)*(sj1));
if( IKabs(((gconst4)*(((((IkReal(-13900000.0000000))*(x288)*(x289)))+(((x285)*(x287)))+(((r02)*(x286)*(x294)))+(((r01)*(x285)*(x291)))+(((x288)*(x291)*(x292)))+(((IkReal(-1.00000000000000))*(x288)*(x289)*(x291)))+(((IkReal(-1.00000000000000))*(pz)*(x286)*(x287)))+(((r00)*(x288)*(x290)))+(((IkReal(-1.00000000000000))*(x293)*(x294)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x295)))+(((IkReal(-1.00000000000000))*(x288)*(x297)))+(((IkReal(4888700.00000000))*(sj3)))+(((IkReal(-1.00000000000000))*(px)*(x286)*(x295)))+(((IkReal(-1.00000000000000))*(pz)*(r01)*(x286)*(x291)))+(((IkReal(-1.00000000000000))*(py)*(x291)*(x293)))+(((py)*(r02)*(x286)*(x291))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((IkReal(2641000.00000000))+(((IkReal(-1.00000000000000))*(x285)*(x296)))+(((IkReal(-1.00000000000000))*(r02)*(x286)*(x297)))+(((IkReal(-1.00000000000000))*(x288)*(x292)*(x295)))+(((IkReal(-1.00000000000000))*(py)*(x288)*(x291)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x291)))+(((IkReal(-1.00000000000000))*(sj1)*(x290)))+(((IkReal(-1.00000000000000))*(x288)*(x294)))+(((IkReal(-1.00000000000000))*(px)*(x286)*(x291)))+(((x288)*(x289)*(x295)))+(((x293)*(x297)))+(((IkReal(4888700.00000000))*(cj3)))+(((IkReal(-13900000.0000000))*(px)*(x286)))+(((pz)*(x286)*(x296))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst4)*(((((IkReal(-13900000.0000000))*(x288)*(x289)))+(((x285)*(x287)))+(((r02)*(x286)*(x294)))+(((r01)*(x285)*(x291)))+(((x288)*(x291)*(x292)))+(((IkReal(-1.00000000000000))*(x288)*(x289)*(x291)))+(((IkReal(-1.00000000000000))*(pz)*(x286)*(x287)))+(((r00)*(x288)*(x290)))+(((IkReal(-1.00000000000000))*(x293)*(x294)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x295)))+(((IkReal(-1.00000000000000))*(x288)*(x297)))+(((IkReal(4888700.00000000))*(sj3)))+(((IkReal(-1.00000000000000))*(px)*(x286)*(x295)))+(((IkReal(-1.00000000000000))*(pz)*(r01)*(x286)*(x291)))+(((IkReal(-1.00000000000000))*(py)*(x291)*(x293)))+(((py)*(r02)*(x286)*(x291)))))), ((gconst4)*(((IkReal(2641000.00000000))+(((IkReal(-1.00000000000000))*(x285)*(x296)))+(((IkReal(-1.00000000000000))*(r02)*(x286)*(x297)))+(((IkReal(-1.00000000000000))*(x288)*(x292)*(x295)))+(((IkReal(-1.00000000000000))*(py)*(x288)*(x291)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x291)))+(((IkReal(-1.00000000000000))*(sj1)*(x290)))+(((IkReal(-1.00000000000000))*(x288)*(x294)))+(((IkReal(-1.00000000000000))*(px)*(x286)*(x291)))+(((x288)*(x289)*(x295)))+(((x293)*(x297)))+(((IkReal(4888700.00000000))*(cj3)))+(((IkReal(-13900000.0000000))*(px)*(x286)))+(((pz)*(x286)*(x296)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x299=IKsin(j2);
IkReal x300=IKcos(j2);
IkReal x301=((IkReal(0.257300000000000))*(sj3));
IkReal x302=((px)*(sj1));
IkReal x303=((IkReal(0.257300000000000))*(cj3));
IkReal x304=((py)*(sj1));
IkReal x305=((IkReal(1.00000000000000))*(r00));
IkReal x306=((cj1)*(sj0));
IkReal x307=((IkReal(1.00000000000000))*(px));
IkReal x308=((IkReal(1.00000000000000))*(pz));
IkReal x309=((cj0)*(r01));
IkReal x310=((pz)*(sj1));
IkReal x311=((cj0)*(cj1));
IkReal x312=((IkReal(0.139000000000000))*(x299));
IkReal x313=((IkReal(0.139000000000000))*(x300));
IkReal x314=((x299)*(x303));
IkReal x315=((x300)*(x301));
IkReal x316=((x299)*(x301));
IkReal x317=((x300)*(x303));
IkReal x318=((x314)+(x312));
IkReal x319=((x317)+(x316)+(x313));
evalcond[0]=((x318)+(((cj0)*(x302)))+(((IkReal(-1.00000000000000))*(x315)))+(((IkReal(-1.00000000000000))*(cj1)*(x308)))+(((sj0)*(x304))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x308)))+(((IkReal(-1.00000000000000))*(py)*(x306)))+(x319)+(((IkReal(-1.00000000000000))*(x307)*(x311))));
evalcond[2]=((x318)+(((py)*(r02)*(x311)))+(((IkReal(-1.00000000000000))*(x315)))+(((IkReal(-1.00000000000000))*(r02)*(x306)*(x307)))+(((IkReal(-1.00000000000000))*(x304)*(x305)))+(((r01)*(x302)))+(((pz)*(r00)*(x306)))+(((IkReal(-1.00000000000000))*(cj1)*(x308)*(x309))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x309)))+(((IkReal(-1.00000000000000))*(sj0)*(x305)*(x310)))+(((x309)*(x310)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x304)))+(((IkReal(-1.00000000000000))*(x319)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((r02)*(sj0)*(x302)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x305))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x320=((IkReal(25730000.0000000))*(cj1));
IkReal x321=((cj3)*(pz));
IkReal x322=((py)*(sj0));
IkReal x323=((IkReal(25730000.0000000))*(sj1));
IkReal x324=((pz)*(sj3));
IkReal x325=((cj0)*(px));
IkReal x326=((IkReal(13900000.0000000))*(cj1));
IkReal x327=((IkReal(13900000.0000000))*(sj1));
IkReal x328=((sj1)*(x325));
if( IKabs(((gconst3)*(((((x322)*(x327)))+(((x325)*(x327)))+(((IkReal(-1.00000000000000))*(x323)*(x324)))+(((IkReal(-1.00000000000000))*(x320)*(x321)))+(((IkReal(-1.00000000000000))*(sj3)*(x320)*(x322)))+(((IkReal(-1.00000000000000))*(sj3)*(x320)*(x325)))+(((IkReal(4888700.00000000))*(sj3)))+(((cj3)*(x322)*(x323)))+(((IkReal(-1.00000000000000))*(pz)*(x326)))+(((cj3)*(x323)*(x325))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((IkReal(2641000.00000000))+(((IkReal(-1.00000000000000))*(x321)*(x323)))+(((x320)*(x324)))+(((IkReal(-1.00000000000000))*(x325)*(x326)))+(((IkReal(-1.00000000000000))*(x322)*(x326)))+(((IkReal(-1.00000000000000))*(sj3)*(x323)*(x325)))+(((IkReal(-1.00000000000000))*(cj3)*(x320)*(x325)))+(((IkReal(-1.00000000000000))*(cj3)*(x320)*(x322)))+(((IkReal(-1.00000000000000))*(pz)*(x327)))+(((IkReal(-1.00000000000000))*(sj3)*(x322)*(x323)))+(((IkReal(4888700.00000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst3)*(((((x322)*(x327)))+(((x325)*(x327)))+(((IkReal(-1.00000000000000))*(x323)*(x324)))+(((IkReal(-1.00000000000000))*(x320)*(x321)))+(((IkReal(-1.00000000000000))*(sj3)*(x320)*(x322)))+(((IkReal(-1.00000000000000))*(sj3)*(x320)*(x325)))+(((IkReal(4888700.00000000))*(sj3)))+(((cj3)*(x322)*(x323)))+(((IkReal(-1.00000000000000))*(pz)*(x326)))+(((cj3)*(x323)*(x325)))))), ((gconst3)*(((IkReal(2641000.00000000))+(((IkReal(-1.00000000000000))*(x321)*(x323)))+(((x320)*(x324)))+(((IkReal(-1.00000000000000))*(x325)*(x326)))+(((IkReal(-1.00000000000000))*(x322)*(x326)))+(((IkReal(-1.00000000000000))*(sj3)*(x323)*(x325)))+(((IkReal(-1.00000000000000))*(cj3)*(x320)*(x325)))+(((IkReal(-1.00000000000000))*(cj3)*(x320)*(x322)))+(((IkReal(-1.00000000000000))*(pz)*(x327)))+(((IkReal(-1.00000000000000))*(sj3)*(x322)*(x323)))+(((IkReal(4888700.00000000))*(cj3)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x329=IKsin(j2);
IkReal x330=IKcos(j2);
IkReal x331=((IkReal(0.257300000000000))*(sj3));
IkReal x332=((px)*(sj1));
IkReal x333=((IkReal(0.257300000000000))*(cj3));
IkReal x334=((py)*(sj1));
IkReal x335=((IkReal(1.00000000000000))*(r00));
IkReal x336=((cj1)*(sj0));
IkReal x337=((IkReal(1.00000000000000))*(px));
IkReal x338=((IkReal(1.00000000000000))*(pz));
IkReal x339=((cj0)*(r01));
IkReal x340=((pz)*(sj1));
IkReal x341=((cj0)*(cj1));
IkReal x342=((IkReal(0.139000000000000))*(x329));
IkReal x343=((IkReal(0.139000000000000))*(x330));
IkReal x344=((x329)*(x333));
IkReal x345=((x330)*(x331));
IkReal x346=((x329)*(x331));
IkReal x347=((x330)*(x333));
IkReal x348=((x342)+(x344));
IkReal x349=((x343)+(x346)+(x347));
evalcond[0]=((x348)+(((cj0)*(x332)))+(((IkReal(-1.00000000000000))*(cj1)*(x338)))+(((IkReal(-1.00000000000000))*(x345)))+(((sj0)*(x334))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(x337)*(x341)))+(((IkReal(-1.00000000000000))*(py)*(x336)))+(x349)+(((IkReal(-1.00000000000000))*(sj1)*(x338))));
evalcond[2]=((((r01)*(x332)))+(((pz)*(r00)*(x336)))+(((IkReal(-1.00000000000000))*(r02)*(x336)*(x337)))+(x348)+(((IkReal(-1.00000000000000))*(cj1)*(x338)*(x339)))+(((py)*(r02)*(x341)))+(((IkReal(-1.00000000000000))*(x345)))+(((IkReal(-1.00000000000000))*(x334)*(x335))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj0)*(x335)*(x340)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x335)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x334)))+(((IkReal(-1.00000000000000))*(x349)))+(((cj1)*(px)*(r01)))+(((x339)*(x340)))+(((IkReal(-0.190000000000000))*(x339)))+(((r02)*(sj0)*(x332))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x350=((IkReal(0.0715294000000000))*(cj3));
IkReal x351=(py)*(py);
IkReal x352=(px)*(px);
IkReal x353=(pz)*(pz);
IkReal x354=((IkReal(2.00000000000000))*(px));
IkReal x355=((r01)*(sj0));
IkReal x356=((r00)*(sj1));
IkReal x357=((IkReal(0.190000000000000))*(cj1));
IkReal x358=((cj0)*(py));
IkReal x359=((px)*(sj0));
IkReal x360=((pp)*(sj1));
IkReal x361=((IkReal(2.00000000000000))*(pz));
IkReal x362=((r00)*(sj0));
IkReal x363=((cj0)*(pp));
IkReal x364=((IkReal(1.00000000000000))*(r02));
IkReal x365=((py)*(sj0));
IkReal x366=((r01)*(sj1));
IkReal x367=((IkReal(0.380000000000000))*(cj1));
IkReal x368=((IkReal(0.380000000000000))*(pz));
IkReal x369=((IkReal(1.00000000000000))*(pp));
IkReal x370=((r02)*(sj1));
IkReal x371=((cj0)*(pz));
IkReal x372=((cj0)*(r00));
IkReal x373=((cj0)*(r01));
IkReal x374=((cj1)*(r02));
IkReal x375=((cj1)*(py));
IkReal x376=((cj0)*(px));
IkReal x377=((IkReal(0.0361000000000000))*(cj1));
IkReal x378=((IkReal(1.00000000000000))*(r00));
IkReal x379=((py)*(r01));
IkReal x380=((IkReal(0.380000000000000))*(x370));
IkReal x381=((r02)*(x365));
IkReal x382=((IkReal(2.00000000000000))*(x352));
IkReal x383=((cj1)*(x378));
IkReal x384=((IkReal(2.00000000000000))*(x351));
IkReal x385=((IkReal(2.00000000000000))*(x353));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x359)))+(x358));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x362)))+(x373));
evalcond[3]=((IkReal(0.0494242900000000))+(((x367)*(x376)))+(((IkReal(-1.00000000000000))*(x369)))+(((sj1)*(x368)))+(((x365)*(x367)))+(x350));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj1)*(x364)))+(((cj0)*(x356)))+(((sj1)*(x355))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x379)))+(((x355)*(x357)))+(((IkReal(0.190000000000000))*(x370)))+(((IkReal(-1.00000000000000))*(pz)*(x364)))+(((x357)*(x372)))+(((IkReal(-1.00000000000000))*(px)*(x378))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj1)*(x355)))+(((IkReal(-1.00000000000000))*(sj1)*(x364)))+(((IkReal(-1.00000000000000))*(cj1)*(x372))));
evalcond[7]=((((r02)*(x376)))+(((IkReal(-1.00000000000000))*(pz)*(x355)))+(((IkReal(0.190000000000000))*(cj0)*(x356)))+(x381)+(((IkReal(-1.00000000000000))*(x371)*(x378)))+(((IkReal(-1.00000000000000))*(r02)*(x357)))+(((IkReal(0.190000000000000))*(sj1)*(x355))));
evalcond[8]=((IkReal(0.0855242900000000))+(((IkReal(-1.00000000000000))*(r02)*(x358)*(x361)))+(((IkReal(-1.00000000000000))*(x373)*(x384)))+(((IkReal(-1.00000000000000))*(x362)*(x369)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x367)))+(((r01)*(x363)))+(((py)*(x354)*(x355)))+(((x362)*(x382)))+(((IkReal(-1.00000000000000))*(cj0)*(x366)*(x368)))+(x350)+(((IkReal(-0.0361000000000000))*(x362)))+(((py)*(r00)*(x367)))+(((pz)*(r02)*(sj0)*(x354)))+(((x358)*(x380)))+(((sj0)*(x356)*(x368)))+(((IkReal(-1.00000000000000))*(r00)*(x354)*(x358)))+(((IkReal(-1.00000000000000))*(x359)*(x380)))+(((IkReal(0.0361000000000000))*(x373))));
evalcond[9]=((((pz)*(x354)*(x356)))+(((cj1)*(x355)*(x384)))+(((x361)*(x365)*(x374)))+(((IkReal(-1.00000000000000))*(r02)*(x368)))+(((IkReal(-1.00000000000000))*(x360)*(x364)))+(((py)*(x361)*(x366)))+(((x370)*(x385)))+(((x355)*(x377)))+(((x372)*(x377)))+(((IkReal(-0.380000000000000))*(x379)))+(((cj1)*(x372)*(x382)))+(((IkReal(-1.00000000000000))*(x363)*(x383)))+(((x354)*(x371)*(x374)))+(((x354)*(x362)*(x375)))+(((cj1)*(r01)*(x354)*(x358)))+(((IkReal(-1.00000000000000))*(cj1)*(x355)*(x369)))+(((IkReal(0.0361000000000000))*(x370)))+(((IkReal(-0.380000000000000))*(px)*(r00))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x368)*(x372)))+(((r01)*(x361)*(x375)))+(((IkReal(0.0361000000000000))*(sj1)*(x355)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x364)))+(((IkReal(-1.00000000000000))*(x361)*(x365)*(x370)))+(((IkReal(-1.00000000000000))*(x354)*(x370)*(x371)))+(((IkReal(-1.00000000000000))*(x355)*(x368)))+(((x355)*(x360)))+(((x374)*(x385)))+(((IkReal(-1.00000000000000))*(x354)*(x358)*(x366)))+(((IkReal(-0.0361000000000000))*(x374)))+(((x356)*(x363)))+(((IkReal(-1.00000000000000))*(cj0)*(x356)*(x382)))+(((IkReal(-1.00000000000000))*(sj1)*(x355)*(x384)))+(((IkReal(0.380000000000000))*(r02)*(x376)))+(((IkReal(-1.00000000000000))*(x354)*(x356)*(x365)))+(((cj1)*(pz)*(r00)*(x354)))+(((IkReal(0.380000000000000))*(x381)))+(((IkReal(0.0361000000000000))*(cj0)*(x356))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((IkReal(-1932100.00000000))+(((IkReal(-6620329.00000000))*((sj3)*(sj3))))+(((IkReal(-6620329.00000000))*((cj3)*(cj3))))+(((IkReal(-7152940.00000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.70215827338129))*(cj3)))+(((IkReal(-3.42649397029139))*((sj3)*(sj3))))+(((IkReal(-3.42649397029139))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((IkReal(-1932100.00000000))+(((IkReal(-6620329.00000000))*((sj3)*(sj3))))+(((IkReal(-6620329.00000000))*((cj3)*(cj3))))+(((IkReal(-7152940.00000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.70215827338129))*(cj3)))+(((IkReal(-3.42649397029139))*((sj3)*(sj3))))+(((IkReal(-3.42649397029139))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x386=((px)*(sj1));
IkReal x387=((cj0)*(cj1));
IkReal x388=((px)*(r02));
IkReal x389=((IkReal(13900000.0000000))*(r01));
IkReal x390=((IkReal(25730000.0000000))*(cj3));
IkReal x391=((pz)*(sj1));
IkReal x392=((IkReal(25730000.0000000))*(sj3));
IkReal x393=((cj1)*(sj0));
IkReal x394=((pz)*(r00));
IkReal x395=((py)*(r02));
IkReal x396=((r01)*(x392));
IkReal x397=((py)*(r00)*(sj1));
IkReal x398=((x392)*(x393));
if( IKabs(((gconst6)*(((((IkReal(-13900000.0000000))*(x393)*(x394)))+(((IkReal(-13900000.0000000))*(x387)*(x395)))+(((IkReal(13900000.0000000))*(x388)*(x393)))+(((pz)*(r01)*(x387)*(x390)))+(((IkReal(-1.00000000000000))*(r01)*(x386)*(x390)))+(((IkReal(-1.00000000000000))*(x387)*(x390)*(x395)))+(((IkReal(-1.00000000000000))*(x391)*(x392)))+(((pz)*(x387)*(x389)))+(((IkReal(-1.00000000000000))*(px)*(x387)*(x392)))+(((IkReal(-1.00000000000000))*(py)*(x398)))+(((x388)*(x390)*(x393)))+(((IkReal(-1.00000000000000))*(x386)*(x389)))+(((IkReal(4888700.00000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x390)*(x393)*(x394)))+(((x390)*(x397)))+(((IkReal(13900000.0000000))*(x397))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((IkReal(2641000.00000000))+(((x387)*(x392)*(x395)))+(((x394)*(x398)))+(((IkReal(-13900000.0000000))*(px)*(x387)))+(((IkReal(-1.00000000000000))*(x388)*(x398)))+(((IkReal(-13900000.0000000))*(x391)))+(((IkReal(-13900000.0000000))*(py)*(x393)))+(((IkReal(-1.00000000000000))*(pz)*(x387)*(x396)))+(((IkReal(-1.00000000000000))*(px)*(x387)*(x390)))+(((IkReal(-1.00000000000000))*(py)*(x390)*(x393)))+(((IkReal(-1.00000000000000))*(x390)*(x391)))+(((IkReal(4888700.00000000))*(cj3)))+(((x386)*(x396)))+(((IkReal(-1.00000000000000))*(x392)*(x397))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst6)*(((((IkReal(-13900000.0000000))*(x393)*(x394)))+(((IkReal(-13900000.0000000))*(x387)*(x395)))+(((IkReal(13900000.0000000))*(x388)*(x393)))+(((pz)*(r01)*(x387)*(x390)))+(((IkReal(-1.00000000000000))*(r01)*(x386)*(x390)))+(((IkReal(-1.00000000000000))*(x387)*(x390)*(x395)))+(((IkReal(-1.00000000000000))*(x391)*(x392)))+(((pz)*(x387)*(x389)))+(((IkReal(-1.00000000000000))*(px)*(x387)*(x392)))+(((IkReal(-1.00000000000000))*(py)*(x398)))+(((x388)*(x390)*(x393)))+(((IkReal(-1.00000000000000))*(x386)*(x389)))+(((IkReal(4888700.00000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x390)*(x393)*(x394)))+(((x390)*(x397)))+(((IkReal(13900000.0000000))*(x397)))))), ((gconst6)*(((IkReal(2641000.00000000))+(((x387)*(x392)*(x395)))+(((x394)*(x398)))+(((IkReal(-13900000.0000000))*(px)*(x387)))+(((IkReal(-1.00000000000000))*(x388)*(x398)))+(((IkReal(-13900000.0000000))*(x391)))+(((IkReal(-13900000.0000000))*(py)*(x393)))+(((IkReal(-1.00000000000000))*(pz)*(x387)*(x396)))+(((IkReal(-1.00000000000000))*(px)*(x387)*(x390)))+(((IkReal(-1.00000000000000))*(py)*(x390)*(x393)))+(((IkReal(-1.00000000000000))*(x390)*(x391)))+(((IkReal(4888700.00000000))*(cj3)))+(((x386)*(x396)))+(((IkReal(-1.00000000000000))*(x392)*(x397)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x399=IKsin(j2);
IkReal x400=IKcos(j2);
IkReal x401=((IkReal(0.257300000000000))*(sj3));
IkReal x402=((px)*(sj1));
IkReal x403=((IkReal(0.257300000000000))*(cj3));
IkReal x404=((py)*(sj1));
IkReal x405=((IkReal(1.00000000000000))*(r00));
IkReal x406=((cj1)*(sj0));
IkReal x407=((IkReal(1.00000000000000))*(px));
IkReal x408=((IkReal(1.00000000000000))*(pz));
IkReal x409=((cj0)*(r01));
IkReal x410=((pz)*(sj1));
IkReal x411=((cj0)*(cj1));
IkReal x412=((IkReal(0.139000000000000))*(x399));
IkReal x413=((IkReal(0.139000000000000))*(x400));
IkReal x414=((x400)*(x401));
IkReal x415=((x399)*(x403));
IkReal x416=((x399)*(x401));
IkReal x417=((x400)*(x403));
IkReal x418=((x412)+(x415));
IkReal x419=((x413)+(x416)+(x417));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj1)*(x408)))+(((sj0)*(x404)))+(((cj0)*(x402)))+(x418)+(((IkReal(-1.00000000000000))*(x414))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(py)*(x406)))+(x419)+(((IkReal(-1.00000000000000))*(x407)*(x411)))+(((IkReal(-1.00000000000000))*(sj1)*(x408))));
evalcond[2]=((((py)*(r02)*(x411)))+(((IkReal(-1.00000000000000))*(r02)*(x406)*(x407)))+(((pz)*(r00)*(x406)))+(((r01)*(x402)))+(x414)+(((IkReal(-1.00000000000000))*(cj1)*(x408)*(x409)))+(((IkReal(-1.00000000000000))*(x404)*(x405)))+(((IkReal(-1.00000000000000))*(x418))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(r02)*(x404)))+(((x409)*(x410)))+(((r02)*(sj0)*(x402)))+(x419)+(((IkReal(-0.190000000000000))*(x409)))+(((IkReal(-1.00000000000000))*(sj0)*(x405)*(x410)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x405))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x420=((IkReal(25730000.0000000))*(cj1));
IkReal x421=((cj3)*(pz));
IkReal x422=((py)*(sj0));
IkReal x423=((IkReal(25730000.0000000))*(sj1));
IkReal x424=((pz)*(sj3));
IkReal x425=((cj0)*(px));
IkReal x426=((IkReal(13900000.0000000))*(cj1));
IkReal x427=((IkReal(13900000.0000000))*(sj1));
IkReal x428=((sj1)*(x425));
if( IKabs(((gconst5)*(((((x425)*(x427)))+(((IkReal(-1.00000000000000))*(x420)*(x421)))+(((IkReal(-1.00000000000000))*(sj3)*(x420)*(x425)))+(((IkReal(-1.00000000000000))*(sj3)*(x420)*(x422)))+(((IkReal(4888700.00000000))*(sj3)))+(((cj3)*(x423)*(x425)))+(((IkReal(-1.00000000000000))*(x423)*(x424)))+(((IkReal(-1.00000000000000))*(pz)*(x426)))+(((cj3)*(x422)*(x423)))+(((x422)*(x427))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((IkReal(2641000.00000000))+(((IkReal(-1.00000000000000))*(x422)*(x426)))+(((x420)*(x424)))+(((IkReal(-1.00000000000000))*(x421)*(x423)))+(((IkReal(-1.00000000000000))*(x425)*(x426)))+(((IkReal(-1.00000000000000))*(cj3)*(x420)*(x425)))+(((IkReal(-1.00000000000000))*(cj3)*(x420)*(x422)))+(((IkReal(-1.00000000000000))*(pz)*(x427)))+(((IkReal(4888700.00000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj3)*(x422)*(x423)))+(((IkReal(-1.00000000000000))*(sj3)*(x423)*(x425))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst5)*(((((x425)*(x427)))+(((IkReal(-1.00000000000000))*(x420)*(x421)))+(((IkReal(-1.00000000000000))*(sj3)*(x420)*(x425)))+(((IkReal(-1.00000000000000))*(sj3)*(x420)*(x422)))+(((IkReal(4888700.00000000))*(sj3)))+(((cj3)*(x423)*(x425)))+(((IkReal(-1.00000000000000))*(x423)*(x424)))+(((IkReal(-1.00000000000000))*(pz)*(x426)))+(((cj3)*(x422)*(x423)))+(((x422)*(x427)))))), ((gconst5)*(((IkReal(2641000.00000000))+(((IkReal(-1.00000000000000))*(x422)*(x426)))+(((x420)*(x424)))+(((IkReal(-1.00000000000000))*(x421)*(x423)))+(((IkReal(-1.00000000000000))*(x425)*(x426)))+(((IkReal(-1.00000000000000))*(cj3)*(x420)*(x425)))+(((IkReal(-1.00000000000000))*(cj3)*(x420)*(x422)))+(((IkReal(-1.00000000000000))*(pz)*(x427)))+(((IkReal(4888700.00000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj3)*(x422)*(x423)))+(((IkReal(-1.00000000000000))*(sj3)*(x423)*(x425)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x429=IKsin(j2);
IkReal x430=IKcos(j2);
IkReal x431=((IkReal(0.257300000000000))*(sj3));
IkReal x432=((px)*(sj1));
IkReal x433=((IkReal(0.257300000000000))*(cj3));
IkReal x434=((py)*(sj1));
IkReal x435=((IkReal(1.00000000000000))*(r00));
IkReal x436=((cj1)*(sj0));
IkReal x437=((IkReal(1.00000000000000))*(px));
IkReal x438=((IkReal(1.00000000000000))*(pz));
IkReal x439=((cj0)*(r01));
IkReal x440=((pz)*(sj1));
IkReal x441=((cj0)*(cj1));
IkReal x442=((IkReal(0.139000000000000))*(x429));
IkReal x443=((IkReal(0.139000000000000))*(x430));
IkReal x444=((x430)*(x431));
IkReal x445=((x429)*(x433));
IkReal x446=((x429)*(x431));
IkReal x447=((x430)*(x433));
IkReal x448=((x445)+(x442));
IkReal x449=((x447)+(x446)+(x443));
evalcond[0]=((((sj0)*(x434)))+(((IkReal(-1.00000000000000))*(x444)))+(((IkReal(-1.00000000000000))*(cj1)*(x438)))+(((cj0)*(x432)))+(x448));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x438)))+(((IkReal(-1.00000000000000))*(x437)*(x441)))+(((IkReal(-1.00000000000000))*(py)*(x436)))+(x449));
evalcond[2]=((((IkReal(-1.00000000000000))*(x448)))+(((IkReal(-1.00000000000000))*(x434)*(x435)))+(((pz)*(r00)*(x436)))+(x444)+(((IkReal(-1.00000000000000))*(cj1)*(x438)*(x439)))+(((r01)*(x432)))+(((py)*(r02)*(x441)))+(((IkReal(-1.00000000000000))*(r02)*(x436)*(x437))));
evalcond[3]=((((x439)*(x440)))+(((IkReal(-1.00000000000000))*(sj0)*(x435)*(x440)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x435)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x434)))+(x449)+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-0.190000000000000))*(x439)))+(((cj1)*(px)*(r01)))+(((r02)*(sj0)*(x432))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x450=((IkReal(10000.0000000000))*(cj4));
IkReal x451=((cj1)*(sj3));
IkReal x452=((IkReal(2573.00000000000))*(r01));
IkReal x453=((sj1)*(sj3));
IkReal x454=((IkReal(2573.00000000000))*(r02));
IkReal x455=((cj0)*(px));
IkReal x456=((IkReal(1390.00000000000))*(sj1));
IkReal x457=((cj0)*(r00));
IkReal x458=((cj1)*(cj3));
IkReal x459=((cj3)*(sj1));
IkReal x460=((sj0)*(x459));
if( IKabs(((gconst2)*(((((pz)*(x450)*(x458)))+(((IkReal(-1.00000000000000))*(py)*(x450)*(x460)))+(((IkReal(-1.00000000000000))*(x450)*(x455)*(x459)))+(((x451)*(x454)))+(((IkReal(-2573.00000000000))*(x453)*(x457)))+(((IkReal(-1.00000000000000))*(sj0)*(x452)*(x453))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(pz)*(x450)*(x451)))+(((x454)*(x458)))+(((IkReal(-2573.00000000000))*(x457)*(x459)))+(((IkReal(-1.00000000000000))*(x456)*(x457)))+(((IkReal(1390.00000000000))*(cj1)*(r02)))+(((py)*(sj0)*(x450)*(x453)))+(((IkReal(-1.00000000000000))*(x452)*(x460)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x456)))+(((x450)*(x453)*(x455))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst2)*(((((pz)*(x450)*(x458)))+(((IkReal(-1.00000000000000))*(py)*(x450)*(x460)))+(((IkReal(-1.00000000000000))*(x450)*(x455)*(x459)))+(((x451)*(x454)))+(((IkReal(-2573.00000000000))*(x453)*(x457)))+(((IkReal(-1.00000000000000))*(sj0)*(x452)*(x453)))))), ((gconst2)*(((((IkReal(-1.00000000000000))*(pz)*(x450)*(x451)))+(((x454)*(x458)))+(((IkReal(-2573.00000000000))*(x457)*(x459)))+(((IkReal(-1.00000000000000))*(x456)*(x457)))+(((IkReal(1390.00000000000))*(cj1)*(r02)))+(((py)*(sj0)*(x450)*(x453)))+(((IkReal(-1.00000000000000))*(x452)*(x460)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x456)))+(((x450)*(x453)*(x455)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x461=IKsin(j2);
IkReal x462=IKcos(j2);
IkReal x463=(pz)*(pz);
IkReal x464=(py)*(py);
IkReal x465=(px)*(px);
IkReal x466=((px)*(sj1));
IkReal x467=((r01)*(sj0));
IkReal x468=((IkReal(0.380000000000000))*(pz));
IkReal x469=((IkReal(1.00000000000000))*(sj1));
IkReal x470=((py)*(r00));
IkReal x471=((pp)*(sj1));
IkReal x472=((IkReal(2.00000000000000))*(cj0));
IkReal x473=((py)*(r01));
IkReal x474=((IkReal(2.00000000000000))*(sj0));
IkReal x475=((pz)*(r02));
IkReal x476=((pz)*(sj1));
IkReal x477=((cj1)*(r00));
IkReal x478=((pz)*(sj0));
IkReal x479=((IkReal(1.00000000000000))*(cj0));
IkReal x480=((cj1)*(pz));
IkReal x481=((cj0)*(r01));
IkReal x482=((IkReal(0.0361000000000000))*(cj0));
IkReal x483=((IkReal(0.0361000000000000))*(sj1));
IkReal x484=((py)*(r02));
IkReal x485=((IkReal(2.00000000000000))*(cj1));
IkReal x486=((r00)*(sj1));
IkReal x487=((cj1)*(px));
IkReal x488=((cj0)*(r00));
IkReal x489=((cj1)*(r02));
IkReal x490=((py)*(sj0));
IkReal x491=((IkReal(1.00000000000000))*(cj1));
IkReal x492=((IkReal(2.00000000000000))*(sj1));
IkReal x493=((IkReal(2.00000000000000))*(pz));
IkReal x494=((IkReal(0.380000000000000))*(px));
IkReal x495=((r02)*(sj0));
IkReal x496=((IkReal(0.257300000000000))*(x462));
IkReal x497=((IkReal(1.00000000000000))*(pp)*(r02));
IkReal x498=((cj3)*(x461));
IkReal x499=((cj4)*(x462));
IkReal x500=((IkReal(0.139000000000000))*(x461));
IkReal x501=((IkReal(0.139000000000000))*(x462));
IkReal x502=((r02)*(x463));
IkReal x503=((cj4)*(sj3)*(x461));
IkReal x504=((IkReal(0.257300000000000))*(sj3)*(x461));
IkReal x505=((py)*(x474)*(x475));
evalcond[0]=((((cj0)*(x486)))+(((IkReal(-1.00000000000000))*(x489)))+(x503)+(((sj1)*(x467)))+(((cj3)*(x499))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj3)*(x496)))+(((IkReal(0.257300000000000))*(x498)))+(((IkReal(-1.00000000000000))*(x480)))+(((sj1)*(x490)))+(((cj0)*(x466)))+(x500));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj4)*(x498)))+(((IkReal(-1.00000000000000))*(x477)*(x479)))+(((IkReal(-1.00000000000000))*(x467)*(x491)))+(((sj3)*(x499)))+(((IkReal(-1.00000000000000))*(r02)*(x469))));
evalcond[3]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(x490)*(x491)))+(((IkReal(-1.00000000000000))*(pz)*(x469)))+(x501)+(x504)+(((IkReal(-1.00000000000000))*(x479)*(x487)))+(((cj3)*(x496))));
evalcond[4]=((((IkReal(0.257300000000000))*(sj4)*(x498)))+(((IkReal(-1.00000000000000))*(x469)*(x470)))+(((IkReal(-1.00000000000000))*(x487)*(x495)))+(((cj0)*(cj1)*(x484)))+(((IkReal(-1.00000000000000))*(r01)*(x479)*(x480)))+(((x477)*(x478)))+(((sj4)*(x500)))+(((r01)*(x466)))+(((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x496))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x470)*(x491)))+(((x476)*(x481)))+(((IkReal(-1.00000000000000))*(sj4)*(x504)))+(((IkReal(-1.00000000000000))*(sj4)*(x501)))+(((IkReal(-1.00000000000000))*(r00)*(x469)*(x478)))+(((IkReal(-1.00000000000000))*(cj0)*(x469)*(x484)))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x496)))+(((IkReal(-0.190000000000000))*(x481)))+(((r01)*(x487)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((x466)*(x495))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r00)*(x494)))+(((IkReal(-1.00000000000000))*(pp)*(x477)*(x479)))+(((IkReal(2.00000000000000))*(x473)*(x476)))+(((x464)*(x467)*(x485)))+(((cj1)*(x505)))+(((x472)*(x473)*(x487)))+(((r02)*(x483)))+(((x472)*(x475)*(x487)))+(((IkReal(-0.0855242900000000))*(cj4)*(x498)))+(((x470)*(x474)*(x487)))+(((IkReal(0.0468822900000000))*(sj3)*(x499)))+(((IkReal(-1.00000000000000))*(pp)*(r02)*(x469)))+(((x465)*(x472)*(x477)))+(((x492)*(x502)))+(((IkReal(-1.00000000000000))*(r02)*(x468)))+(((IkReal(-1.00000000000000))*(pp)*(x467)*(x491)))+(((IkReal(-0.380000000000000))*(x473)))+(((IkReal(-0.0715294000000000))*(cj4)*(x461)))+(((r00)*(x466)*(x493)))+(((IkReal(0.0361000000000000))*(cj1)*(x467)))+(((x477)*(x482))));
evalcond[7]=((((IkReal(-0.0361000000000000))*(x489)))+(((x471)*(x488)))+(((IkReal(2.00000000000000))*(x473)*(x480)))+(((IkReal(-1.00000000000000))*(sj1)*(x505)))+(((IkReal(-1.00000000000000))*(x465)*(x472)*(x486)))+(((cj0)*(r02)*(x494)))+(((x467)*(x483)))+(((IkReal(0.0468822900000000))*(x503)))+(((IkReal(0.0715294000000000))*(x499)))+(((IkReal(-1.00000000000000))*(pp)*(x489)))+(((IkReal(0.380000000000000))*(sj0)*(x484)))+(((x485)*(x502)))+(((x467)*(x471)))+(((IkReal(-1.00000000000000))*(x466)*(x472)*(x473)))+(((IkReal(-1.00000000000000))*(x466)*(x472)*(x475)))+(((px)*(x477)*(x493)))+(((IkReal(0.0855242900000000))*(cj3)*(x499)))+(((IkReal(-1.00000000000000))*(x466)*(x470)*(x474)))+(((IkReal(-1.00000000000000))*(x468)*(x488)))+(((x482)*(x486)))+(((IkReal(-1.00000000000000))*(x467)*(x468)))+(((IkReal(-1.00000000000000))*(x464)*(x467)*(x492))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x506=((cj0)*(r00));
IkReal x507=((cj1)*(sj3));
IkReal x508=((sj1)*(sj3));
IkReal x509=((IkReal(1.00000000000000))*(cj3));
IkReal x510=((r01)*(sj0));
IkReal x511=((x509)*(x510));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(x506)*(x508)))+(((IkReal(-1.00000000000000))*(cj1)*(x511)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x509)))+(((IkReal(-1.00000000000000))*(x508)*(x510)))+(((IkReal(-1.00000000000000))*(cj1)*(x506)*(x509)))+(((r02)*(x507))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((x507)*(x510)))+(((x506)*(x507)))+(((IkReal(-1.00000000000000))*(sj1)*(x511)))+(((cj1)*(cj3)*(r02)))+(((IkReal(-1.00000000000000))*(sj1)*(x506)*(x509)))+(((r02)*(x508))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(x506)*(x508)))+(((IkReal(-1.00000000000000))*(cj1)*(x511)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x509)))+(((IkReal(-1.00000000000000))*(x508)*(x510)))+(((IkReal(-1.00000000000000))*(cj1)*(x506)*(x509)))+(((r02)*(x507)))))), ((gconst1)*(((((x507)*(x510)))+(((x506)*(x507)))+(((IkReal(-1.00000000000000))*(sj1)*(x511)))+(((cj1)*(cj3)*(r02)))+(((IkReal(-1.00000000000000))*(sj1)*(x506)*(x509)))+(((r02)*(x508)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x512=IKsin(j2);
IkReal x513=IKcos(j2);
IkReal x514=(pz)*(pz);
IkReal x515=(py)*(py);
IkReal x516=(px)*(px);
IkReal x517=((px)*(sj1));
IkReal x518=((r01)*(sj0));
IkReal x519=((IkReal(0.380000000000000))*(pz));
IkReal x520=((IkReal(1.00000000000000))*(sj1));
IkReal x521=((py)*(r00));
IkReal x522=((pp)*(sj1));
IkReal x523=((IkReal(2.00000000000000))*(cj0));
IkReal x524=((py)*(r01));
IkReal x525=((IkReal(2.00000000000000))*(sj0));
IkReal x526=((pz)*(r02));
IkReal x527=((pz)*(sj1));
IkReal x528=((cj1)*(r00));
IkReal x529=((pz)*(sj0));
IkReal x530=((IkReal(1.00000000000000))*(cj0));
IkReal x531=((cj1)*(pz));
IkReal x532=((cj0)*(r01));
IkReal x533=((IkReal(0.0361000000000000))*(cj0));
IkReal x534=((IkReal(0.0361000000000000))*(sj1));
IkReal x535=((py)*(r02));
IkReal x536=((IkReal(2.00000000000000))*(cj1));
IkReal x537=((r00)*(sj1));
IkReal x538=((cj1)*(px));
IkReal x539=((cj0)*(r00));
IkReal x540=((cj1)*(r02));
IkReal x541=((py)*(sj0));
IkReal x542=((IkReal(1.00000000000000))*(cj1));
IkReal x543=((IkReal(2.00000000000000))*(sj1));
IkReal x544=((IkReal(2.00000000000000))*(pz));
IkReal x545=((IkReal(0.380000000000000))*(px));
IkReal x546=((r02)*(sj0));
IkReal x547=((IkReal(0.257300000000000))*(x513));
IkReal x548=((IkReal(1.00000000000000))*(pp)*(r02));
IkReal x549=((cj3)*(x512));
IkReal x550=((cj4)*(x513));
IkReal x551=((IkReal(0.139000000000000))*(x512));
IkReal x552=((IkReal(0.139000000000000))*(x513));
IkReal x553=((r02)*(x514));
IkReal x554=((cj4)*(sj3)*(x512));
IkReal x555=((IkReal(0.257300000000000))*(sj3)*(x512));
IkReal x556=((py)*(x525)*(x526));
evalcond[0]=((((IkReal(-1.00000000000000))*(x540)))+(((cj0)*(x537)))+(x554)+(((sj1)*(x518)))+(((cj3)*(x550))));
evalcond[1]=((((sj1)*(x541)))+(((IkReal(-1.00000000000000))*(sj3)*(x547)))+(((IkReal(0.257300000000000))*(x549)))+(((IkReal(-1.00000000000000))*(x531)))+(((cj0)*(x517)))+(x551));
evalcond[2]=((((IkReal(-1.00000000000000))*(x528)*(x530)))+(((sj3)*(x550)))+(((IkReal(-1.00000000000000))*(r02)*(x520)))+(((IkReal(-1.00000000000000))*(x518)*(x542)))+(((IkReal(-1.00000000000000))*(cj4)*(x549))));
evalcond[3]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(x541)*(x542)))+(((IkReal(-1.00000000000000))*(x530)*(x538)))+(x552)+(x555)+(((IkReal(-1.00000000000000))*(pz)*(x520)))+(((cj3)*(x547))));
evalcond[4]=((((r01)*(x517)))+(((sj4)*(x551)))+(((IkReal(-1.00000000000000))*(x538)*(x546)))+(((IkReal(-1.00000000000000))*(x520)*(x521)))+(((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x547)))+(((IkReal(-1.00000000000000))*(r01)*(x530)*(x531)))+(((cj0)*(cj1)*(x535)))+(((IkReal(0.257300000000000))*(sj4)*(x549)))+(((x528)*(x529))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x521)*(x542)))+(((IkReal(-1.00000000000000))*(sj4)*(x555)))+(((IkReal(-1.00000000000000))*(sj4)*(x552)))+(((x517)*(x546)))+(((IkReal(-1.00000000000000))*(cj0)*(x520)*(x535)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r00)*(x520)*(x529)))+(((IkReal(-0.190000000000000))*(x532)))+(((x527)*(x532)))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x547)))+(((r01)*(x538))));
evalcond[6]=((((x515)*(x518)*(x536)))+(((IkReal(0.0468822900000000))*(sj3)*(x550)))+(((x523)*(x524)*(x538)))+(((r02)*(x534)))+(((IkReal(2.00000000000000))*(x524)*(x527)))+(((x516)*(x523)*(x528)))+(((IkReal(-1.00000000000000))*(pp)*(x528)*(x530)))+(((IkReal(-0.0715294000000000))*(cj4)*(x512)))+(((IkReal(-1.00000000000000))*(r00)*(x545)))+(((x521)*(x525)*(x538)))+(((cj1)*(x556)))+(((r00)*(x517)*(x544)))+(((x523)*(x526)*(x538)))+(((IkReal(-1.00000000000000))*(pp)*(x518)*(x542)))+(((IkReal(-0.0855242900000000))*(cj4)*(x549)))+(((x543)*(x553)))+(((IkReal(0.0361000000000000))*(cj1)*(x518)))+(((IkReal(-1.00000000000000))*(r02)*(x519)))+(((x528)*(x533)))+(((IkReal(-1.00000000000000))*(pp)*(r02)*(x520)))+(((IkReal(-0.380000000000000))*(x524))));
evalcond[7]=((((x522)*(x539)))+(((px)*(x528)*(x544)))+(((IkReal(-1.00000000000000))*(pp)*(x540)))+(((cj0)*(r02)*(x545)))+(((IkReal(2.00000000000000))*(x524)*(x531)))+(((IkReal(0.0715294000000000))*(x550)))+(((IkReal(-1.00000000000000))*(x515)*(x518)*(x543)))+(((IkReal(-1.00000000000000))*(x517)*(x523)*(x526)))+(((IkReal(-1.00000000000000))*(x517)*(x523)*(x524)))+(((IkReal(-1.00000000000000))*(sj1)*(x556)))+(((x536)*(x553)))+(((x518)*(x534)))+(((IkReal(0.0468822900000000))*(x554)))+(((x518)*(x522)))+(((IkReal(0.380000000000000))*(sj0)*(x535)))+(((IkReal(-1.00000000000000))*(x518)*(x519)))+(((IkReal(-1.00000000000000))*(x516)*(x523)*(x537)))+(((IkReal(0.0855242900000000))*(cj3)*(x550)))+(((IkReal(-0.0361000000000000))*(x540)))+(((IkReal(-1.00000000000000))*(x517)*(x521)*(x525)))+(((x533)*(x537)))+(((IkReal(-1.00000000000000))*(x519)*(x539))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x557=((IkReal(1000.00000000000))*(r02));
IkReal x558=((IkReal(1000.00000000000))*(r00));
IkReal x559=((IkReal(1000.00000000000))*(r01));
IkReal x560=((IkReal(190.000000000000))*(sj1));
IkReal x561=((cj0)*(r00));
IkReal x562=((IkReal(190.000000000000))*(cj1));
IkReal x563=((IkReal(190.000000000000))*(r01)*(sj0));
if( IKabs(((gconst0)*(((((py)*(x559)))+(((pz)*(x557)))+(((px)*(x558)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x562)))+(((IkReal(-1.00000000000000))*(x561)*(x562)))+(((IkReal(-1.00000000000000))*(r02)*(x560))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-257.300000000000))*(cj4)))+(((r01)*(sj0)*(x560)))+(((IkReal(-1.00000000000000))*(pz)*(sj0)*(x559)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x558)))+(((py)*(sj0)*(x557)))+(((x560)*(x561)))+(((cj0)*(px)*(x557)))+(((IkReal(-1.00000000000000))*(r02)*(x562))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst0)*(((((py)*(x559)))+(((pz)*(x557)))+(((px)*(x558)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x562)))+(((IkReal(-1.00000000000000))*(x561)*(x562)))+(((IkReal(-1.00000000000000))*(r02)*(x560)))))), ((gconst0)*(((((IkReal(-257.300000000000))*(cj4)))+(((r01)*(sj0)*(x560)))+(((IkReal(-1.00000000000000))*(pz)*(sj0)*(x559)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x558)))+(((py)*(sj0)*(x557)))+(((x560)*(x561)))+(((cj0)*(px)*(x557)))+(((IkReal(-1.00000000000000))*(r02)*(x562)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x564=IKcos(j3);
IkReal x565=((r01)*(sj0));
IkReal x566=((IkReal(0.190000000000000))*(cj1));
IkReal x567=((cj0)*(py));
IkReal x568=((px)*(sj0));
IkReal x569=((py)*(sj0));
IkReal x570=((r00)*(sj0));
IkReal x571=((cj0)*(r01));
IkReal x572=((IkReal(1.00000000000000))*(pz));
IkReal x573=((IkReal(1.00000000000000))*(pp));
IkReal x574=((IkReal(0.380000000000000))*(cj1));
IkReal x575=((cj0)*(r00));
IkReal x576=((IkReal(0.190000000000000))*(sj1));
IkReal x577=((IkReal(0.139000000000000))*(cj4));
IkReal x578=((cj0)*(px));
IkReal x579=((IkReal(2.00000000000000))*(px)*(py));
IkReal x580=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x581=((IkReal(0.0715294000000000))*(x564));
IkReal x582=((IkReal(0.380000000000000))*(pz)*(sj1));
IkReal x583=((IkReal(2.00000000000000))*(pz)*(r02));
evalcond[0]=((IkReal(0.0494242900000000))+(((x574)*(x578)))+(((IkReal(-1.00000000000000))*(x573)))+(x581)+(x582)+(((x569)*(x574))));
evalcond[1]=((((x565)*(x566)))+(((IkReal(-1.00000000000000))*(px)*(r00)))+(((r02)*(x576)))+(((x577)*(IKsin(j3))))+(((x566)*(x575)))+(((IkReal(-1.00000000000000))*(py)*(r01)))+(((IkReal(-1.00000000000000))*(r02)*(x572))));
evalcond[2]=((((r02)*(x578)))+(((x575)*(x576)))+(((IkReal(-1.00000000000000))*(x565)*(x572)))+(((x565)*(x576)))+(((IkReal(-1.00000000000000))*(x564)*(x577)))+(((IkReal(-0.257300000000000))*(cj4)))+(((r02)*(x569)))+(((IkReal(-1.00000000000000))*(r02)*(x566)))+(((IkReal(-1.00000000000000))*(x572)*(x575))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj4)*(x581)))+(((IkReal(0.0361000000000000))*(x571)))+(((x567)*(x580)))+(((IkReal(-0.0361000000000000))*(x570)))+(((IkReal(-1.00000000000000))*(x570)*(x573)))+(((IkReal(-2.00000000000000))*(px)*(r00)*(x567)))+(((IkReal(-2.00000000000000))*(py)*(r01)*(x567)))+(((IkReal(-1.00000000000000))*(x568)*(x580)))+(((x565)*(x579)))+(((py)*(r00)*(x574)))+(((IkReal(-1.00000000000000))*(x571)*(x582)))+(((IkReal(-0.0855242900000000))*(sj4)))+(((x570)*(x582)))+(((x568)*(x583)))+(((IkReal(-1.00000000000000))*(x567)*(x583)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x574)))+(((pp)*(x571)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x568))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3))))));
dummyeval[0]=((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x584=((IkReal(2573.00000000000))*(cj4));
gconst2=IKsign(((((x584)*((cj3)*(cj3))))+(((IkReal(1390.00000000000))*(cj3)*(cj4)))+(((x584)*((sj3)*(sj3))))));
IkReal x585=((IkReal(1.85107913669065))*(cj4));
dummyeval[0]=((((cj3)*(cj4)))+(((x585)*((sj3)*(sj3))))+(((x585)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x586=((IkReal(0.0715294000000000))*(cj3));
IkReal x587=(py)*(py);
IkReal x588=(px)*(px);
IkReal x589=(pz)*(pz);
IkReal x590=((IkReal(2.00000000000000))*(px));
IkReal x591=((r01)*(sj0));
IkReal x592=((r00)*(sj1));
IkReal x593=((IkReal(0.190000000000000))*(cj1));
IkReal x594=((cj0)*(py));
IkReal x595=((px)*(sj0));
IkReal x596=((pp)*(sj1));
IkReal x597=((IkReal(2.00000000000000))*(pz));
IkReal x598=((r00)*(sj0));
IkReal x599=((cj0)*(pp));
IkReal x600=((IkReal(1.00000000000000))*(r02));
IkReal x601=((py)*(sj0));
IkReal x602=((r01)*(sj1));
IkReal x603=((IkReal(0.380000000000000))*(cj1));
IkReal x604=((IkReal(0.380000000000000))*(pz));
IkReal x605=((IkReal(1.00000000000000))*(pp));
IkReal x606=((r02)*(sj1));
IkReal x607=((cj0)*(pz));
IkReal x608=((cj0)*(r00));
IkReal x609=((cj0)*(r01));
IkReal x610=((cj1)*(r02));
IkReal x611=((cj1)*(py));
IkReal x612=((cj0)*(px));
IkReal x613=((IkReal(0.0361000000000000))*(cj1));
IkReal x614=((IkReal(1.00000000000000))*(r00));
IkReal x615=((py)*(r01));
IkReal x616=((IkReal(0.380000000000000))*(x606));
IkReal x617=((r02)*(x601));
IkReal x618=((IkReal(2.00000000000000))*(x588));
IkReal x619=((cj1)*(x614));
IkReal x620=((IkReal(2.00000000000000))*(x587));
IkReal x621=((IkReal(2.00000000000000))*(x589));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x595)))+(x594));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x598)))+(x609));
evalcond[3]=((IkReal(0.0494242900000000))+(((sj1)*(x604)))+(((x601)*(x603)))+(((x603)*(x612)))+(x586)+(((IkReal(-1.00000000000000))*(x605))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj1)*(x600)))+(((sj1)*(x591)))+(((cj0)*(x592))));
evalcond[5]=((((x593)*(x608)))+(((IkReal(-1.00000000000000))*(x615)))+(((IkReal(0.190000000000000))*(x606)))+(((x591)*(x593)))+(((IkReal(-1.00000000000000))*(pz)*(x600)))+(((IkReal(-1.00000000000000))*(px)*(x614))));
evalcond[6]=((((IkReal(-1.00000000000000))*(sj1)*(x600)))+(((IkReal(-1.00000000000000))*(cj1)*(x591)))+(((IkReal(-1.00000000000000))*(cj1)*(x608))));
evalcond[7]=((((IkReal(-1.00000000000000))*(pz)*(x591)))+(((IkReal(0.190000000000000))*(sj1)*(x591)))+(((IkReal(-1.00000000000000))*(x607)*(x614)))+(((r02)*(x612)))+(((IkReal(-1.00000000000000))*(r02)*(x593)))+(x617)+(((IkReal(0.190000000000000))*(cj0)*(x592))));
evalcond[8]=((IkReal(-0.0855242900000000))+(((IkReal(-1.00000000000000))*(x595)*(x616)))+(((pz)*(r02)*(sj0)*(x590)))+(((x598)*(x618)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x603)))+(((IkReal(-0.0361000000000000))*(x598)))+(((x594)*(x616)))+(((r01)*(x599)))+(((IkReal(-1.00000000000000))*(cj0)*(x602)*(x604)))+(((IkReal(-1.00000000000000))*(x598)*(x605)))+(((sj0)*(x592)*(x604)))+(((IkReal(-1.00000000000000))*(r00)*(x590)*(x594)))+(((IkReal(-1.00000000000000))*(r02)*(x594)*(x597)))+(((IkReal(-1.00000000000000))*(x609)*(x620)))+(((py)*(x590)*(x591)))+(((py)*(r00)*(x603)))+(((IkReal(-1.00000000000000))*(x586)))+(((IkReal(0.0361000000000000))*(x609))));
evalcond[9]=((((x608)*(x613)))+(((x591)*(x613)))+(((IkReal(-1.00000000000000))*(cj1)*(x591)*(x605)))+(((x597)*(x601)*(x610)))+(((IkReal(-1.00000000000000))*(x596)*(x600)))+(((IkReal(-1.00000000000000))*(x599)*(x619)))+(((cj1)*(x608)*(x618)))+(((py)*(x597)*(x602)))+(((cj1)*(r01)*(x590)*(x594)))+(((pz)*(x590)*(x592)))+(((x590)*(x607)*(x610)))+(((cj1)*(x591)*(x620)))+(((IkReal(-1.00000000000000))*(r02)*(x604)))+(((IkReal(-0.380000000000000))*(x615)))+(((x590)*(x598)*(x611)))+(((IkReal(0.0361000000000000))*(x606)))+(((x606)*(x621)))+(((IkReal(-0.380000000000000))*(px)*(r00))));
evalcond[10]=((((IkReal(0.0361000000000000))*(cj0)*(x592)))+(((IkReal(0.380000000000000))*(r02)*(x612)))+(((IkReal(-1.00000000000000))*(x604)*(x608)))+(((IkReal(-1.00000000000000))*(x597)*(x601)*(x606)))+(((IkReal(-1.00000000000000))*(sj1)*(x591)*(x620)))+(((IkReal(-1.00000000000000))*(x590)*(x594)*(x602)))+(((r01)*(x597)*(x611)))+(((IkReal(-1.00000000000000))*(x590)*(x592)*(x601)))+(((IkReal(-1.00000000000000))*(x591)*(x604)))+(((IkReal(0.380000000000000))*(x617)))+(((IkReal(0.0361000000000000))*(sj1)*(x591)))+(((IkReal(-1.00000000000000))*(cj0)*(x592)*(x618)))+(((x610)*(x621)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x600)))+(((cj1)*(pz)*(r00)*(x590)))+(((x591)*(x596)))+(((IkReal(-1.00000000000000))*(x590)*(x606)*(x607)))+(((IkReal(-0.0361000000000000))*(x610)))+(((x592)*(x599))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((IkReal(-1932100.00000000))+(((IkReal(-6620329.00000000))*((sj3)*(sj3))))+(((IkReal(-6620329.00000000))*((cj3)*(cj3))))+(((IkReal(-7152940.00000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.70215827338129))*(cj3)))+(((IkReal(-3.42649397029139))*((sj3)*(sj3))))+(((IkReal(-3.42649397029139))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((IkReal(-1932100.00000000))+(((IkReal(-6620329.00000000))*((sj3)*(sj3))))+(((IkReal(-6620329.00000000))*((cj3)*(cj3))))+(((IkReal(-7152940.00000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.70215827338129))*(cj3)))+(((IkReal(-3.42649397029139))*((sj3)*(sj3))))+(((IkReal(-3.42649397029139))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x622=((px)*(sj1));
IkReal x623=((cj0)*(cj1));
IkReal x624=((IkReal(13900000.0000000))*(r01));
IkReal x625=((cj1)*(sj0));
IkReal x626=((px)*(r02));
IkReal x627=((IkReal(13900000.0000000))*(pz));
IkReal x628=((IkReal(25730000.0000000))*(cj3));
IkReal x629=((pz)*(r00));
IkReal x630=((r00)*(sj1));
IkReal x631=((IkReal(13900000.0000000))*(py));
IkReal x632=((IkReal(25730000.0000000))*(sj3));
IkReal x633=((r01)*(x632));
IkReal x634=((py)*(x632));
IkReal x635=((IkReal(25730000.0000000))*(pz)*(sj1));
if( IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(x625)*(x626)*(x628)))+(((IkReal(-1.00000000000000))*(x630)*(x631)))+(((IkReal(-1.00000000000000))*(pz)*(r01)*(x623)*(x628)))+(((IkReal(-13900000.0000000))*(x625)*(x626)))+(((r02)*(x623)*(x631)))+(((IkReal(-1.00000000000000))*(pz)*(x623)*(x624)))+(((IkReal(-1.00000000000000))*(py)*(x628)*(x630)))+(((py)*(r02)*(x623)*(x628)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x632)))+(((IkReal(-1.00000000000000))*(px)*(x623)*(x632)))+(((IkReal(-1.00000000000000))*(x625)*(x634)))+(((IkReal(4888700.00000000))*(sj3)))+(((x625)*(x628)*(x629)))+(((x622)*(x624)))+(((r00)*(x625)*(x627)))+(((r01)*(x622)*(x628))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((IkReal(2641000.00000000))+(((IkReal(-13900000.0000000))*(px)*(x623)))+(((pz)*(x623)*(x633)))+(((IkReal(-1.00000000000000))*(x622)*(x633)))+(((IkReal(-1.00000000000000))*(x625)*(x629)*(x632)))+(((x625)*(x626)*(x632)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x628)))+(((IkReal(-1.00000000000000))*(r02)*(x623)*(x634)))+(((IkReal(-1.00000000000000))*(py)*(x625)*(x628)))+(((IkReal(-1.00000000000000))*(x625)*(x631)))+(((IkReal(-1.00000000000000))*(px)*(x623)*(x628)))+(((IkReal(-1.00000000000000))*(sj1)*(x627)))+(((x630)*(x634)))+(((IkReal(4888700.00000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst4)*(((((IkReal(-1.00000000000000))*(x625)*(x626)*(x628)))+(((IkReal(-1.00000000000000))*(x630)*(x631)))+(((IkReal(-1.00000000000000))*(pz)*(r01)*(x623)*(x628)))+(((IkReal(-13900000.0000000))*(x625)*(x626)))+(((r02)*(x623)*(x631)))+(((IkReal(-1.00000000000000))*(pz)*(x623)*(x624)))+(((IkReal(-1.00000000000000))*(py)*(x628)*(x630)))+(((py)*(r02)*(x623)*(x628)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x632)))+(((IkReal(-1.00000000000000))*(px)*(x623)*(x632)))+(((IkReal(-1.00000000000000))*(x625)*(x634)))+(((IkReal(4888700.00000000))*(sj3)))+(((x625)*(x628)*(x629)))+(((x622)*(x624)))+(((r00)*(x625)*(x627)))+(((r01)*(x622)*(x628)))))), ((gconst4)*(((IkReal(2641000.00000000))+(((IkReal(-13900000.0000000))*(px)*(x623)))+(((pz)*(x623)*(x633)))+(((IkReal(-1.00000000000000))*(x622)*(x633)))+(((IkReal(-1.00000000000000))*(x625)*(x629)*(x632)))+(((x625)*(x626)*(x632)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x628)))+(((IkReal(-1.00000000000000))*(r02)*(x623)*(x634)))+(((IkReal(-1.00000000000000))*(py)*(x625)*(x628)))+(((IkReal(-1.00000000000000))*(x625)*(x631)))+(((IkReal(-1.00000000000000))*(px)*(x623)*(x628)))+(((IkReal(-1.00000000000000))*(sj1)*(x627)))+(((x630)*(x634)))+(((IkReal(4888700.00000000))*(cj3)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x636=IKsin(j2);
IkReal x637=IKcos(j2);
IkReal x638=((IkReal(0.257300000000000))*(sj3));
IkReal x639=((px)*(sj1));
IkReal x640=((IkReal(0.257300000000000))*(cj3));
IkReal x641=((py)*(sj1));
IkReal x642=((IkReal(1.00000000000000))*(r00));
IkReal x643=((cj1)*(sj0));
IkReal x644=((IkReal(1.00000000000000))*(px));
IkReal x645=((IkReal(1.00000000000000))*(pz));
IkReal x646=((cj0)*(r01));
IkReal x647=((pz)*(sj1));
IkReal x648=((cj0)*(cj1));
IkReal x649=((IkReal(0.139000000000000))*(x636));
IkReal x650=((IkReal(0.139000000000000))*(x637));
IkReal x651=((x636)*(x640));
IkReal x652=((x637)*(x638));
IkReal x653=((x636)*(x638));
IkReal x654=((x637)*(x640));
IkReal x655=((x649)+(x651));
IkReal x656=((x650)+(x653)+(x654));
evalcond[0]=((((sj0)*(x641)))+(((IkReal(-1.00000000000000))*(cj1)*(x645)))+(((IkReal(-1.00000000000000))*(x652)))+(((cj0)*(x639)))+(x655));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(py)*(x643)))+(((IkReal(-1.00000000000000))*(sj1)*(x645)))+(((IkReal(-1.00000000000000))*(x644)*(x648)))+(x656));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x645)*(x646)))+(((IkReal(-1.00000000000000))*(x641)*(x642)))+(((IkReal(-1.00000000000000))*(x652)))+(((IkReal(-1.00000000000000))*(r02)*(x643)*(x644)))+(((r01)*(x639)))+(((pz)*(r00)*(x643)))+(x655)+(((py)*(r02)*(x648))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(r02)*(x641)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x642)))+(((IkReal(-1.00000000000000))*(sj0)*(x642)*(x647)))+(((IkReal(-1.00000000000000))*(x656)))+(((r02)*(sj0)*(x639)))+(((IkReal(-0.190000000000000))*(x646)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((cj1)*(px)*(r01)))+(((x646)*(x647))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x657=((IkReal(25730000.0000000))*(cj1));
IkReal x658=((cj3)*(pz));
IkReal x659=((py)*(sj0));
IkReal x660=((IkReal(25730000.0000000))*(sj1));
IkReal x661=((pz)*(sj3));
IkReal x662=((cj0)*(px));
IkReal x663=((IkReal(13900000.0000000))*(cj1));
IkReal x664=((IkReal(13900000.0000000))*(sj1));
IkReal x665=((sj1)*(x662));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(x657)*(x658)))+(((x662)*(x664)))+(((IkReal(-1.00000000000000))*(x660)*(x661)))+(((IkReal(-1.00000000000000))*(sj3)*(x657)*(x659)))+(((cj3)*(x660)*(x662)))+(((IkReal(-1.00000000000000))*(pz)*(x663)))+(((x659)*(x664)))+(((IkReal(4888700.00000000))*(sj3)))+(((cj3)*(x659)*(x660)))+(((IkReal(-1.00000000000000))*(sj3)*(x657)*(x662))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((IkReal(2641000.00000000))+(((IkReal(-1.00000000000000))*(cj3)*(x657)*(x659)))+(((IkReal(-1.00000000000000))*(x662)*(x663)))+(((IkReal(-1.00000000000000))*(x659)*(x663)))+(((x657)*(x661)))+(((IkReal(-1.00000000000000))*(x658)*(x660)))+(((IkReal(-1.00000000000000))*(sj3)*(x660)*(x662)))+(((IkReal(-1.00000000000000))*(pz)*(x664)))+(((IkReal(-1.00000000000000))*(sj3)*(x659)*(x660)))+(((IkReal(4888700.00000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x657)*(x662))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(x657)*(x658)))+(((x662)*(x664)))+(((IkReal(-1.00000000000000))*(x660)*(x661)))+(((IkReal(-1.00000000000000))*(sj3)*(x657)*(x659)))+(((cj3)*(x660)*(x662)))+(((IkReal(-1.00000000000000))*(pz)*(x663)))+(((x659)*(x664)))+(((IkReal(4888700.00000000))*(sj3)))+(((cj3)*(x659)*(x660)))+(((IkReal(-1.00000000000000))*(sj3)*(x657)*(x662)))))), ((gconst3)*(((IkReal(2641000.00000000))+(((IkReal(-1.00000000000000))*(cj3)*(x657)*(x659)))+(((IkReal(-1.00000000000000))*(x662)*(x663)))+(((IkReal(-1.00000000000000))*(x659)*(x663)))+(((x657)*(x661)))+(((IkReal(-1.00000000000000))*(x658)*(x660)))+(((IkReal(-1.00000000000000))*(sj3)*(x660)*(x662)))+(((IkReal(-1.00000000000000))*(pz)*(x664)))+(((IkReal(-1.00000000000000))*(sj3)*(x659)*(x660)))+(((IkReal(4888700.00000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x657)*(x662)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x666=IKsin(j2);
IkReal x667=IKcos(j2);
IkReal x668=((IkReal(0.257300000000000))*(sj3));
IkReal x669=((px)*(sj1));
IkReal x670=((IkReal(0.257300000000000))*(cj3));
IkReal x671=((py)*(sj1));
IkReal x672=((IkReal(1.00000000000000))*(r00));
IkReal x673=((cj1)*(sj0));
IkReal x674=((IkReal(1.00000000000000))*(px));
IkReal x675=((IkReal(1.00000000000000))*(pz));
IkReal x676=((cj0)*(r01));
IkReal x677=((pz)*(sj1));
IkReal x678=((cj0)*(cj1));
IkReal x679=((IkReal(0.139000000000000))*(x666));
IkReal x680=((IkReal(0.139000000000000))*(x667));
IkReal x681=((x666)*(x670));
IkReal x682=((x667)*(x668));
IkReal x683=((x666)*(x668));
IkReal x684=((x667)*(x670));
IkReal x685=((x679)+(x681));
IkReal x686=((x683)+(x680)+(x684));
evalcond[0]=((((cj0)*(x669)))+(((IkReal(-1.00000000000000))*(x682)))+(((IkReal(-1.00000000000000))*(cj1)*(x675)))+(x685)+(((sj0)*(x671))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(py)*(x673)))+(x686)+(((IkReal(-1.00000000000000))*(sj1)*(x675)))+(((IkReal(-1.00000000000000))*(x674)*(x678))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x673)*(x674)))+(((r01)*(x669)))+(((py)*(r02)*(x678)))+(((IkReal(-1.00000000000000))*(x682)))+(((pz)*(r00)*(x673)))+(((IkReal(-1.00000000000000))*(cj1)*(x675)*(x676)))+(x685)+(((IkReal(-1.00000000000000))*(x671)*(x672))));
evalcond[3]=((((r02)*(sj0)*(x669)))+(((IkReal(-0.190000000000000))*(x676)))+(((IkReal(-1.00000000000000))*(x686)))+(((x676)*(x677)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x671)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(sj0)*(x672)*(x677)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x672))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x687=((IkReal(0.0715294000000000))*(cj3));
IkReal x688=(py)*(py);
IkReal x689=(px)*(px);
IkReal x690=(pz)*(pz);
IkReal x691=((IkReal(2.00000000000000))*(px));
IkReal x692=((r01)*(sj0));
IkReal x693=((r00)*(sj1));
IkReal x694=((IkReal(0.190000000000000))*(cj1));
IkReal x695=((cj0)*(py));
IkReal x696=((px)*(sj0));
IkReal x697=((pp)*(sj1));
IkReal x698=((IkReal(2.00000000000000))*(pz));
IkReal x699=((r00)*(sj0));
IkReal x700=((cj0)*(pp));
IkReal x701=((IkReal(1.00000000000000))*(r02));
IkReal x702=((py)*(sj0));
IkReal x703=((r01)*(sj1));
IkReal x704=((IkReal(0.380000000000000))*(cj1));
IkReal x705=((IkReal(0.380000000000000))*(pz));
IkReal x706=((IkReal(1.00000000000000))*(pp));
IkReal x707=((r02)*(sj1));
IkReal x708=((cj0)*(pz));
IkReal x709=((cj0)*(r00));
IkReal x710=((cj0)*(r01));
IkReal x711=((cj1)*(r02));
IkReal x712=((cj1)*(py));
IkReal x713=((cj0)*(px));
IkReal x714=((IkReal(0.0361000000000000))*(cj1));
IkReal x715=((IkReal(1.00000000000000))*(r00));
IkReal x716=((py)*(r01));
IkReal x717=((IkReal(0.380000000000000))*(x707));
IkReal x718=((r02)*(x702));
IkReal x719=((IkReal(2.00000000000000))*(x689));
IkReal x720=((cj1)*(x715));
IkReal x721=((IkReal(2.00000000000000))*(x688));
IkReal x722=((IkReal(2.00000000000000))*(x690));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((x695)+(((IkReal(-1.00000000000000))*(x696))));
evalcond[2]=((IkReal(1.00000000000000))+(x710)+(((IkReal(-1.00000000000000))*(x699))));
evalcond[3]=((IkReal(0.0494242900000000))+(((x702)*(x704)))+(((IkReal(-1.00000000000000))*(x706)))+(x687)+(((sj1)*(x705)))+(((x704)*(x713))));
evalcond[4]=((((sj1)*(x692)))+(((IkReal(-1.00000000000000))*(cj1)*(x701)))+(((cj0)*(x693))));
evalcond[5]=((((IkReal(-1.00000000000000))*(pz)*(x701)))+(((IkReal(-1.00000000000000))*(x716)))+(((x694)*(x709)))+(((x692)*(x694)))+(((IkReal(0.190000000000000))*(x707)))+(((IkReal(-1.00000000000000))*(px)*(x715))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj1)*(x709)))+(((IkReal(-1.00000000000000))*(cj1)*(x692)))+(((IkReal(-1.00000000000000))*(sj1)*(x701))));
evalcond[7]=((((IkReal(-1.00000000000000))*(pz)*(x692)))+(((IkReal(0.190000000000000))*(cj0)*(x693)))+(((IkReal(0.190000000000000))*(sj1)*(x692)))+(((IkReal(-1.00000000000000))*(r02)*(x694)))+(((IkReal(-1.00000000000000))*(x708)*(x715)))+(x718)+(((r02)*(x713))));
evalcond[8]=((IkReal(0.0855242900000000))+(((IkReal(-1.00000000000000))*(cj0)*(x703)*(x705)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x704)))+(((IkReal(-1.00000000000000))*(x710)*(x721)))+(((IkReal(-1.00000000000000))*(r00)*(x691)*(x695)))+(((r01)*(x700)))+(((IkReal(-0.0361000000000000))*(x699)))+(((IkReal(-1.00000000000000))*(r02)*(x695)*(x698)))+(((py)*(x691)*(x692)))+(((x695)*(x717)))+(((pz)*(r02)*(sj0)*(x691)))+(((IkReal(-1.00000000000000))*(x699)*(x706)))+(((IkReal(-1.00000000000000))*(x696)*(x717)))+(x687)+(((py)*(r00)*(x704)))+(((x699)*(x719)))+(((IkReal(0.0361000000000000))*(x710)))+(((sj0)*(x693)*(x705))));
evalcond[9]=((((IkReal(-0.380000000000000))*(x716)))+(((cj1)*(x709)*(x719)))+(((IkReal(-1.00000000000000))*(r02)*(x705)))+(((IkReal(-1.00000000000000))*(x700)*(x720)))+(((x691)*(x699)*(x712)))+(((x707)*(x722)))+(((cj1)*(x692)*(x721)))+(((IkReal(-1.00000000000000))*(cj1)*(x692)*(x706)))+(((x692)*(x714)))+(((x709)*(x714)))+(((py)*(x698)*(x703)))+(((x691)*(x708)*(x711)))+(((pz)*(x691)*(x693)))+(((IkReal(-1.00000000000000))*(x697)*(x701)))+(((cj1)*(r01)*(x691)*(x695)))+(((x698)*(x702)*(x711)))+(((IkReal(0.0361000000000000))*(x707)))+(((IkReal(-0.380000000000000))*(px)*(r00))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x691)*(x695)*(x703)))+(((IkReal(-0.0361000000000000))*(x711)))+(((IkReal(-1.00000000000000))*(x691)*(x707)*(x708)))+(((IkReal(0.0361000000000000))*(cj0)*(x693)))+(((IkReal(0.0361000000000000))*(sj1)*(x692)))+(((IkReal(-1.00000000000000))*(cj0)*(x693)*(x719)))+(((IkReal(-1.00000000000000))*(x691)*(x693)*(x702)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x701)))+(((x711)*(x722)))+(((IkReal(-1.00000000000000))*(x692)*(x705)))+(((x692)*(x697)))+(((IkReal(-1.00000000000000))*(sj1)*(x692)*(x721)))+(((IkReal(-1.00000000000000))*(x705)*(x709)))+(((cj1)*(pz)*(r00)*(x691)))+(((r01)*(x698)*(x712)))+(((IkReal(0.380000000000000))*(r02)*(x713)))+(((IkReal(0.380000000000000))*(x718)))+(((x693)*(x700)))+(((IkReal(-1.00000000000000))*(x698)*(x702)*(x707))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((IkReal(-1932100.00000000))+(((IkReal(-6620329.00000000))*((sj3)*(sj3))))+(((IkReal(-6620329.00000000))*((cj3)*(cj3))))+(((IkReal(-7152940.00000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.70215827338129))*(cj3)))+(((IkReal(-3.42649397029139))*((sj3)*(sj3))))+(((IkReal(-3.42649397029139))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((IkReal(-1932100.00000000))+(((IkReal(-6620329.00000000))*((sj3)*(sj3))))+(((IkReal(-6620329.00000000))*((cj3)*(cj3))))+(((IkReal(-7152940.00000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.70215827338129))*(cj3)))+(((IkReal(-3.42649397029139))*((sj3)*(sj3))))+(((IkReal(-3.42649397029139))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x723=((px)*(sj1));
IkReal x724=((cj0)*(cj1));
IkReal x725=((px)*(r02));
IkReal x726=((IkReal(13900000.0000000))*(r01));
IkReal x727=((IkReal(25730000.0000000))*(cj3));
IkReal x728=((pz)*(sj1));
IkReal x729=((IkReal(25730000.0000000))*(sj3));
IkReal x730=((cj1)*(sj0));
IkReal x731=((pz)*(r00));
IkReal x732=((py)*(r02));
IkReal x733=((r01)*(x729));
IkReal x734=((py)*(r00)*(sj1));
IkReal x735=((x729)*(x730));
if( IKabs(((gconst6)*(((((x727)*(x734)))+(((IkReal(13900000.0000000))*(x725)*(x730)))+(((IkReal(-1.00000000000000))*(px)*(x724)*(x729)))+(((IkReal(-1.00000000000000))*(x723)*(x726)))+(((IkReal(-1.00000000000000))*(r01)*(x723)*(x727)))+(((IkReal(-1.00000000000000))*(x724)*(x727)*(x732)))+(((x725)*(x727)*(x730)))+(((pz)*(x724)*(x726)))+(((pz)*(r01)*(x724)*(x727)))+(((IkReal(-13900000.0000000))*(x724)*(x732)))+(((IkReal(-1.00000000000000))*(x727)*(x730)*(x731)))+(((IkReal(4888700.00000000))*(sj3)))+(((IkReal(13900000.0000000))*(x734)))+(((IkReal(-1.00000000000000))*(py)*(x735)))+(((IkReal(-13900000.0000000))*(x730)*(x731)))+(((IkReal(-1.00000000000000))*(x728)*(x729))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((IkReal(2641000.00000000))+(((IkReal(-1.00000000000000))*(x727)*(x728)))+(((x731)*(x735)))+(((IkReal(-13900000.0000000))*(px)*(x724)))+(((IkReal(-1.00000000000000))*(px)*(x724)*(x727)))+(((x723)*(x733)))+(((IkReal(-13900000.0000000))*(x728)))+(((IkReal(-1.00000000000000))*(x725)*(x735)))+(((IkReal(-1.00000000000000))*(py)*(x727)*(x730)))+(((x724)*(x729)*(x732)))+(((IkReal(-1.00000000000000))*(pz)*(x724)*(x733)))+(((IkReal(-13900000.0000000))*(py)*(x730)))+(((IkReal(4888700.00000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x729)*(x734))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst6)*(((((x727)*(x734)))+(((IkReal(13900000.0000000))*(x725)*(x730)))+(((IkReal(-1.00000000000000))*(px)*(x724)*(x729)))+(((IkReal(-1.00000000000000))*(x723)*(x726)))+(((IkReal(-1.00000000000000))*(r01)*(x723)*(x727)))+(((IkReal(-1.00000000000000))*(x724)*(x727)*(x732)))+(((x725)*(x727)*(x730)))+(((pz)*(x724)*(x726)))+(((pz)*(r01)*(x724)*(x727)))+(((IkReal(-13900000.0000000))*(x724)*(x732)))+(((IkReal(-1.00000000000000))*(x727)*(x730)*(x731)))+(((IkReal(4888700.00000000))*(sj3)))+(((IkReal(13900000.0000000))*(x734)))+(((IkReal(-1.00000000000000))*(py)*(x735)))+(((IkReal(-13900000.0000000))*(x730)*(x731)))+(((IkReal(-1.00000000000000))*(x728)*(x729)))))), ((gconst6)*(((IkReal(2641000.00000000))+(((IkReal(-1.00000000000000))*(x727)*(x728)))+(((x731)*(x735)))+(((IkReal(-13900000.0000000))*(px)*(x724)))+(((IkReal(-1.00000000000000))*(px)*(x724)*(x727)))+(((x723)*(x733)))+(((IkReal(-13900000.0000000))*(x728)))+(((IkReal(-1.00000000000000))*(x725)*(x735)))+(((IkReal(-1.00000000000000))*(py)*(x727)*(x730)))+(((x724)*(x729)*(x732)))+(((IkReal(-1.00000000000000))*(pz)*(x724)*(x733)))+(((IkReal(-13900000.0000000))*(py)*(x730)))+(((IkReal(4888700.00000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x729)*(x734)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x736=IKsin(j2);
IkReal x737=IKcos(j2);
IkReal x738=((IkReal(0.257300000000000))*(sj3));
IkReal x739=((px)*(sj1));
IkReal x740=((IkReal(0.257300000000000))*(cj3));
IkReal x741=((py)*(sj1));
IkReal x742=((IkReal(1.00000000000000))*(r00));
IkReal x743=((cj1)*(sj0));
IkReal x744=((IkReal(1.00000000000000))*(px));
IkReal x745=((IkReal(1.00000000000000))*(pz));
IkReal x746=((cj0)*(r01));
IkReal x747=((pz)*(sj1));
IkReal x748=((cj0)*(cj1));
IkReal x749=((IkReal(0.139000000000000))*(x736));
IkReal x750=((IkReal(0.139000000000000))*(x737));
IkReal x751=((x737)*(x738));
IkReal x752=((x736)*(x740));
IkReal x753=((x736)*(x738));
IkReal x754=((x737)*(x740));
IkReal x755=((x752)+(x749));
IkReal x756=((x754)+(x750)+(x753));
evalcond[0]=((((cj0)*(x739)))+(((sj0)*(x741)))+(x755)+(((IkReal(-1.00000000000000))*(cj1)*(x745)))+(((IkReal(-1.00000000000000))*(x751))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x745)))+(((IkReal(-1.00000000000000))*(py)*(x743)))+(((IkReal(-1.00000000000000))*(x744)*(x748)))+(x756));
evalcond[2]=((((py)*(r02)*(x748)))+(((IkReal(-1.00000000000000))*(cj1)*(x745)*(x746)))+(((pz)*(r00)*(x743)))+(((IkReal(-1.00000000000000))*(r02)*(x743)*(x744)))+(((r01)*(x739)))+(((IkReal(-1.00000000000000))*(x741)*(x742)))+(x751)+(((IkReal(-1.00000000000000))*(x755))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(r02)*(x741)))+(((IkReal(-0.190000000000000))*(x746)))+(((IkReal(-1.00000000000000))*(sj0)*(x742)*(x747)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x742)))+(((x746)*(x747)))+(((r02)*(sj0)*(x739)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(x756)+(((cj1)*(px)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x757=((IkReal(25730000.0000000))*(cj1));
IkReal x758=((cj3)*(pz));
IkReal x759=((py)*(sj0));
IkReal x760=((IkReal(25730000.0000000))*(sj1));
IkReal x761=((pz)*(sj3));
IkReal x762=((cj0)*(px));
IkReal x763=((IkReal(13900000.0000000))*(cj1));
IkReal x764=((IkReal(13900000.0000000))*(sj1));
IkReal x765=((sj1)*(x762));
if( IKabs(((gconst5)*(((((x759)*(x764)))+(((cj3)*(x760)*(x762)))+(((x762)*(x764)))+(((cj3)*(x759)*(x760)))+(((IkReal(4888700.00000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x760)*(x761)))+(((IkReal(-1.00000000000000))*(x757)*(x758)))+(((IkReal(-1.00000000000000))*(sj3)*(x757)*(x759)))+(((IkReal(-1.00000000000000))*(pz)*(x763)))+(((IkReal(-1.00000000000000))*(sj3)*(x757)*(x762))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((IkReal(2641000.00000000))+(((x757)*(x761)))+(((IkReal(-1.00000000000000))*(x758)*(x760)))+(((IkReal(-1.00000000000000))*(x762)*(x763)))+(((IkReal(-1.00000000000000))*(sj3)*(x759)*(x760)))+(((IkReal(-1.00000000000000))*(sj3)*(x760)*(x762)))+(((IkReal(-1.00000000000000))*(cj3)*(x757)*(x762)))+(((IkReal(-1.00000000000000))*(cj3)*(x757)*(x759)))+(((IkReal(4888700.00000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x759)*(x763)))+(((IkReal(-1.00000000000000))*(pz)*(x764))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst5)*(((((x759)*(x764)))+(((cj3)*(x760)*(x762)))+(((x762)*(x764)))+(((cj3)*(x759)*(x760)))+(((IkReal(4888700.00000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x760)*(x761)))+(((IkReal(-1.00000000000000))*(x757)*(x758)))+(((IkReal(-1.00000000000000))*(sj3)*(x757)*(x759)))+(((IkReal(-1.00000000000000))*(pz)*(x763)))+(((IkReal(-1.00000000000000))*(sj3)*(x757)*(x762)))))), ((gconst5)*(((IkReal(2641000.00000000))+(((x757)*(x761)))+(((IkReal(-1.00000000000000))*(x758)*(x760)))+(((IkReal(-1.00000000000000))*(x762)*(x763)))+(((IkReal(-1.00000000000000))*(sj3)*(x759)*(x760)))+(((IkReal(-1.00000000000000))*(sj3)*(x760)*(x762)))+(((IkReal(-1.00000000000000))*(cj3)*(x757)*(x762)))+(((IkReal(-1.00000000000000))*(cj3)*(x757)*(x759)))+(((IkReal(4888700.00000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x759)*(x763)))+(((IkReal(-1.00000000000000))*(pz)*(x764)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x766=IKsin(j2);
IkReal x767=IKcos(j2);
IkReal x768=((IkReal(0.257300000000000))*(sj3));
IkReal x769=((px)*(sj1));
IkReal x770=((IkReal(0.257300000000000))*(cj3));
IkReal x771=((py)*(sj1));
IkReal x772=((IkReal(1.00000000000000))*(r00));
IkReal x773=((cj1)*(sj0));
IkReal x774=((IkReal(1.00000000000000))*(px));
IkReal x775=((IkReal(1.00000000000000))*(pz));
IkReal x776=((cj0)*(r01));
IkReal x777=((pz)*(sj1));
IkReal x778=((cj0)*(cj1));
IkReal x779=((IkReal(0.139000000000000))*(x766));
IkReal x780=((IkReal(0.139000000000000))*(x767));
IkReal x781=((x767)*(x768));
IkReal x782=((x766)*(x770));
IkReal x783=((x766)*(x768));
IkReal x784=((x767)*(x770));
IkReal x785=((x779)+(x782));
IkReal x786=((x783)+(x780)+(x784));
evalcond[0]=((((IkReal(-1.00000000000000))*(x781)))+(((sj0)*(x771)))+(((cj0)*(x769)))+(x785)+(((IkReal(-1.00000000000000))*(cj1)*(x775))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(py)*(x773)))+(((IkReal(-1.00000000000000))*(x774)*(x778)))+(x786)+(((IkReal(-1.00000000000000))*(sj1)*(x775))));
evalcond[2]=((((py)*(r02)*(x778)))+(((IkReal(-1.00000000000000))*(x785)))+(((IkReal(-1.00000000000000))*(r02)*(x773)*(x774)))+(((pz)*(r00)*(x773)))+(((IkReal(-1.00000000000000))*(x771)*(x772)))+(((IkReal(-1.00000000000000))*(cj1)*(x775)*(x776)))+(x781)+(((r01)*(x769))));
evalcond[3]=((((x776)*(x777)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x771)))+(((IkReal(-0.190000000000000))*(x776)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x772)))+(((IkReal(-1.00000000000000))*(sj0)*(x772)*(x777)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(x786)+(((cj1)*(px)*(r01)))+(((r02)*(sj0)*(x769))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x787=((IkReal(10000.0000000000))*(cj4));
IkReal x788=((cj1)*(sj3));
IkReal x789=((IkReal(2573.00000000000))*(r01));
IkReal x790=((sj1)*(sj3));
IkReal x791=((IkReal(2573.00000000000))*(r02));
IkReal x792=((cj0)*(px));
IkReal x793=((IkReal(1390.00000000000))*(sj1));
IkReal x794=((cj0)*(r00));
IkReal x795=((cj1)*(cj3));
IkReal x796=((cj3)*(sj1));
IkReal x797=((sj0)*(x796));
if( IKabs(((gconst2)*(((((pz)*(x787)*(x795)))+(((x788)*(x791)))+(((IkReal(-2573.00000000000))*(x790)*(x794)))+(((IkReal(-1.00000000000000))*(py)*(x787)*(x797)))+(((IkReal(-1.00000000000000))*(sj0)*(x789)*(x790)))+(((IkReal(-1.00000000000000))*(x787)*(x792)*(x796))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-2573.00000000000))*(x794)*(x796)))+(((IkReal(-1.00000000000000))*(x793)*(x794)))+(((IkReal(1390.00000000000))*(cj1)*(r02)))+(((IkReal(-1.00000000000000))*(pz)*(x787)*(x788)))+(((x787)*(x790)*(x792)))+(((IkReal(-1.00000000000000))*(x789)*(x797)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x793)))+(((x791)*(x795)))+(((py)*(sj0)*(x787)*(x790))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst2)*(((((pz)*(x787)*(x795)))+(((x788)*(x791)))+(((IkReal(-2573.00000000000))*(x790)*(x794)))+(((IkReal(-1.00000000000000))*(py)*(x787)*(x797)))+(((IkReal(-1.00000000000000))*(sj0)*(x789)*(x790)))+(((IkReal(-1.00000000000000))*(x787)*(x792)*(x796)))))), ((gconst2)*(((((IkReal(-2573.00000000000))*(x794)*(x796)))+(((IkReal(-1.00000000000000))*(x793)*(x794)))+(((IkReal(1390.00000000000))*(cj1)*(r02)))+(((IkReal(-1.00000000000000))*(pz)*(x787)*(x788)))+(((x787)*(x790)*(x792)))+(((IkReal(-1.00000000000000))*(x789)*(x797)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x793)))+(((x791)*(x795)))+(((py)*(sj0)*(x787)*(x790)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x798=IKsin(j2);
IkReal x799=IKcos(j2);
IkReal x800=(pz)*(pz);
IkReal x801=(py)*(py);
IkReal x802=(px)*(px);
IkReal x803=((px)*(sj1));
IkReal x804=((r01)*(sj0));
IkReal x805=((IkReal(0.380000000000000))*(pz));
IkReal x806=((IkReal(1.00000000000000))*(sj1));
IkReal x807=((py)*(r00));
IkReal x808=((pp)*(sj1));
IkReal x809=((IkReal(2.00000000000000))*(cj0));
IkReal x810=((py)*(r01));
IkReal x811=((IkReal(2.00000000000000))*(sj0));
IkReal x812=((pz)*(r02));
IkReal x813=((pz)*(sj1));
IkReal x814=((cj1)*(r00));
IkReal x815=((pz)*(sj0));
IkReal x816=((IkReal(1.00000000000000))*(cj0));
IkReal x817=((cj1)*(pz));
IkReal x818=((cj0)*(r01));
IkReal x819=((IkReal(0.0361000000000000))*(cj0));
IkReal x820=((IkReal(0.0361000000000000))*(sj1));
IkReal x821=((py)*(r02));
IkReal x822=((IkReal(2.00000000000000))*(cj1));
IkReal x823=((r00)*(sj1));
IkReal x824=((cj1)*(px));
IkReal x825=((cj0)*(r00));
IkReal x826=((cj1)*(r02));
IkReal x827=((py)*(sj0));
IkReal x828=((IkReal(1.00000000000000))*(cj1));
IkReal x829=((IkReal(2.00000000000000))*(sj1));
IkReal x830=((IkReal(2.00000000000000))*(pz));
IkReal x831=((IkReal(0.380000000000000))*(px));
IkReal x832=((r02)*(sj0));
IkReal x833=((IkReal(0.257300000000000))*(x799));
IkReal x834=((IkReal(1.00000000000000))*(pp)*(r02));
IkReal x835=((cj3)*(x798));
IkReal x836=((cj4)*(x799));
IkReal x837=((IkReal(0.139000000000000))*(x798));
IkReal x838=((IkReal(0.139000000000000))*(x799));
IkReal x839=((r02)*(x800));
IkReal x840=((cj4)*(sj3)*(x798));
IkReal x841=((IkReal(0.257300000000000))*(sj3)*(x798));
IkReal x842=((py)*(x811)*(x812));
evalcond[0]=((((cj0)*(x823)))+(((IkReal(-1.00000000000000))*(x826)))+(((sj1)*(x804)))+(((cj3)*(x836)))+(x840));
evalcond[1]=((((IkReal(0.257300000000000))*(x835)))+(((sj1)*(x827)))+(((IkReal(-1.00000000000000))*(x817)))+(((cj0)*(x803)))+(x837)+(((IkReal(-1.00000000000000))*(sj3)*(x833))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj4)*(x835)))+(((IkReal(-1.00000000000000))*(r02)*(x806)))+(((IkReal(-1.00000000000000))*(x814)*(x816)))+(((sj3)*(x836)))+(((IkReal(-1.00000000000000))*(x804)*(x828))));
evalcond[3]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(x816)*(x824)))+(((IkReal(-1.00000000000000))*(x827)*(x828)))+(((cj3)*(x833)))+(x838)+(x841)+(((IkReal(-1.00000000000000))*(pz)*(x806))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x833)))+(((IkReal(0.257300000000000))*(sj4)*(x835)))+(((sj4)*(x837)))+(((IkReal(-1.00000000000000))*(x806)*(x807)))+(((x814)*(x815)))+(((r01)*(x803)))+(((cj0)*(cj1)*(x821)))+(((IkReal(-1.00000000000000))*(r01)*(x816)*(x817)))+(((IkReal(-1.00000000000000))*(x824)*(x832))));
evalcond[5]=((((x813)*(x818)))+(((IkReal(-1.00000000000000))*(cj0)*(x806)*(x821)))+(((r01)*(x824)))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x833)))+(((IkReal(-0.190000000000000))*(x818)))+(((x803)*(x832)))+(((IkReal(-1.00000000000000))*(sj4)*(x841)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(sj4)*(x838)))+(((IkReal(-1.00000000000000))*(r00)*(x806)*(x815)))+(((IkReal(-1.00000000000000))*(x807)*(x828))));
evalcond[6]=((((IkReal(-0.380000000000000))*(x810)))+(((cj1)*(x842)))+(((IkReal(-0.0715294000000000))*(cj4)*(x798)))+(((IkReal(0.0468822900000000))*(sj3)*(x836)))+(((x809)*(x812)*(x824)))+(((x801)*(x804)*(x822)))+(((IkReal(-1.00000000000000))*(r02)*(x805)))+(((IkReal(-1.00000000000000))*(pp)*(x814)*(x816)))+(((x814)*(x819)))+(((x829)*(x839)))+(((IkReal(2.00000000000000))*(x810)*(x813)))+(((IkReal(-1.00000000000000))*(pp)*(x804)*(x828)))+(((x807)*(x811)*(x824)))+(((x809)*(x810)*(x824)))+(((IkReal(-1.00000000000000))*(r00)*(x831)))+(((IkReal(0.0361000000000000))*(cj1)*(x804)))+(((x802)*(x809)*(x814)))+(((IkReal(-0.0855242900000000))*(cj4)*(x835)))+(((IkReal(-1.00000000000000))*(pp)*(r02)*(x806)))+(((r00)*(x803)*(x830)))+(((r02)*(x820))));
evalcond[7]=((((x804)*(x808)))+(((IkReal(-1.00000000000000))*(x802)*(x809)*(x823)))+(((IkReal(-1.00000000000000))*(x804)*(x805)))+(((px)*(x814)*(x830)))+(((x819)*(x823)))+(((IkReal(2.00000000000000))*(x810)*(x817)))+(((x808)*(x825)))+(((IkReal(-1.00000000000000))*(x801)*(x804)*(x829)))+(((x822)*(x839)))+(((IkReal(-0.0361000000000000))*(x826)))+(((IkReal(0.0468822900000000))*(x840)))+(((x804)*(x820)))+(((IkReal(-1.00000000000000))*(x803)*(x807)*(x811)))+(((cj0)*(r02)*(x831)))+(((IkReal(0.380000000000000))*(sj0)*(x821)))+(((IkReal(0.0855242900000000))*(cj3)*(x836)))+(((IkReal(-1.00000000000000))*(x803)*(x809)*(x810)))+(((IkReal(-1.00000000000000))*(x803)*(x809)*(x812)))+(((IkReal(-1.00000000000000))*(x805)*(x825)))+(((IkReal(-1.00000000000000))*(sj1)*(x842)))+(((IkReal(0.0715294000000000))*(x836)))+(((IkReal(-1.00000000000000))*(pp)*(x826))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x843=((cj0)*(r00));
IkReal x844=((cj1)*(sj3));
IkReal x845=((sj1)*(sj3));
IkReal x846=((IkReal(1.00000000000000))*(cj3));
IkReal x847=((r01)*(sj0));
IkReal x848=((x846)*(x847));
if( IKabs(((gconst1)*(((((r02)*(x844)))+(((IkReal(-1.00000000000000))*(x845)*(x847)))+(((IkReal(-1.00000000000000))*(x843)*(x845)))+(((IkReal(-1.00000000000000))*(cj1)*(x843)*(x846)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x846)))+(((IkReal(-1.00000000000000))*(cj1)*(x848))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((r02)*(x845)))+(((IkReal(-1.00000000000000))*(sj1)*(x843)*(x846)))+(((x843)*(x844)))+(((x844)*(x847)))+(((cj1)*(cj3)*(r02)))+(((IkReal(-1.00000000000000))*(sj1)*(x848))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst1)*(((((r02)*(x844)))+(((IkReal(-1.00000000000000))*(x845)*(x847)))+(((IkReal(-1.00000000000000))*(x843)*(x845)))+(((IkReal(-1.00000000000000))*(cj1)*(x843)*(x846)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x846)))+(((IkReal(-1.00000000000000))*(cj1)*(x848)))))), ((gconst1)*(((((r02)*(x845)))+(((IkReal(-1.00000000000000))*(sj1)*(x843)*(x846)))+(((x843)*(x844)))+(((x844)*(x847)))+(((cj1)*(cj3)*(r02)))+(((IkReal(-1.00000000000000))*(sj1)*(x848)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x849=IKsin(j2);
IkReal x850=IKcos(j2);
IkReal x851=(pz)*(pz);
IkReal x852=(py)*(py);
IkReal x853=(px)*(px);
IkReal x854=((px)*(sj1));
IkReal x855=((r01)*(sj0));
IkReal x856=((IkReal(0.380000000000000))*(pz));
IkReal x857=((IkReal(1.00000000000000))*(sj1));
IkReal x858=((py)*(r00));
IkReal x859=((pp)*(sj1));
IkReal x860=((IkReal(2.00000000000000))*(cj0));
IkReal x861=((py)*(r01));
IkReal x862=((IkReal(2.00000000000000))*(sj0));
IkReal x863=((pz)*(r02));
IkReal x864=((pz)*(sj1));
IkReal x865=((cj1)*(r00));
IkReal x866=((pz)*(sj0));
IkReal x867=((IkReal(1.00000000000000))*(cj0));
IkReal x868=((cj1)*(pz));
IkReal x869=((cj0)*(r01));
IkReal x870=((IkReal(0.0361000000000000))*(cj0));
IkReal x871=((IkReal(0.0361000000000000))*(sj1));
IkReal x872=((py)*(r02));
IkReal x873=((IkReal(2.00000000000000))*(cj1));
IkReal x874=((r00)*(sj1));
IkReal x875=((cj1)*(px));
IkReal x876=((cj0)*(r00));
IkReal x877=((cj1)*(r02));
IkReal x878=((py)*(sj0));
IkReal x879=((IkReal(1.00000000000000))*(cj1));
IkReal x880=((IkReal(2.00000000000000))*(sj1));
IkReal x881=((IkReal(2.00000000000000))*(pz));
IkReal x882=((IkReal(0.380000000000000))*(px));
IkReal x883=((r02)*(sj0));
IkReal x884=((IkReal(0.257300000000000))*(x850));
IkReal x885=((IkReal(1.00000000000000))*(pp)*(r02));
IkReal x886=((cj3)*(x849));
IkReal x887=((cj4)*(x850));
IkReal x888=((IkReal(0.139000000000000))*(x849));
IkReal x889=((IkReal(0.139000000000000))*(x850));
IkReal x890=((r02)*(x851));
IkReal x891=((cj4)*(sj3)*(x849));
IkReal x892=((IkReal(0.257300000000000))*(sj3)*(x849));
IkReal x893=((py)*(x862)*(x863));
evalcond[0]=((((cj3)*(x887)))+(((IkReal(-1.00000000000000))*(x877)))+(((sj1)*(x855)))+(x891)+(((cj0)*(x874))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x868)))+(((sj1)*(x878)))+(x888)+(((IkReal(-1.00000000000000))*(sj3)*(x884)))+(((cj0)*(x854)))+(((IkReal(0.257300000000000))*(x886))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x865)*(x867)))+(((IkReal(-1.00000000000000))*(r02)*(x857)))+(((sj3)*(x887)))+(((IkReal(-1.00000000000000))*(cj4)*(x886)))+(((IkReal(-1.00000000000000))*(x855)*(x879))));
evalcond[3]=((IkReal(0.190000000000000))+(((cj3)*(x884)))+(((IkReal(-1.00000000000000))*(pz)*(x857)))+(((IkReal(-1.00000000000000))*(x878)*(x879)))+(((IkReal(-1.00000000000000))*(x867)*(x875)))+(x889)+(x892));
evalcond[4]=((((sj4)*(x888)))+(((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x884)))+(((cj0)*(cj1)*(x872)))+(((IkReal(0.257300000000000))*(sj4)*(x886)))+(((IkReal(-1.00000000000000))*(x875)*(x883)))+(((IkReal(-1.00000000000000))*(r01)*(x867)*(x868)))+(((x865)*(x866)))+(((IkReal(-1.00000000000000))*(x857)*(x858)))+(((r01)*(x854))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj0)*(x857)*(x872)))+(((r01)*(x875)))+(((IkReal(-0.190000000000000))*(x869)))+(((IkReal(-1.00000000000000))*(sj4)*(x892)))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x884)))+(((x854)*(x883)))+(((IkReal(-1.00000000000000))*(sj4)*(x889)))+(((IkReal(-1.00000000000000))*(r00)*(x857)*(x866)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x858)*(x879)))+(((x864)*(x869))));
evalcond[6]=((((x860)*(x863)*(x875)))+(((x858)*(x862)*(x875)))+(((x880)*(x890)))+(((IkReal(0.0468822900000000))*(sj3)*(x887)))+(((IkReal(-1.00000000000000))*(pp)*(r02)*(x857)))+(((x860)*(x861)*(x875)))+(((IkReal(-0.380000000000000))*(x861)))+(((IkReal(-0.0715294000000000))*(cj4)*(x849)))+(((IkReal(2.00000000000000))*(x861)*(x864)))+(((IkReal(-1.00000000000000))*(pp)*(x855)*(x879)))+(((IkReal(0.0361000000000000))*(cj1)*(x855)))+(((IkReal(-1.00000000000000))*(r02)*(x856)))+(((r02)*(x871)))+(((x853)*(x860)*(x865)))+(((IkReal(-0.0855242900000000))*(cj4)*(x886)))+(((cj1)*(x893)))+(((IkReal(-1.00000000000000))*(r00)*(x882)))+(((IkReal(-1.00000000000000))*(pp)*(x865)*(x867)))+(((x865)*(x870)))+(((r00)*(x854)*(x881)))+(((x852)*(x855)*(x873))));
evalcond[7]=((((x873)*(x890)))+(((IkReal(0.0855242900000000))*(cj3)*(x887)))+(((x870)*(x874)))+(((x855)*(x859)))+(((x855)*(x871)))+(((IkReal(2.00000000000000))*(x861)*(x868)))+(((IkReal(-0.0361000000000000))*(x877)))+(((IkReal(0.0468822900000000))*(x891)))+(((IkReal(-1.00000000000000))*(x853)*(x860)*(x874)))+(((cj0)*(r02)*(x882)))+(((IkReal(-1.00000000000000))*(x856)*(x876)))+(((IkReal(0.0715294000000000))*(x887)))+(((x859)*(x876)))+(((IkReal(-1.00000000000000))*(x854)*(x860)*(x863)))+(((IkReal(-1.00000000000000))*(x854)*(x860)*(x861)))+(((IkReal(-1.00000000000000))*(pp)*(x877)))+(((IkReal(-1.00000000000000))*(x855)*(x856)))+(((px)*(x865)*(x881)))+(((IkReal(-1.00000000000000))*(x852)*(x855)*(x880)))+(((IkReal(-1.00000000000000))*(sj1)*(x893)))+(((IkReal(-1.00000000000000))*(x854)*(x858)*(x862)))+(((IkReal(0.380000000000000))*(sj0)*(x872))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - katana_450_6m180 (bae1cecb99d71daf88be6110125c2fe9)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
