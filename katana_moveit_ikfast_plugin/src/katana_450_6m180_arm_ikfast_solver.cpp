/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-07-06 11:03:26.675062
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[0]);
x6=IKsin(j[3]);
x7=IKcos(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((0.139)*x0);
x11=((0.2573)*x5);
x12=((1.0)*x7);
x13=((0.2573)*x0);
x14=((0.139)*x5);
x15=((1.0)*x6);
x16=((1.0)*x5);
x17=((1.0)*x0);
x18=((0.19)*x1);
x19=(x1*x2);
x20=(x1*x4);
x21=(x2*x3);
x22=(x3*x4);
IkReal x23=((1.0)*x22);
eetrans[0]=(((x0*x18))+((x6*((((x13*x21))+((x13*x20))))))+(((-1.0)*x10*x23))+((x10*x19))+((x7*(((((-1.0)*x13*x23))+((x13*x19)))))));
IkReal x24=((1.0)*x22);
eetrans[1]=(((x18*x5))+((x6*((((x11*x20))+((x11*x21))))))+((x7*((((x11*x19))+(((-1.0)*x11*x24))))))+((x14*x19))+(((-1.0)*x14*x24)));
eetrans[2]=((0.2015)+((x6*(((((0.2573)*x22))+(((-0.2573)*x19))))))+((x7*(((((0.2573)*x21))+(((0.2573)*x20))))))+(((0.19)*x3))+(((0.139)*x21))+(((0.139)*x20)));
eerot[0]=((((-1.0)*x16*x9))+(((-1.0)*x8*((((x12*((((x0*x20))+((x0*x21))))))+((x15*(((((-1.0)*x17*x19))+((x17*x22)))))))))));
eerot[1]=(((x0*x9))+(((-1.0)*x8*((((x12*((((x21*x5))+((x20*x5))))))+((x15*(((((-1.0)*x16*x19))+((x16*x22)))))))))));
eerot[2]=((-1.0)*x8*((((x12*(((((-1.0)*x19))+x22))))+((x15*(((((-1.0)*x21))+(((-1.0)*x20)))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.2015)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x26 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x26.valid){
continue;
}
IkReal x25=x26.value;
j0array[0]=((-1.0)*x25);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x25)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
op[0]=((((-9.88550282984996e-5)*(py*py)*(pz*pz)*(r01*r01)))+(((-4.88583958658325e-6)*cj0*py*pz*r00*r02*sj0))+(((-3.75649107534298e-5)*py*sj0*(px*px)*(r00*r00)))+(((-4.88583958658325e-6)*px*pz*r00*r02*(cj0*cj0)))+(((5.32941791536314e-7)*(px*px)*(r02*r02)))+(((3.75649107534298e-5)*cj0*pz*r00*r02*(py*py)))+(((-8.2032166262243e-6)*cj0*px*py*sj0*(r01*r01)))+(((-1.87824553767149e-5)*cj0*px*(pz*pz)*(r00*r00)))+(((-2.48692068043343e-6)*cj0*pz*r00*r02))+(((-9.88550282984996e-5)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-1.70180425252542e-7)*(r01*r01)*(sj0*sj0)))+(((-1.87824553767149e-5)*cj0*(px*px*px)*(r02*r02)))+(((4.94275141492498e-5)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-4.94275141492498e-5)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-1.55861115898262e-6)*cj0*px*(r00*r00)))+(((-1.70180425252542e-7)*(cj0*cj0)*(r00*r00)))+(((-3.75649107534298e-5)*cj0*px*py*pz*r01*r02))+(((-2.47137570746249e-5)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((4.94275141492498e-5)*(px*px)*(pz*pz)*(r02*r02)))+(((9.88550282984996e-5)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((9.88550282984996e-5)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((4.94275141492498e-5)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-9.88550282984996e-5)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((1.87824553767149e-5)*py*sj0*(px*px)*(r01*r01)))+(((9.88550282984996e-5)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-9.88550282984996e-5)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.000197710056596999)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-2.47137570746249e-5)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((9.88550282984996e-5)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((2.44291979329162e-6)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-9.88550282984996e-5)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((9.28309521450817e-7)*py*sj0*(r02*r02)))+(((-1.55861115898262e-6)*cj0*py*r00*r01))+(((-2.47137570746249e-5)*(py*py*py*py)*(r02*r02)))+(((3.75649107534298e-5)*pz*r01*r02*sj0*(px*px)))+(((1.87824553767149e-5)*r00*r01*sj0*(px*px*px)))+(((5.32941791536314e-7)*(py*py)*(r02*r02)))+(((-3.75649107534298e-5)*px*py*pz*r00*r02*sj0))+(((-9.88550282984996e-5)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-2.47137570746249e-5)*(pz*pz*pz*pz)*(r02*r02)))+(((-9.88550282984996e-5)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((9.88550282984996e-5)*px*pz*r00*r02*(py*py)))+(((-1.87824553767149e-5)*sj0*(py*py*py)*(r02*r02)))+(((-1.87824553767149e-5)*cj0*px*(pz*pz)*(r02*r02)))+(((-4.94275141492498e-5)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-2.47137570746249e-5)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-9.88550282984996e-5)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((2.44291979329162e-6)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.000197710056596999)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-7.13733304315167e-6)*px*py*r00*r01))+(((-4.10160831311215e-6)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-8.2032166262243e-6)*py*pz*r01*r02))+(((-1.87824553767149e-5)*py*sj0*(pz*pz)*(r01*r01)))+(((9.88550282984996e-5)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-8.2032166262243e-6)*px*pz*r00*r02))+(((4.94275141492498e-5)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-1.55861115898262e-6)*px*r00*r01*sj0))+(((9.88550282984996e-5)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((9.88550282984996e-5)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((9.88550282984996e-5)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-3.40360850505083e-7)*cj0*r00*r01*sj0))+(((-9.88550282984996e-5)*py*r01*r02*(pz*pz*pz)))+(((-2.47137570746249e-5)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-9.88550282984996e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((9.88550282984996e-5)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((-9.88550282984996e-5)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-4.88583958658325e-6)*cj0*px*pz*r01*r02*sj0))+(((9.88550282984996e-5)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-8.2032166262243e-6)*cj0*px*py*sj0*(r00*r00)))+(((-0.000197710056596999)*px*py*r00*r01*(pz*pz)))+(((-2.47137570746249e-5)*(px*px*px*px)*(r02*r02)))+(((-3.75649107534298e-5)*cj0*px*(py*py)*(r01*r01)))+(((-1.55861115898262e-6)*py*sj0*(r01*r01)))+(((-4.94275141492498e-5)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((-8.2032166262243e-6)*px*py*r00*r01*(cj0*cj0)))+(((-1.87824553767149e-5)*py*sj0*(pz*pz)*(r02*r02)))+(((9.88550282984996e-5)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-5.63473661301448e-5)*cj0*py*r00*r01*(px*px)))+(((-0.000197710056596999)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-0.000296565084895499)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((9.88550282984996e-5)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((6.60770393886347e-8)*(r02*r02)))+(((-8.2032166262243e-6)*px*py*r00*r01*(sj0*sj0)))+(((-1.87824553767149e-5)*cj0*px*(py*py)*(r02*r02)))+(((9.88550282984996e-5)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((9.88550282984996e-5)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((-5.63473661301448e-5)*px*r00*r01*sj0*(py*py)))+(((-3.31737703964105e-6)*cj0*px*py*sj0*(r02*r02)))+(((-9.88550282984996e-5)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((4.94275141492498e-5)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-1.87824553767149e-5)*sj0*(py*py*py)*(r01*r01)))+(((4.10160831311215e-6)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-1.87824553767149e-5)*py*sj0*(px*px)*(r02*r02)))+(((4.94275141492498e-5)*(py*py)*(pz*pz)*(r02*r02)))+(((-2.47137570746249e-5)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-1.87824553767149e-5)*px*r00*r01*sj0*(pz*pz)))+(((-4.88583958658325e-6)*py*pz*r01*r02*(sj0*sj0)))+(((4.88583958658325e-6)*cj0*r00*r01*sj0*(pz*pz)))+(((-3.56866652157583e-6)*(px*px)*(r00*r00)))+(((9.88550282984996e-5)*pz*r01*r02*(py*py*py)))+(((1.87824553767149e-5)*cj0*r00*r01*(py*py*py)))+(((9.88550282984996e-5)*py*pz*r01*r02*(px*px)))+(((1.87824553767149e-5)*cj0*px*(py*py)*(r00*r00)))+(((-4.10160831311215e-6)*(py*py)*(r01*r01)*(sj0*sj0)))+(((9.28309521450817e-7)*cj0*px*(r02*r02)))+(((4.94275141492498e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((-0.000296565084895499)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-4.94275141492498e-5)*(px*px)*(py*py)*(r02*r02)))+(((-9.88550282984996e-5)*(px*px)*(pz*pz)*(r00*r00)))+(((9.88550282984996e-5)*pz*r00*r02*(px*px*px)))+(((9.88550282984996e-5)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((-1.87824553767149e-5)*cj0*(px*px*px)*(r00*r00)))+(((-3.56866652157583e-6)*(py*py)*(r01*r01)))+(((4.10160831311215e-6)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-2.48692068043343e-6)*pz*r01*r02*sj0))+(((-0.000296565084895499)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-1.65868851982052e-6)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-1.65868851982052e-6)*(py*py)*(r02*r02)*(sj0*sj0)))+(((9.88550282984996e-5)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-9.88550282984996e-5)*px*r00*r02*(pz*pz*pz)))+(((-1.87824553767149e-5)*cj0*py*r00*r01*(pz*pz)))+(((-4.10160831311215e-6)*(pz*pz)*(r02*r02)))+(((-2.47137570746249e-5)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((4.94275141492498e-5)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0))));
op[1]=((((7.51298215068597e-5)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((3.75649107534298e-5)*(pz*pz*pz)*(r02*r02)))+(((3.11722231796523e-6)*pz*(r02*r02)))+(((7.51298215068597e-5)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((3.75649107534298e-5)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((1.42746660863033e-5)*cj0*px*pz*(r02*r02)))+(((1.42746660863033e-5)*py*pz*sj0*(r02*r02)))+(((0.00011269473226029)*cj0*px*r01*r02*sj0*(py*py)))+(((7.51298215068597e-5)*pz*(py*py)*(r01*r01)))+(((-3.75649107534298e-5)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.00011269473226029)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-3.75649107534298e-5)*pz*(py*py)*(r02*r02)))+(((3.75649107534298e-5)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-3.75649107534298e-5)*r00*r02*(px*px*px)))+(((-7.51298215068597e-5)*cj0*px*py*pz*sj0*(r00*r00)))+(((7.51298215068597e-5)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-1.42746660863033e-5)*cj0*r00*r02*(py*py)))+(((9.45029858564705e-7)*cj0*r00*r02))+(((-3.75649107534298e-5)*cj0*r01*r02*sj0*(px*px*px)))+(((-3.71323808580327e-6)*cj0*pz*r00*r01*sj0))+(((-1.85661904290163e-6)*pz*(r01*r01)*(sj0*sj0)))+(((7.51298215068597e-5)*pz*(px*px)*(r00*r00)))+(((1.85661904290163e-6)*px*r00*r02*(cj0*cj0)))+(((-7.51298215068597e-5)*px*py*pz*r00*r01*(cj0*cj0)))+(((-1.85661904290163e-6)*pz*(cj0*cj0)*(r00*r00)))+(((7.51298215068597e-5)*py*r01*r02*(cj0*cj0)*(px*px)))+(((1.85661904290163e-6)*py*r01*r02*(sj0*sj0)))+(((-7.51298215068597e-5)*cj0*px*py*pz*sj0*(r01*r01)))+(((0.00011269473226029)*py*r01*r02*(pz*pz)))+(((1.85661904290163e-6)*cj0*px*r01*r02*sj0))+(((0.00011269473226029)*px*r00*r02*(pz*pz)))+(((1.42746660863033e-5)*py*pz*sj0*(r01*r01)))+(((1.42746660863033e-5)*cj0*px*py*r01*r02))+(((-7.51298215068597e-5)*px*py*pz*r00*r01*(sj0*sj0)))+(((-3.75649107534298e-5)*cj0*r00*r02*sj0*(py*py*py)))+(((3.11722231796523e-6)*px*r00*r02))+(((-1.42746660863033e-5)*r01*r02*sj0*(px*px)))+(((-3.75649107534298e-5)*r01*r02*(py*py*py)))+(((0.00011269473226029)*cj0*py*r00*r02*sj0*(px*px)))+(((1.42746660863033e-5)*px*pz*r00*r01*sj0))+(((-3.75649107534298e-5)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((1.42746660863033e-5)*cj0*py*pz*r00*r01))+(((3.75649107534298e-5)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.00011269473226029)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.00011269473226029)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-3.75649107534298e-5)*px*r00*r02*(py*py)))+(((3.11722231796523e-6)*py*r01*r02))+(((1.42746660863033e-5)*px*py*r00*r02*sj0))+(((-3.75649107534298e-5)*px*r00*r02*(cj0*cj0)*(py*py)))+(((-0.00011269473226029)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((-3.75649107534298e-5)*pz*(px*px)*(r02*r02)))+(((3.75649107534298e-5)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((7.51298215068597e-5)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((9.45029858564705e-7)*r01*r02*sj0))+(((1.42746660863033e-5)*cj0*px*pz*(r00*r00)))+(((-3.75649107534298e-5)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((3.75649107534298e-5)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-3.75649107534298e-5)*py*r01*r02*(px*px)))+(((1.85661904290163e-6)*cj0*py*r00*r02*sj0))+(((0.000150259643013719)*px*py*pz*r00*r01))+(((0.000150259643013719)*cj0*px*py*pz*sj0*(r02*r02)))+(((3.75649107534298e-5)*pz*(cj0*cj0)*(py*py)*(r00*r00))));
op[2]=((((-6.07144946007904e-6)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-4.94275141492498e-5)*(pz*pz*pz*pz)*(r02*r02)))+(((-9.38882649972009e-6)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((1.20933801611924e-6)*cj0*r00*r01*sj0))+(((-7.13733304315167e-6)*(py*py)*(r01*r01)))+(((0.000197710056596999)*px*pz*r00*r02*(py*py)))+(((9.88550282984996e-5)*(py*py)*(pz*pz)*(r02*r02)))+(((-0.000197710056596999)*(py*py)*(pz*pz)*(r01*r01)))+(((-0.000197710056596999)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-4.94275141492498e-5)*(py*py*py*py)*(r02*r02)))+(((-0.000197710056596999)*(px*px)*(pz*pz)*(r00*r00)))+(((-8.12875779787435e-7)*(r02*r02)))+(((0.000197710056596999)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((0.000197710056596999)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((6.07144946007904e-6)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-4.94275141492498e-5)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.000593130169790997)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-0.000197710056596999)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-1.87776529994402e-5)*cj0*r00*r01*sj0*(pz*pz)))+(((6.07144946007904e-6)*(py*py)*(r01*r01)*(sj0*sj0)))+(((1.21428989201581e-5)*px*py*r00*r01*(cj0*cj0)))+(((-0.000395420113193998)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-0.000395420113193998)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-4.49557654250553e-5)*py*pz*r01*r02))+(((-0.000395420113193998)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-9.88550282984996e-5)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((1.87776529994402e-5)*cj0*px*pz*r01*r02*sj0))+(((-0.000593130169790997)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((1.87776529994402e-5)*cj0*py*pz*r00*r02*sj0))+(((9.88550282984996e-5)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-6.6347540792821e-6)*cj0*px*py*sj0*(r02*r02)))+(((-1.42746660863033e-5)*px*py*r00*r01))+(((0.000197710056596999)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((6.04669008059622e-7)*(r01*r01)*(sj0*sj0)))+(((-4.94275141492498e-5)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((9.88550282984996e-5)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.000197710056596999)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-7.13733304315167e-6)*(px*px)*(r00*r00)))+(((-0.000197710056596999)*py*r01*r02*(pz*pz*pz)))+(((-4.94275141492498e-5)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-4.49557654250553e-5)*px*pz*r00*r02))+(((0.000197710056596999)*pz*r00*r02*(px*px*px)))+(((0.000197710056596999)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((-0.000197710056596999)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((0.000197710056596999)*py*pz*r01*r02*(px*px)))+(((0.000197710056596999)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((1.87776529994402e-5)*px*pz*r00*r02*(cj0*cj0)))+(((-0.000197710056596999)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-0.000197710056596999)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-0.000197710056596999)*px*r00*r02*(pz*pz*pz)))+(((-0.000197710056596999)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((9.88550282984996e-5)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((1.87776529994402e-5)*py*pz*r01*r02*(sj0*sj0)))+(((-0.000197710056596999)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-9.88550282984996e-5)*(px*px)*(py*py)*(r02*r02)))+(((0.000197710056596999)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((0.000197710056596999)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((1.5340549669376e-5)*(px*px)*(r02*r02)))+(((0.000197710056596999)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((0.000197710056596999)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((9.88550282984996e-5)*cj0*r00*r01*sj0*(px*px*px*px)))+(((0.000197710056596999)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((1.21428989201581e-5)*cj0*px*py*sj0*(r01*r01)))+(((-3.31737703964105e-6)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-4.94275141492498e-5)*(px*px*px*px)*(r02*r02)))+(((-2.24778827125276e-5)*(pz*pz)*(r02*r02)))+(((0.000197710056596999)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-0.000197710056596999)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-4.94275141492498e-5)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-4.94275141492498e-5)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-9.88550282984996e-5)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((1.21428989201581e-5)*px*py*r00*r01*(sj0*sj0)))+(((-4.94275141492498e-5)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((6.04669008059622e-7)*(cj0*cj0)*(r00*r00)))+(((9.88550282984996e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((0.000197710056596999)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((9.88550282984996e-5)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-3.31737703964105e-6)*(py*py)*(r02*r02)*(sj0*sj0)))+(((-0.000197710056596999)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((1.5340549669376e-5)*(py*py)*(r02*r02)))+(((-6.07144946007904e-6)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-0.000593130169790997)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((1.21428989201581e-5)*cj0*px*py*sj0*(r00*r00)))+(((-9.38882649972009e-6)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((0.000197710056596999)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((0.000197710056596999)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-0.000197710056596999)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((0.000197710056596999)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-0.000395420113193998)*px*py*r00*r01*(pz*pz)))+(((-9.88550282984996e-5)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((0.000197710056596999)*pz*r01*r02*(py*py*py)))+(((9.88550282984996e-5)*(px*px)*(pz*pz)*(r02*r02))));
op[3]=((((-1.42746660863033e-5)*cj0*px*py*r01*r02))+(((7.51298215068597e-5)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((3.75649107534298e-5)*(pz*pz*pz)*(r02*r02)))+(((3.11722231796523e-6)*pz*(r02*r02)))+(((7.51298215068597e-5)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((3.75649107534298e-5)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-1.42746660863033e-5)*cj0*py*pz*r00*r01))+(((1.42746660863033e-5)*r01*r02*sj0*(px*px)))+(((0.00011269473226029)*cj0*px*r01*r02*sj0*(py*py)))+(((7.51298215068597e-5)*pz*(py*py)*(r01*r01)))+(((-3.75649107534298e-5)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.00011269473226029)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-3.75649107534298e-5)*pz*(py*py)*(r02*r02)))+(((3.75649107534298e-5)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-3.75649107534298e-5)*r00*r02*(px*px*px)))+(((-7.51298215068597e-5)*cj0*px*py*pz*sj0*(r00*r00)))+(((1.42746660863033e-5)*cj0*r00*r02*(py*py)))+(((7.51298215068597e-5)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-1.42746660863033e-5)*py*pz*sj0*(r01*r01)))+(((-3.75649107534298e-5)*cj0*r01*r02*sj0*(px*px*px)))+(((-3.71323808580327e-6)*cj0*pz*r00*r01*sj0))+(((-1.42746660863033e-5)*cj0*px*pz*(r02*r02)))+(((-1.85661904290163e-6)*pz*(r01*r01)*(sj0*sj0)))+(((-1.42746660863033e-5)*px*py*r00*r02*sj0))+(((7.51298215068597e-5)*pz*(px*px)*(r00*r00)))+(((1.85661904290163e-6)*px*r00*r02*(cj0*cj0)))+(((-7.51298215068597e-5)*px*py*pz*r00*r01*(cj0*cj0)))+(((-1.85661904290163e-6)*pz*(cj0*cj0)*(r00*r00)))+(((7.51298215068597e-5)*py*r01*r02*(cj0*cj0)*(px*px)))+(((1.85661904290163e-6)*py*r01*r02*(sj0*sj0)))+(((-7.51298215068597e-5)*cj0*px*py*pz*sj0*(r01*r01)))+(((0.00011269473226029)*py*r01*r02*(pz*pz)))+(((-1.42746660863033e-5)*px*pz*r00*r01*sj0))+(((1.85661904290163e-6)*cj0*px*r01*r02*sj0))+(((0.00011269473226029)*px*r00*r02*(pz*pz)))+(((-9.45029858564705e-7)*r01*r02*sj0))+(((-7.51298215068597e-5)*px*py*pz*r00*r01*(sj0*sj0)))+(((-3.75649107534298e-5)*cj0*r00*r02*sj0*(py*py*py)))+(((-1.42746660863033e-5)*cj0*px*pz*(r00*r00)))+(((3.11722231796523e-6)*px*r00*r02))+(((-3.75649107534298e-5)*r01*r02*(py*py*py)))+(((-1.42746660863033e-5)*py*pz*sj0*(r02*r02)))+(((0.00011269473226029)*cj0*py*r00*r02*sj0*(px*px)))+(((-3.75649107534298e-5)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((3.75649107534298e-5)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-9.45029858564705e-7)*cj0*r00*r02))+(((-0.00011269473226029)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.00011269473226029)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-3.75649107534298e-5)*px*r00*r02*(py*py)))+(((3.11722231796523e-6)*py*r01*r02))+(((-3.75649107534298e-5)*px*r00*r02*(cj0*cj0)*(py*py)))+(((-0.00011269473226029)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((-3.75649107534298e-5)*pz*(px*px)*(r02*r02)))+(((3.75649107534298e-5)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((7.51298215068597e-5)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((-3.75649107534298e-5)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((3.75649107534298e-5)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-3.75649107534298e-5)*py*r01*r02*(px*px)))+(((1.85661904290163e-6)*cj0*py*r00*r02*sj0))+(((0.000150259643013719)*px*py*pz*r00*r01))+(((0.000150259643013719)*cj0*px*py*pz*sj0*(r02*r02)))+(((3.75649107534298e-5)*pz*(cj0*cj0)*(py*py)*(r00*r00))));
op[4]=((((-9.88550282984996e-5)*(py*py)*(pz*pz)*(r01*r01)))+(((3.75649107534298e-5)*cj0*px*(py*py)*(r01*r01)))+(((-4.88583958658325e-6)*cj0*py*pz*r00*r02*sj0))+(((5.63473661301448e-5)*px*r00*r01*sj0*(py*py)))+(((-4.88583958658325e-6)*px*pz*r00*r02*(cj0*cj0)))+(((1.87824553767149e-5)*px*r00*r01*sj0*(pz*pz)))+(((5.32941791536314e-7)*(px*px)*(r02*r02)))+(((-8.2032166262243e-6)*cj0*px*py*sj0*(r01*r01)))+(((-1.87824553767149e-5)*r00*r01*sj0*(px*px*px)))+(((-3.75649107534298e-5)*pz*r01*r02*sj0*(px*px)))+(((-9.88550282984996e-5)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-1.70180425252542e-7)*(r01*r01)*(sj0*sj0)))+(((4.94275141492498e-5)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-4.94275141492498e-5)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((1.87824553767149e-5)*cj0*px*(pz*pz)*(r00*r00)))+(((-1.70180425252542e-7)*(cj0*cj0)*(r00*r00)))+(((1.87824553767149e-5)*cj0*px*(py*py)*(r02*r02)))+(((-2.47137570746249e-5)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((1.87824553767149e-5)*cj0*(px*px*px)*(r00*r00)))+(((4.94275141492498e-5)*(px*px)*(pz*pz)*(r02*r02)))+(((9.88550282984996e-5)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((9.88550282984996e-5)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((4.94275141492498e-5)*cj0*r00*r01*sj0*(py*py*py*py)))+(((1.55861115898262e-6)*cj0*py*r00*r01))+(((-9.88550282984996e-5)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((1.87824553767149e-5)*py*sj0*(pz*pz)*(r02*r02)))+(((9.88550282984996e-5)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-9.88550282984996e-5)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.000197710056596999)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((1.87824553767149e-5)*cj0*(px*px*px)*(r02*r02)))+(((-2.47137570746249e-5)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((9.88550282984996e-5)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((2.44291979329162e-6)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-1.87824553767149e-5)*cj0*r00*r01*(py*py*py)))+(((-9.88550282984996e-5)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-2.47137570746249e-5)*(py*py*py*py)*(r02*r02)))+(((5.32941791536314e-7)*(py*py)*(r02*r02)))+(((-9.88550282984996e-5)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-2.47137570746249e-5)*(pz*pz*pz*pz)*(r02*r02)))+(((-9.88550282984996e-5)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((5.63473661301448e-5)*cj0*py*r00*r01*(px*px)))+(((9.88550282984996e-5)*px*pz*r00*r02*(py*py)))+(((3.75649107534298e-5)*py*sj0*(px*px)*(r00*r00)))+(((1.55861115898262e-6)*px*r00*r01*sj0))+(((-4.94275141492498e-5)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-2.47137570746249e-5)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-9.88550282984996e-5)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((2.44291979329162e-6)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.000197710056596999)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((2.48692068043343e-6)*pz*r01*r02*sj0))+(((-7.13733304315167e-6)*px*py*r00*r01))+(((-9.28309521450817e-7)*cj0*px*(r02*r02)))+(((-4.10160831311215e-6)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-8.2032166262243e-6)*py*pz*r01*r02))+(((1.87824553767149e-5)*sj0*(py*py*py)*(r01*r01)))+(((1.87824553767149e-5)*sj0*(py*py*py)*(r02*r02)))+(((9.88550282984996e-5)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-8.2032166262243e-6)*px*pz*r00*r02))+(((4.94275141492498e-5)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((9.88550282984996e-5)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((9.88550282984996e-5)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((9.88550282984996e-5)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-3.40360850505083e-7)*cj0*r00*r01*sj0))+(((-9.88550282984996e-5)*py*r01*r02*(pz*pz*pz)))+(((-2.47137570746249e-5)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-9.88550282984996e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((9.88550282984996e-5)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((-9.88550282984996e-5)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-4.88583958658325e-6)*cj0*px*pz*r01*r02*sj0))+(((9.88550282984996e-5)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-8.2032166262243e-6)*cj0*px*py*sj0*(r00*r00)))+(((-0.000197710056596999)*px*py*r00*r01*(pz*pz)))+(((1.55861115898262e-6)*cj0*px*(r00*r00)))+(((-2.47137570746249e-5)*(px*px*px*px)*(r02*r02)))+(((-4.94275141492498e-5)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((-8.2032166262243e-6)*px*py*r00*r01*(cj0*cj0)))+(((9.88550282984996e-5)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-1.87824553767149e-5)*cj0*px*(py*py)*(r00*r00)))+(((-0.000197710056596999)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-0.000296565084895499)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((1.87824553767149e-5)*cj0*py*r00*r01*(pz*pz)))+(((1.87824553767149e-5)*cj0*px*(pz*pz)*(r02*r02)))+(((9.88550282984996e-5)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((6.60770393886347e-8)*(r02*r02)))+(((-8.2032166262243e-6)*px*py*r00*r01*(sj0*sj0)))+(((1.87824553767149e-5)*py*sj0*(px*px)*(r02*r02)))+(((9.88550282984996e-5)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((9.88550282984996e-5)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((1.55861115898262e-6)*py*sj0*(r01*r01)))+(((-3.31737703964105e-6)*cj0*px*py*sj0*(r02*r02)))+(((-9.88550282984996e-5)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((4.94275141492498e-5)*cj0*r00*r01*sj0*(px*px*px*px)))+(((4.10160831311215e-6)*(px*px)*(r01*r01)*(sj0*sj0)))+(((4.94275141492498e-5)*(py*py)*(pz*pz)*(r02*r02)))+(((-2.47137570746249e-5)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-4.88583958658325e-6)*py*pz*r01*r02*(sj0*sj0)))+(((4.88583958658325e-6)*cj0*r00*r01*sj0*(pz*pz)))+(((-3.56866652157583e-6)*(px*px)*(r00*r00)))+(((9.88550282984996e-5)*pz*r01*r02*(py*py*py)))+(((2.48692068043343e-6)*cj0*pz*r00*r02))+(((9.88550282984996e-5)*py*pz*r01*r02*(px*px)))+(((3.75649107534298e-5)*px*py*pz*r00*r02*sj0))+(((-4.10160831311215e-6)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-3.75649107534298e-5)*cj0*pz*r00*r02*(py*py)))+(((4.94275141492498e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((-0.000296565084895499)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-4.94275141492498e-5)*(px*px)*(py*py)*(r02*r02)))+(((-9.88550282984996e-5)*(px*px)*(pz*pz)*(r00*r00)))+(((-1.87824553767149e-5)*py*sj0*(px*px)*(r01*r01)))+(((9.88550282984996e-5)*pz*r00*r02*(px*px*px)))+(((-9.28309521450817e-7)*py*sj0*(r02*r02)))+(((1.87824553767149e-5)*py*sj0*(pz*pz)*(r01*r01)))+(((9.88550282984996e-5)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((-3.56866652157583e-6)*(py*py)*(r01*r01)))+(((4.10160831311215e-6)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.000296565084895499)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-1.65868851982052e-6)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-1.65868851982052e-6)*(py*py)*(r02*r02)*(sj0*sj0)))+(((9.88550282984996e-5)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-9.88550282984996e-5)*px*r00*r02*(pz*pz*pz)))+(((3.75649107534298e-5)*cj0*px*py*pz*r01*r02))+(((-4.10160831311215e-6)*(pz*pz)*(r02*r02)))+(((-2.47137570746249e-5)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((4.94275141492498e-5)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((((-1.0)*r00*sj0))+((cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
bool bgotonextstatement = true;
do
{
IkReal x27=px*px;
IkReal x28=py*py;
IkReal x29=pz*pz;
IkReal x30=(r01*sj0);
IkReal x31=((0.19)*cj1);
IkReal x32=(cj0*r00);
IkReal x33=((1.0)*cj1);
IkReal x34=((2.0)*pz);
IkReal x35=((1.0)*pz);
IkReal x36=((0.38)*pz);
IkReal x37=(py*r01);
IkReal x38=(px*sj0);
IkReal x39=((0.0361)*cj1);
IkReal x40=((0.0361)*sj1);
IkReal x41=((2.0)*sj1);
IkReal x42=(py*r00);
IkReal x43=((0.19)*sj1);
IkReal x44=(cj0*px);
IkReal x45=((2.0)*cj1);
IkReal x46=(px*r00);
IkReal x47=(sj1*x29);
IkReal x48=(py*r02*sj0);
IkReal x49=(r02*x44);
IkReal x50=((1.0)*sj1*x28);
IkReal x51=((1.0)*sj1*x27);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x38))+((cj0*py)));
evalcond[2]=((-1.0)+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[3]=((((-1.0)*r02*x33))+((sj1*x30))+((sj1*x32)));
evalcond[4]=((((-1.0)*x37))+(((-1.0)*x46))+(((-1.0)*r02*x35))+((r02*x43))+((x30*x31))+((x31*x32)));
evalcond[5]=((((-1.0)*x30*x33))+(((-1.0)*x32*x33))+(((-1.0)*r02*sj1)));
evalcond[6]=((((-1.0)*r02*x31))+(((-1.0)*x30*x35))+(((-1.0)*x32*x35))+x48+x49+((x30*x43))+((x32*x43)));
evalcond[7]=((((-1.0)*r02*x36))+((sj1*x34*x46))+((x37*x44*x45))+((sj1*x34*x37))+(((-1.0)*r02*x51))+(((-1.0)*r02*x50))+(((-1.0)*x28*x32*x33))+(((-1.0)*x29*x30*x33))+(((-0.38)*x46))+(((-1.0)*x27*x30*x33))+(((-0.38)*x37))+(((-1.0)*x29*x32*x33))+((r02*x47))+((r02*x40))+((x38*x42*x45))+((x30*x39))+((cj1*x34*x49))+((cj1*x34*x48))+((x32*x39))+((cj1*x27*x32))+((cj1*x28*x30)));
evalcond[8]=((((-1.0)*r02*x27*x33))+(((-1.0)*x37*x41*x44))+(((-1.0)*r02*x39))+(((-1.0)*x30*x36))+(((-1.0)*x32*x51))+(((-1.0)*x32*x36))+(((-1.0)*x30*x50))+(((0.38)*x49))+(((0.38)*x48))+(((-1.0)*sj1*x34*x48))+(((-1.0)*sj1*x34*x49))+(((-1.0)*r02*x28*x33))+((cj1*x34*x37))+((x30*x47))+((x30*x40))+((cj1*x34*x46))+((x32*x47))+((x32*x40))+((cj1*r02*x29))+((sj1*x27*x30))+(((-1.0)*x38*x41*x42))+((sj1*x28*x32)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x52=((5.31250087376659)*cj1);
cj3array[0]=((-0.690964694237614)+(((-1.0)*cj0*px*x52))+(((-1.0)*py*sj0*x52))+(((13.9802654572805)*(px*px)))+(((13.9802654572805)*(py*py)))+(((-5.31250087376659)*pz*sj1))+(((13.9802654572805)*(pz*pz))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x53=px*px;
IkReal x54=pz*pz;
IkReal x55=py*py;
IkReal x56=(px*sj0);
IkReal x57=((2.0)*py);
IkReal x58=(r00*sj0);
IkReal x59=(cj0*r01);
IkReal x60=(pz*r02);
IkReal x61=((0.38)*cj1);
IkReal x62=((0.38)*r02*sj1);
IkReal x63=((0.38)*pz*sj1);
IkReal x64=((1.0)*x55);
evalcond[0]=((-0.08552429)+(((-1.0)*x56*x62))+(((-1.0)*cj0*px*r00*x57))+(((-1.0)*px*r01*x61))+(((0.0361)*x59))+((x58*x63))+((cj0*py*x62))+(((-1.0)*cj0*x57*x60))+(((-1.0)*x59*x64))+(((-1.0)*x59*x63))+((r01*x56*x57))+(((-1.0)*x58*x64))+((x53*x59))+((x53*x58))+(((-1.0)*x54*x58))+(((-0.0361)*x58))+(((-0.0715294)*(IKcos(j3))))+((py*r00*x61))+(((2.0)*x56*x60))+((x54*x59)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.19565227724544)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-8552429.0)+(((-7152940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x65=((25730000.0)*cj1);
IkReal x66=(cj3*pz);
IkReal x67=(py*sj0);
IkReal x68=((25730000.0)*sj1);
IkReal x69=(pz*sj3);
IkReal x70=(cj0*px);
IkReal x71=((13900000.0)*cj1);
IkReal x72=((13900000.0)*sj1);
IkReal x73=(sj1*x70);
CheckValue<IkReal> x74=IKPowWithIntegerCheck(IKsign(((-8552429.0)+(((-7152940.0)*cj3)))),-1);
if(!x74.valid){
continue;
}
CheckValue<IkReal> x75 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x65*x67))+((cj3*x67*x68))+((cj3*x68*x70))+((x67*x72))+(((-1.0)*x68*x69))+(((4888700.0)*sj3))+((x70*x72))+(((-1.0)*x65*x66))+(((-1.0)*pz*x71))+(((-1.0)*sj3*x65*x70)))),((2641000.0)+(((-1.0)*x66*x68))+(((-1.0)*cj3*x65*x70))+(((-1.0)*x70*x71))+(((-1.0)*sj3*x67*x68))+(((-1.0)*cj3*x65*x67))+(((-1.0)*sj3*x68*x70))+(((-1.0)*x67*x71))+(((-1.0)*pz*x72))+(((4888700.0)*cj3))+((x65*x69))),IKFAST_ATAN2_MAGTHRESH);
if(!x75.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x74.value)))+(x75.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x76=IKsin(j2);
IkReal x77=IKcos(j2);
IkReal x78=((0.2573)*sj3);
IkReal x79=(px*sj1);
IkReal x80=((0.2573)*cj3);
IkReal x81=(py*sj1);
IkReal x82=((1.0)*r00);
IkReal x83=(cj1*sj0);
IkReal x84=((1.0)*px);
IkReal x85=((1.0)*pz);
IkReal x86=(cj0*r01);
IkReal x87=(pz*sj1);
IkReal x88=(cj0*cj1);
IkReal x89=((0.139)*x76);
IkReal x90=((0.139)*x77);
IkReal x91=(x76*x80);
IkReal x92=(x77*x78);
IkReal x93=(x76*x78);
IkReal x94=(x77*x80);
IkReal x95=(x89+x91);
IkReal x96=(x90+x93+x94);
evalcond[0]=(((cj0*x79))+((sj0*x81))+x95+(((-1.0)*cj1*x85))+(((-1.0)*x92)));
evalcond[1]=((0.19)+(((-1.0)*sj1*x85))+(((-1.0)*py*x83))+x96+(((-1.0)*x84*x88)));
evalcond[2]=((((-1.0)*x81*x82))+(((-1.0)*r02*x83*x84))+((pz*r00*x83))+x95+(((-1.0)*x92))+((py*r02*x88))+(((-1.0)*cj1*x85*x86))+((r01*x79)));
evalcond[3]=((((-0.19)*x86))+(((-1.0)*sj0*x82*x87))+(((-1.0)*cj0*r02*x81))+((x86*x87))+(((0.19)*r00*sj0))+(((-1.0)*cj1*py*x82))+((r02*sj0*x79))+(((-1.0)*x96))+((cj1*px*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x97=px*px;
IkReal x98=py*py;
IkReal x99=pz*pz;
IkReal x100=(r01*sj0);
IkReal x101=((0.19)*cj1);
IkReal x102=(cj0*r00);
IkReal x103=((1.0)*cj1);
IkReal x104=((2.0)*pz);
IkReal x105=((1.0)*pz);
IkReal x106=((0.38)*pz);
IkReal x107=(py*r01);
IkReal x108=(px*sj0);
IkReal x109=((0.0361)*cj1);
IkReal x110=((0.0361)*sj1);
IkReal x111=((2.0)*sj1);
IkReal x112=(py*r00);
IkReal x113=((0.19)*sj1);
IkReal x114=(cj0*px);
IkReal x115=((2.0)*cj1);
IkReal x116=(px*r00);
IkReal x117=(sj1*x99);
IkReal x118=(py*r02*sj0);
IkReal x119=(r02*x114);
IkReal x120=((1.0)*sj1*x98);
IkReal x121=((1.0)*sj1*x97);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=(((cj0*py))+(((-1.0)*x108)));
evalcond[2]=((1.0)+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[3]=(((sj1*x102))+((sj1*x100))+(((-1.0)*r02*x103)));
evalcond[4]=(((r02*x113))+(((-1.0)*r02*x105))+(((-1.0)*x116))+((x101*x102))+(((-1.0)*x107))+((x100*x101)));
evalcond[5]=((((-1.0)*x100*x103))+(((-1.0)*r02*sj1))+(((-1.0)*x102*x103)));
evalcond[6]=(((x100*x113))+(((-1.0)*x100*x105))+((x102*x113))+x119+x118+(((-1.0)*r02*x101))+(((-1.0)*x102*x105)));
evalcond[7]=(((r02*x110))+((r02*x117))+(((-0.38)*x107))+((cj1*x104*x118))+((cj1*x104*x119))+(((-0.38)*x116))+((x107*x114*x115))+((x102*x109))+(((-1.0)*x100*x103*x97))+(((-1.0)*x100*x103*x99))+(((-1.0)*x102*x103*x98))+(((-1.0)*x102*x103*x99))+(((-1.0)*r02*x121))+(((-1.0)*r02*x120))+(((-1.0)*r02*x106))+((x108*x112*x115))+((sj1*x104*x107))+((sj1*x104*x116))+((x100*x109))+((cj1*x100*x98))+((cj1*x102*x97)));
evalcond[8]=(((x100*x117))+((x100*x110))+(((-1.0)*x100*x120))+((sj1*x100*x97))+(((-1.0)*x108*x111*x112))+(((-1.0)*x107*x111*x114))+(((-1.0)*x100*x106))+((cj1*x104*x116))+((x102*x117))+((x102*x110))+((cj1*x104*x107))+(((-1.0)*sj1*x104*x119))+(((-1.0)*sj1*x104*x118))+(((-1.0)*r02*x109))+(((-1.0)*r02*x103*x97))+(((-1.0)*r02*x103*x98))+(((-1.0)*x102*x106))+((cj1*r02*x99))+(((-1.0)*x102*x121))+(((0.38)*x118))+(((0.38)*x119))+((sj1*x102*x98)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x122=((5.31250087376659)*cj1);
cj3array[0]=((-0.690964694237614)+(((13.9802654572805)*(px*px)))+(((13.9802654572805)*(py*py)))+(((-1.0)*py*sj0*x122))+(((-5.31250087376659)*pz*sj1))+(((13.9802654572805)*(pz*pz)))+(((-1.0)*cj0*px*x122)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x123=px*px;
IkReal x124=pz*pz;
IkReal x125=py*py;
IkReal x126=(px*sj0);
IkReal x127=((2.0)*py);
IkReal x128=(r00*sj0);
IkReal x129=(cj0*r01);
IkReal x130=(pz*r02);
IkReal x131=((0.38)*cj1);
IkReal x132=((0.38)*r02*sj1);
IkReal x133=((0.38)*pz*sj1);
IkReal x134=((1.0)*x125);
evalcond[0]=((0.08552429)+((py*r00*x131))+(((-1.0)*px*r01*x131))+(((0.0361)*x129))+(((0.0715294)*(IKcos(j3))))+(((-1.0)*x124*x128))+(((-0.0361)*x128))+((r01*x126*x127))+(((-1.0)*x126*x132))+(((-1.0)*cj0*x127*x130))+(((-1.0)*x128*x134))+((x123*x128))+((x123*x129))+((x124*x129))+(((2.0)*x126*x130))+(((-1.0)*cj0*px*r00*x127))+((x128*x133))+(((-1.0)*x129*x134))+(((-1.0)*x129*x133))+((cj0*py*x132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.19565227724544)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-8552429.0)+(((-7152940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x135=((25730000.0)*cj1);
IkReal x136=(cj3*pz);
IkReal x137=(py*sj0);
IkReal x138=((25730000.0)*sj1);
IkReal x139=(pz*sj3);
IkReal x140=(cj0*px);
IkReal x141=((13900000.0)*cj1);
IkReal x142=((13900000.0)*sj1);
IkReal x143=(sj1*x140);
CheckValue<IkReal> x144 = IKatan2WithCheck(IkReal((((x140*x142))+(((-1.0)*x135*x136))+(((-1.0)*sj3*x135*x140))+(((-1.0)*pz*x141))+((x137*x142))+(((-1.0)*x138*x139))+(((-1.0)*sj3*x135*x137))+((cj3*x137*x138))+((cj3*x138*x140))+(((4888700.0)*sj3)))),((2641000.0)+(((-1.0)*x137*x141))+(((-1.0)*x140*x141))+(((-1.0)*sj3*x137*x138))+(((-1.0)*cj3*x135*x137))+((x135*x139))+(((-1.0)*cj3*x135*x140))+(((-1.0)*pz*x142))+(((-1.0)*x136*x138))+(((-1.0)*sj3*x138*x140))+(((4888700.0)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x144.valid){
continue;
}
CheckValue<IkReal> x145=IKPowWithIntegerCheck(IKsign(((-8552429.0)+(((-7152940.0)*cj3)))),-1);
if(!x145.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x144.value)+(((1.5707963267949)*(x145.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x146=IKsin(j2);
IkReal x147=IKcos(j2);
IkReal x148=((0.2573)*sj3);
IkReal x149=(px*sj1);
IkReal x150=((0.2573)*cj3);
IkReal x151=(py*sj1);
IkReal x152=((1.0)*r00);
IkReal x153=(cj1*sj0);
IkReal x154=((1.0)*px);
IkReal x155=((1.0)*pz);
IkReal x156=(cj0*r01);
IkReal x157=(pz*sj1);
IkReal x158=(cj0*cj1);
IkReal x159=((0.139)*x146);
IkReal x160=((0.139)*x147);
IkReal x161=(x147*x148);
IkReal x162=(x146*x150);
IkReal x163=(x146*x148);
IkReal x164=(x147*x150);
IkReal x165=(x162+x159);
IkReal x166=(x163+x160+x164);
evalcond[0]=(((cj0*x149))+(((-1.0)*x161))+((sj0*x151))+x165+(((-1.0)*cj1*x155)));
evalcond[1]=((0.19)+(((-1.0)*x154*x158))+x166+(((-1.0)*py*x153))+(((-1.0)*sj1*x155)));
evalcond[2]=((((-1.0)*x165))+((r01*x149))+(((-1.0)*x151*x152))+((pz*r00*x153))+((py*r02*x158))+x161+(((-1.0)*cj1*x155*x156))+(((-1.0)*r02*x153*x154)));
evalcond[3]=((((-1.0)*cj1*py*x152))+(((-0.19)*x156))+((r02*sj0*x149))+x166+(((-1.0)*sj0*x152*x157))+(((-1.0)*cj0*r02*x151))+((x156*x157))+(((0.19)*r00*sj0))+((cj1*px*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x167=px*px;
IkReal x168=pz*pz;
IkReal x169=py*py;
IkReal x170=(pz*sj0);
IkReal x171=((10000000.0)*px);
IkReal x172=((1900000.0)*sj1);
IkReal x173=(cj0*py);
IkReal x174=(cj1*r00);
IkReal x175=(cj1*r01);
IkReal x176=(cj0*r01);
IkReal x177=(r00*sj0);
IkReal x178=(py*r01);
IkReal x179=(pz*r02);
IkReal x180=((5000000.0)*x169);
IkReal x181=((5000000.0)*x168);
IkReal x182=((5000000.0)*x167);
CheckValue<IkReal> x183=IKPowWithIntegerCheck(cj4,-1);
if(!x183.valid){
continue;
}
CheckValue<IkReal> x184=IKPowWithIntegerCheck(sj4,-1);
if(!x184.valid){
continue;
}
if( IKabs(((0.00719424460431655)*(x183.value)*(((((-190.0)*sj0*x175))+(((-190.0)*cj0*x174))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00))+(((1000.0)*x178))+(((1000.0)*x179)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.7960530914561e-6)*(x184.value)*((((x177*x182))+((x176*x182))+((x176*x181))+((r02*x172*x173))+(((-180500.0)*x177))+((r02*x170*x171))+(((-1.0)*pz*x172*x176))+(((1900000.0)*py*x174))+(((-1.0)*x176*x180))+(((-10000000.0)*x173*x179))+(((-1.0)*x177*x180))+(((-1.0)*x177*x181))+(((-1900000.0)*px*x175))+((sj0*x171*x178))+(((-427621.45)*sj4))+(((-1.0)*r00*x171*x173))+((r00*x170*x172))+(((180500.0)*x176))+(((-1.0)*px*r02*sj0*x172)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00719424460431655)*(x183.value)*(((((-190.0)*sj0*x175))+(((-190.0)*cj0*x174))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00))+(((1000.0)*x178))+(((1000.0)*x179))))))+IKsqr(((2.7960530914561e-6)*(x184.value)*((((x177*x182))+((x176*x182))+((x176*x181))+((r02*x172*x173))+(((-180500.0)*x177))+((r02*x170*x171))+(((-1.0)*pz*x172*x176))+(((1900000.0)*py*x174))+(((-1.0)*x176*x180))+(((-10000000.0)*x173*x179))+(((-1.0)*x177*x180))+(((-1.0)*x177*x181))+(((-1900000.0)*px*x175))+((sj0*x171*x178))+(((-427621.45)*sj4))+(((-1.0)*r00*x171*x173))+((r00*x170*x172))+(((180500.0)*x176))+(((-1.0)*px*r02*sj0*x172))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00719424460431655)*(x183.value)*(((((-190.0)*sj0*x175))+(((-190.0)*cj0*x174))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00))+(((1000.0)*x178))+(((1000.0)*x179))))), ((2.7960530914561e-6)*(x184.value)*((((x177*x182))+((x176*x182))+((x176*x181))+((r02*x172*x173))+(((-180500.0)*x177))+((r02*x170*x171))+(((-1.0)*pz*x172*x176))+(((1900000.0)*py*x174))+(((-1.0)*x176*x180))+(((-10000000.0)*x173*x179))+(((-1.0)*x177*x180))+(((-1.0)*x177*x181))+(((-1900000.0)*px*x175))+((sj0*x171*x178))+(((-427621.45)*sj4))+(((-1.0)*r00*x171*x173))+((r00*x170*x172))+(((180500.0)*x176))+(((-1.0)*px*r02*sj0*x172))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x185=IKcos(j3);
IkReal x186=px*px;
IkReal x187=pz*pz;
IkReal x188=py*py;
IkReal x189=(r01*sj0);
IkReal x190=((2.0)*py);
IkReal x191=(r00*sj0);
IkReal x192=((0.19)*cj1);
IkReal x193=(px*sj0);
IkReal x194=(py*sj0);
IkReal x195=((1.0)*pz);
IkReal x196=(cj0*r01);
IkReal x197=((0.38)*cj1);
IkReal x198=((0.19)*sj1);
IkReal x199=((0.139)*cj4);
IkReal x200=(cj0*r00);
IkReal x201=(cj0*px);
IkReal x202=(pz*r02);
IkReal x203=((0.38)*r02*sj1);
IkReal x204=((0.0715294)*x185);
IkReal x205=((0.38)*pz*sj1);
IkReal x206=((1.0)*x187);
IkReal x207=((1.0)*x188);
evalcond[0]=((((-1.0)*px*r00))+((x192*x200))+((x189*x192))+(((-1.0)*r02*x195))+((x199*(IKsin(j3))))+(((-1.0)*py*r01))+((r02*x198)));
evalcond[1]=((0.04942429)+(((-1.0)*x186))+(((-1.0)*x206))+(((-1.0)*x207))+((x197*x201))+x205+x204+((x194*x197)));
evalcond[2]=((((-1.0)*x195*x200))+((x198*x200))+(((-1.0)*x189*x195))+((x189*x198))+(((-1.0)*r02*x192))+(((-1.0)*x185*x199))+(((-0.2573)*cj4))+((r02*x194))+((r02*x201)));
evalcond[3]=((((-1.0)*x191*x207))+(((-1.0)*x191*x206))+((x186*x196))+((x186*x191))+((x187*x196))+(((2.0)*x193*x202))+((x191*x205))+(((-1.0)*px*r01*x197))+((cj0*py*x203))+(((-1.0)*px*x190*x200))+(((0.0361)*x196))+(((-0.08552429)*sj4))+(((-1.0)*cj0*x190*x202))+(((-1.0)*x193*x203))+(((-0.0361)*x191))+(((-1.0)*x196*x205))+(((-1.0)*x196*x207))+((px*x189*x190))+((py*r00*x197))+(((-1.0)*sj4*x204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x208=(cj3*cj4);
j2eval[0]=((((1.85107913669065)*cj4))+x208);
j2eval[1]=IKsign(((((1390.0)*x208))+(((2573.0)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
bool bgotonextstatement = true;
do
{
IkReal x209=px*px;
IkReal x210=pz*pz;
IkReal x211=py*py;
IkReal x212=((0.0715294)*cj3);
IkReal x213=(r01*sj0);
IkReal x214=((0.19)*cj1);
IkReal x215=(py*r02);
IkReal x216=(cj0*sj1);
IkReal x217=((1.0)*cj1);
IkReal x218=((1.0)*sj1);
IkReal x219=(cj0*r00);
IkReal x220=((2.0)*pz);
IkReal x221=(px*r02);
IkReal x222=(py*sj1);
IkReal x223=(cj0*r01);
IkReal x224=((1.0)*sj0);
IkReal x225=((0.0361)*cj1);
IkReal x226=(cj1*px);
IkReal x227=(r00*sj0);
IkReal x228=((2.0)*py);
IkReal x229=((0.38)*cj0);
IkReal x230=((0.38)*r01);
IkReal x231=((1.0)*pz);
IkReal x232=((0.38)*sj0);
IkReal x233=(cj1*py);
IkReal x234=((0.38)*pz);
IkReal x235=((0.0361)*sj1);
IkReal x236=(px*r00);
IkReal x237=((0.19)*sj1);
IkReal x238=(r00*x211);
IkReal x239=(r02*x210);
IkReal x240=(r02*x209);
IkReal x241=((1.0)*x211);
IkReal x242=(r00*x210);
IkReal x243=(r02*x211);
IkReal x244=((1.0)*x209);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x224))+((cj0*py)));
evalcond[2]=((-1.0)+x223+(((-1.0)*r00*x224)));
evalcond[3]=(((sj1*x213))+(((-1.0)*r02*x217))+((r00*x216)));
evalcond[4]=(((r02*x237))+((x214*x219))+((x213*x214))+(((-1.0)*r02*x231))+(((-1.0)*py*r01))+(((-1.0)*x236)));
evalcond[5]=((((-1.0)*x217*x219))+(((-1.0)*x213*x217))+(((-1.0)*r02*x218)));
evalcond[6]=((0.04942429)+((sj1*x234))+((x232*x233))+x212+(((-1.0)*x210))+((x226*x229))+(((-1.0)*x241))+(((-1.0)*x244)));
evalcond[7]=((((-1.0)*x213*x231))+(((0.19)*r00*x216))+((cj0*x221))+((sj0*x215))+((x213*x237))+(((-1.0)*r02*x214))+(((-1.0)*x219*x231)));
evalcond[8]=((-0.08552429)+((x210*x223))+(((-1.0)*x224*x238))+((x209*x223))+((x209*x227))+(((-1.0)*sj1*x221*x232))+(((-0.0361)*x227))+((px*x213*x228))+((sj1*x227*x234))+(((0.0361)*x223))+(((-1.0)*x223*x241))+(((-1.0)*cj0*x215*x220))+(((0.38)*x215*x216))+(((-1.0)*x226*x230))+(((-1.0)*px*x219*x228))+(((-1.0)*pz*x216*x230))+(((-1.0)*x212))+(((0.38)*r00*x233))+(((-1.0)*x224*x242))+((sj0*x220*x221)));
evalcond[9]=(((r02*x235))+((sj1*x239))+((cj1*x211*x213))+((x226*x227*x228))+(((-1.0)*x210*x213*x217))+((cj1*sj0*x215*x220))+(((-1.0)*x210*x217*x219))+(((-1.0)*py*x230))+(((-1.0)*r02*x234))+((x213*x225))+((cj0*cj1*x220*x221))+((x223*x226*x228))+((x219*x225))+((cj1*x209*x219))+((sj1*x220*x236))+(((-1.0)*x211*x217*x219))+(((-0.38)*x236))+((r01*x220*x222))+(((-1.0)*x209*x213*x217))+(((-1.0)*x218*x243))+(((-1.0)*x218*x240)));
evalcond[10]=((((-1.0)*x217*x240))+(((-1.0)*x217*x243))+(((-1.0)*x213*x234))+((cj1*x239))+(((-1.0)*r02*x225))+(((-1.0)*sj0*sj1*x215*x220))+((r00*x220*x226))+((x216*x242))+(((0.0361)*r00*x216))+(((-1.0)*px*r01*x216*x228))+((sj1*x210*x213))+((x213*x235))+((sj1*x209*x213))+(((-1.0)*r00*x216*x244))+((x221*x229))+((r01*x220*x233))+((x215*x232))+(((-2.0)*px*x222*x227))+((x216*x238))+(((-1.0)*x216*x220*x221))+(((-1.0)*x219*x234))+(((-1.0)*x211*x213*x218)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.19565227724544)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-8552429.0)+(((-7152940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x245=((25730000.0)*cj1);
IkReal x246=(cj3*pz);
IkReal x247=(py*sj0);
IkReal x248=((25730000.0)*sj1);
IkReal x249=(pz*sj3);
IkReal x250=(cj0*px);
IkReal x251=((13900000.0)*cj1);
IkReal x252=((13900000.0)*sj1);
IkReal x253=(sj1*x250);
CheckValue<IkReal> x254=IKPowWithIntegerCheck(IKsign(((-8552429.0)+(((-7152940.0)*cj3)))),-1);
if(!x254.valid){
continue;
}
CheckValue<IkReal> x255 = IKatan2WithCheck(IkReal(((((-1.0)*x248*x249))+(((-1.0)*sj3*x245*x250))+((x250*x252))+(((-1.0)*pz*x251))+(((-1.0)*sj3*x245*x247))+(((4888700.0)*sj3))+(((-1.0)*x245*x246))+((cj3*x247*x248))+((cj3*x248*x250))+((x247*x252)))),((2641000.0)+(((-1.0)*sj3*x247*x248))+(((-1.0)*x250*x251))+(((-1.0)*cj3*x245*x247))+(((-1.0)*sj3*x248*x250))+(((-1.0)*x247*x251))+(((-1.0)*pz*x252))+(((-1.0)*cj3*x245*x250))+((x245*x249))+(((4888700.0)*cj3))+(((-1.0)*x246*x248))),IKFAST_ATAN2_MAGTHRESH);
if(!x255.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x254.value)))+(x255.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x256=IKsin(j2);
IkReal x257=IKcos(j2);
IkReal x258=((0.2573)*sj3);
IkReal x259=(px*sj1);
IkReal x260=((0.2573)*cj3);
IkReal x261=(py*sj1);
IkReal x262=((1.0)*r00);
IkReal x263=(cj1*sj0);
IkReal x264=((1.0)*px);
IkReal x265=((1.0)*pz);
IkReal x266=(cj0*r01);
IkReal x267=(pz*sj1);
IkReal x268=(cj0*cj1);
IkReal x269=((0.139)*x256);
IkReal x270=((0.139)*x257);
IkReal x271=(x256*x260);
IkReal x272=(x257*x258);
IkReal x273=(x256*x258);
IkReal x274=(x257*x260);
IkReal x275=(x269+x271);
IkReal x276=(x274+x273+x270);
evalcond[0]=((((-1.0)*cj1*x265))+x275+((cj0*x259))+(((-1.0)*x272))+((sj0*x261)));
evalcond[1]=((0.19)+(((-1.0)*sj1*x265))+(((-1.0)*py*x263))+x276+(((-1.0)*x264*x268)));
evalcond[2]=((((-1.0)*r02*x263*x264))+(((-1.0)*cj1*x265*x266))+((r01*x259))+x275+(((-1.0)*x261*x262))+((py*r02*x268))+(((-1.0)*x272))+((pz*r00*x263)));
evalcond[3]=(((x266*x267))+(((-1.0)*sj0*x262*x267))+(((-1.0)*cj0*r02*x261))+((r02*sj0*x259))+(((0.19)*r00*sj0))+(((-1.0)*x276))+((cj1*px*r01))+(((-1.0)*cj1*py*x262))+(((-0.19)*x266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x277=px*px;
IkReal x278=pz*pz;
IkReal x279=((0.0715294)*cj3);
IkReal x280=py*py;
IkReal x281=(r01*sj0);
IkReal x282=((0.19)*cj1);
IkReal x283=(py*r02);
IkReal x284=(cj0*sj1);
IkReal x285=((1.0)*cj1);
IkReal x286=((1.0)*sj1);
IkReal x287=(cj0*r00);
IkReal x288=((2.0)*pz);
IkReal x289=(px*r02);
IkReal x290=(py*sj1);
IkReal x291=(cj0*r01);
IkReal x292=((1.0)*sj0);
IkReal x293=((0.0361)*cj1);
IkReal x294=(cj1*px);
IkReal x295=(r00*sj0);
IkReal x296=((2.0)*py);
IkReal x297=((0.38)*cj0);
IkReal x298=((0.38)*r01);
IkReal x299=((1.0)*pz);
IkReal x300=((0.38)*sj0);
IkReal x301=(cj1*py);
IkReal x302=((0.38)*pz);
IkReal x303=((0.0361)*sj1);
IkReal x304=(px*r00);
IkReal x305=((0.19)*sj1);
IkReal x306=(r00*x280);
IkReal x307=(r02*x278);
IkReal x308=(r02*x277);
IkReal x309=((1.0)*x280);
IkReal x310=(r00*x278);
IkReal x311=(r02*x280);
IkReal x312=((1.0)*x277);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=(((cj0*py))+(((-1.0)*px*x292)));
evalcond[2]=((1.0)+(((-1.0)*r00*x292))+x291);
evalcond[3]=((((-1.0)*r02*x285))+((r00*x284))+((sj1*x281)));
evalcond[4]=((((-1.0)*x304))+((r02*x305))+(((-1.0)*r02*x299))+(((-1.0)*py*r01))+((x281*x282))+((x282*x287)));
evalcond[5]=((((-1.0)*r02*x286))+(((-1.0)*x281*x285))+(((-1.0)*x285*x287)));
evalcond[6]=((0.04942429)+(((-1.0)*x278))+x279+(((-1.0)*x312))+((x294*x297))+((x300*x301))+((sj1*x302))+(((-1.0)*x309)));
evalcond[7]=((((-1.0)*r02*x282))+((cj0*x289))+(((0.19)*r00*x284))+((x281*x305))+(((-1.0)*x287*x299))+((sj0*x283))+(((-1.0)*x281*x299)));
evalcond[8]=((0.08552429)+(((-1.0)*sj1*x289*x300))+(((-1.0)*x292*x306))+((sj0*x288*x289))+(((0.38)*r00*x301))+(((-1.0)*cj0*x283*x288))+(((-1.0)*x292*x310))+((x277*x291))+((x277*x295))+(((-0.0361)*x295))+(((0.0361)*x291))+x279+((x278*x291))+(((0.38)*x283*x284))+(((-1.0)*px*x287*x296))+(((-1.0)*pz*x284*x298))+((sj1*x295*x302))+(((-1.0)*x294*x298))+(((-1.0)*x291*x309))+((px*x281*x296)));
evalcond[9]=(((cj1*x277*x287))+((cj1*x280*x281))+(((-1.0)*py*x298))+(((-1.0)*x286*x311))+(((-0.38)*x304))+((r01*x288*x290))+((sj1*x288*x304))+(((-1.0)*x286*x308))+((x281*x293))+((r02*x303))+((x287*x293))+((cj0*cj1*x288*x289))+(((-1.0)*r02*x302))+(((-1.0)*x277*x281*x285))+((x291*x294*x296))+(((-1.0)*x278*x285*x287))+((cj1*sj0*x283*x288))+((x294*x295*x296))+((sj1*x307))+(((-1.0)*x280*x285*x287))+(((-1.0)*x278*x281*x285)));
evalcond[10]=(((x289*x297))+(((0.0361)*r00*x284))+((cj1*x307))+(((-1.0)*x280*x281*x286))+((sj1*x278*x281))+((sj1*x277*x281))+(((-1.0)*x285*x311))+((x283*x300))+(((-1.0)*x287*x302))+((r00*x288*x294))+((x284*x306))+(((-1.0)*x285*x308))+((x284*x310))+(((-1.0)*r02*x293))+((x281*x303))+(((-1.0)*x281*x302))+((r01*x288*x301))+(((-1.0)*sj0*sj1*x283*x288))+(((-2.0)*px*x290*x295))+(((-1.0)*x284*x288*x289))+(((-1.0)*px*r01*x284*x296))+(((-1.0)*r00*x284*x312)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.19565227724544)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-8552429.0)+(((-7152940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x313=((25730000.0)*cj1);
IkReal x314=(cj3*pz);
IkReal x315=(py*sj0);
IkReal x316=((25730000.0)*sj1);
IkReal x317=(pz*sj3);
IkReal x318=(cj0*px);
IkReal x319=((13900000.0)*cj1);
IkReal x320=((13900000.0)*sj1);
IkReal x321=(sj1*x318);
CheckValue<IkReal> x322=IKPowWithIntegerCheck(IKsign(((-8552429.0)+(((-7152940.0)*cj3)))),-1);
if(!x322.valid){
continue;
}
CheckValue<IkReal> x323 = IKatan2WithCheck(IkReal((((x318*x320))+(((-1.0)*x313*x314))+(((-1.0)*sj3*x313*x315))+(((-1.0)*sj3*x313*x318))+(((-1.0)*pz*x319))+((x315*x320))+(((4888700.0)*sj3))+((cj3*x316*x318))+(((-1.0)*x316*x317))+((cj3*x315*x316)))),((2641000.0)+(((-1.0)*cj3*x313*x315))+(((-1.0)*cj3*x313*x318))+(((-1.0)*x318*x319))+(((-1.0)*x315*x319))+(((-1.0)*x314*x316))+(((-1.0)*sj3*x315*x316))+(((-1.0)*sj3*x316*x318))+(((-1.0)*pz*x320))+(((4888700.0)*cj3))+((x313*x317))),IKFAST_ATAN2_MAGTHRESH);
if(!x323.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x322.value)))+(x323.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x324=IKsin(j2);
IkReal x325=IKcos(j2);
IkReal x326=((0.2573)*sj3);
IkReal x327=(px*sj1);
IkReal x328=((0.2573)*cj3);
IkReal x329=(py*sj1);
IkReal x330=((1.0)*r00);
IkReal x331=(cj1*sj0);
IkReal x332=((1.0)*px);
IkReal x333=((1.0)*pz);
IkReal x334=(cj0*r01);
IkReal x335=(pz*sj1);
IkReal x336=(cj0*cj1);
IkReal x337=((0.139)*x324);
IkReal x338=((0.139)*x325);
IkReal x339=(x325*x326);
IkReal x340=(x324*x328);
IkReal x341=(x324*x326);
IkReal x342=(x325*x328);
IkReal x343=(x337+x340);
IkReal x344=(x338+x342+x341);
evalcond[0]=(x343+((cj0*x327))+((sj0*x329))+(((-1.0)*x339))+(((-1.0)*cj1*x333)));
evalcond[1]=((0.19)+(((-1.0)*py*x331))+x344+(((-1.0)*x332*x336))+(((-1.0)*sj1*x333)));
evalcond[2]=(((pz*r00*x331))+(((-1.0)*x329*x330))+((r01*x327))+(((-1.0)*r02*x331*x332))+x339+((py*r02*x336))+(((-1.0)*x343))+(((-1.0)*cj1*x333*x334)));
evalcond[3]=((((-1.0)*cj0*r02*x329))+((x334*x335))+(((-1.0)*sj0*x330*x335))+((r02*sj0*x327))+x344+(((-1.0)*cj1*py*x330))+(((0.19)*r00*sj0))+((cj1*px*r01))+(((-0.19)*x334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x345=px*px;
IkReal x346=pz*pz;
IkReal x347=py*py;
IkReal x348=(r01*sj0);
IkReal x349=((2.0)*py);
IkReal x350=(r00*sj0);
IkReal x351=((0.19)*cj1);
IkReal x352=(cj0*py);
IkReal x353=(px*sj0);
IkReal x354=(py*sj0);
IkReal x355=((1.0)*pz);
IkReal x356=((0.38)*r01);
IkReal x357=(cj1*px);
IkReal x358=(pz*sj1);
IkReal x359=((0.38)*cj1);
IkReal x360=(cj0*r01);
IkReal x361=((0.19)*sj1);
IkReal x362=(cj0*r00);
IkReal x363=(cj0*r02);
IkReal x364=((0.38)*r02*sj1);
IkReal x365=((1.0)*x346);
IkReal x366=((1.0)*x347);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x353))+x352);
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*x350))+x360);
evalcond[3]=((((-1.0)*px*r00))+((x348*x351))+(((-1.0)*r02*x355))+(((-1.0)*py*r01))+((x351*x362))+((r02*x361)));
evalcond[4]=((0.12095369)+(((-1.0)*x366))+(((-1.0)*x365))+(((0.38)*cj0*x357))+(((0.38)*x358))+((x354*x359))+(((-1.0)*x345)));
evalcond[5]=(((x361*x362))+(((-1.0)*x348*x355))+(((-1.0)*x355*x362))+(((-0.3963)*cj4))+((px*x363))+(((-1.0)*r02*x351))+((x348*x361))+((r02*x354)));
evalcond[6]=((((-1.0)*px*x349*x362))+(((0.0361)*x360))+(((-0.15705369)*sj4))+((x345*x350))+(((-1.0)*x353*x364))+(((-1.0)*x350*x365))+(((-1.0)*x350*x366))+(((-1.0)*x360*x366))+((x346*x360))+(((-0.0361)*x350))+(((-1.0)*x356*x357))+((x352*x364))+(((-1.0)*pz*x349*x363))+(((0.38)*x350*x358))+((px*x348*x349))+(((2.0)*pz*r02*x353))+((x345*x360))+(((-1.0)*cj0*x356*x358))+((py*r00*x359)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x367=((2.52334090335604)*sj1);
IkReal x368=(cj0*px);
IkReal x369=((2.52334090335604)*cj1);
IkReal x370=(py*sj0);
if( IKabs(((((-1.0)*x367*x368))+(((-1.0)*x367*x370))+((pz*x369)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.479434771637648)+((x369*x370))+((pz*x367))+((x368*x369)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x367*x368))+(((-1.0)*x367*x370))+((pz*x369))))+IKsqr(((-0.479434771637648)+((x369*x370))+((pz*x367))+((x368*x369))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x367*x368))+(((-1.0)*x367*x370))+((pz*x369))), ((-0.479434771637648)+((x369*x370))+((pz*x367))+((x368*x369))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x371=IKsin(j2);
IkReal x372=IKcos(j2);
IkReal x373=px*px;
IkReal x374=py*py;
IkReal x375=pz*pz;
IkReal x376=(px*sj1);
IkReal x377=((0.15705369)*cj4);
IkReal x378=(cj0*r00);
IkReal x379=(cj1*sj0);
IkReal x380=((1.0)*r01);
IkReal x381=(sj0*sj1);
IkReal x382=((1.0)*sj1);
IkReal x383=(py*r00);
IkReal x384=((1.0)*cj1);
IkReal x385=(px*r02);
IkReal x386=((2.0)*pz);
IkReal x387=(cj0*r02);
IkReal x388=((0.38)*pz);
IkReal x389=(r01*sj0);
IkReal x390=(r01*sj1);
IkReal x391=(cj0*pz);
IkReal x392=(pz*r00);
IkReal x393=((0.0361)*cj1);
IkReal x394=((0.0361)*r01);
IkReal x395=((0.38)*py);
IkReal x396=(r02*sj0);
IkReal x397=((0.0361)*sj1);
IkReal x398=(py*r01);
IkReal x399=((2.0)*cj0);
IkReal x400=(cj1*px);
IkReal x401=(sj1*x375);
IkReal x402=(r02*x374);
IkReal x403=(r02*x373);
IkReal x404=((0.3963)*x371);
IkReal x405=((0.3963)*x372);
IkReal x406=(py*r02*x386);
evalcond[0]=(((sj1*x378))+((cj4*x372))+(((-1.0)*r02*x384))+((r01*x381)));
evalcond[1]=(x404+((py*x381))+(((-1.0)*pz*x384))+((cj0*x376)));
evalcond[2]=((((-1.0)*x379*x380))+(((-1.0)*cj4*x371))+(((-1.0)*x378*x384))+(((-1.0)*r02*x382)));
evalcond[3]=((0.19)+(((-1.0)*py*x379))+x405+(((-1.0)*pz*x382))+(((-1.0)*cj0*px*x384)));
evalcond[4]=(((cj1*py*x387))+(((-1.0)*cj1*x380*x391))+((x379*x392))+((r01*x376))+((sj4*x404))+(((-1.0)*x382*x383))+(((-1.0)*x379*x385)));
evalcond[5]=((((-1.0)*py*x382*x387))+(((-1.0)*x381*x392))+((r01*x400))+(((-0.19)*cj0*r01))+((x376*x396))+(((-1.0)*sj4*x405))+(((0.19)*r00*sj0))+((x390*x391))+(((-1.0)*x383*x384)));
evalcond[6]=(((r01*x374*x379))+(((2.0)*px*x379*x383))+((cj1*x373*x378))+((x379*x394))+(((-1.0)*x374*x378*x384))+((x378*x393))+(((-1.0)*x375*x379*x380))+(((-1.0)*x373*x379*x380))+(((-1.0)*r01*x395))+((x379*x406))+((py*x386*x390))+((cj0*cj1*x385*x386))+(((-1.0)*x375*x378*x384))+(((-1.0)*x371*x377))+(((-1.0)*r02*x388))+((x398*x399*x400))+((r00*x376*x386))+(((-1.0)*x382*x403))+(((-1.0)*x382*x402))+((r02*x401))+((r02*x397))+(((-0.38)*px*r00)));
evalcond[7]=((((-2.0)*sj0*x376*x383))+((sj1*x374*x378))+(((-1.0)*x381*x406))+((x395*x396))+((r01*x375*x381))+((cj1*x386*x398))+((x381*x394))+(((-1.0)*r02*x393))+(((-1.0)*x374*x380*x381))+((r00*x386*x400))+((x378*x397))+((x372*x377))+((cj1*r02*x375))+(((-1.0)*x384*x403))+(((-1.0)*x384*x402))+(((0.38)*cj0*x385))+(((-1.0)*x373*x378*x382))+(((-1.0)*x378*x388))+(((-1.0)*x376*x398*x399))+(((-1.0)*x388*x389))+((r01*x373*x381))+(((-1.0)*x376*x386*x387))+((x378*x401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x407=px*px;
IkReal x408=pz*pz;
IkReal x409=py*py;
IkReal x410=(r01*sj0);
IkReal x411=((2.0)*py);
IkReal x412=(r00*sj0);
IkReal x413=((0.19)*cj1);
IkReal x414=(cj0*py);
IkReal x415=(px*sj0);
IkReal x416=(py*sj0);
IkReal x417=((1.0)*pz);
IkReal x418=((0.38)*r01);
IkReal x419=(cj1*px);
IkReal x420=(pz*sj1);
IkReal x421=((0.38)*cj1);
IkReal x422=(cj0*r01);
IkReal x423=((0.19)*sj1);
IkReal x424=(cj0*r00);
IkReal x425=(cj0*r02);
IkReal x426=((0.38)*r02*sj1);
IkReal x427=((1.0)*x408);
IkReal x428=((1.0)*x409);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(x414+(((-1.0)*x415)));
evalcond[2]=((((-1.0)*sj4))+x422+(((-1.0)*x412)));
evalcond[3]=((((-1.0)*px*r00))+((x413*x424))+(((-1.0)*r02*x417))+((x410*x413))+((r02*x423))+(((-1.0)*py*r01)));
evalcond[4]=((-0.02210511)+(((-1.0)*x428))+(((-1.0)*x427))+(((0.38)*x420))+((x416*x421))+(((0.38)*cj0*x419))+(((-1.0)*x407)));
evalcond[5]=(((x410*x423))+(((-1.0)*r02*x413))+(((-0.1183)*cj4))+(((-1.0)*x417*x424))+((x423*x424))+(((-1.0)*x410*x417))+((r02*x416))+((px*x425)));
evalcond[6]=((((-1.0)*x422*x428))+(((-1.0)*x418*x419))+((x407*x412))+(((-1.0)*cj0*x418*x420))+(((-1.0)*x412*x428))+(((-1.0)*x412*x427))+(((0.0361)*x422))+((px*x410*x411))+((py*r00*x421))+((x414*x426))+(((-1.0)*px*x411*x424))+((x408*x422))+((x407*x422))+(((-1.0)*pz*x411*x425))+(((0.38)*x412*x420))+(((2.0)*pz*r02*x415))+(((-1.0)*x415*x426))+(((-0.0361)*x412))+(((-0.01399489)*sj4)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x429=((8.4530853761623)*sj1);
IkReal x430=(cj0*px);
IkReal x431=((8.4530853761623)*cj1);
IkReal x432=(py*sj0);
if( IKabs((((x429*x430))+((x429*x432))+(((-1.0)*pz*x431)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.60608622147084)+(((-1.0)*x430*x431))+(((-1.0)*x431*x432))+(((-1.0)*pz*x429)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x429*x430))+((x429*x432))+(((-1.0)*pz*x431))))+IKsqr(((1.60608622147084)+(((-1.0)*x430*x431))+(((-1.0)*x431*x432))+(((-1.0)*pz*x429))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x429*x430))+((x429*x432))+(((-1.0)*pz*x431))), ((1.60608622147084)+(((-1.0)*x430*x431))+(((-1.0)*x431*x432))+(((-1.0)*pz*x429))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x433=IKsin(j2);
IkReal x434=IKcos(j2);
IkReal x435=px*px;
IkReal x436=py*py;
IkReal x437=pz*pz;
IkReal x438=(cj0*sj1);
IkReal x439=(r01*sj0);
IkReal x440=((0.1183)*sj4);
IkReal x441=((1.0)*cj1);
IkReal x442=((0.01399489)*cj4);
IkReal x443=(py*sj0);
IkReal x444=((1.0)*sj1);
IkReal x445=(py*r00);
IkReal x446=(px*r02);
IkReal x447=(r01*sj1);
IkReal x448=((2.0)*py);
IkReal x449=(pz*r00);
IkReal x450=((0.38)*cj0);
IkReal x451=((0.38)*r02);
IkReal x452=(cj0*r00);
IkReal x453=((0.0361)*cj1);
IkReal x454=((0.0361)*sj1);
IkReal x455=(pz*r01);
IkReal x456=(px*r01);
IkReal x457=(cj0*px);
IkReal x458=(cj0*cj1);
IkReal x459=(py*r02);
IkReal x460=(r00*x437);
IkReal x461=((2.0)*pz*r02);
IkReal x462=(r00*x436);
IkReal x463=((2.0)*px*r00);
IkReal x464=(r02*x436);
IkReal x465=(r02*x435);
IkReal x466=(r00*x435);
IkReal x467=(r02*x437);
evalcond[0]=(((px*x438))+(((-0.1183)*x433))+((sj1*x443))+(((-1.0)*pz*x441)));
evalcond[1]=((((-1.0)*cj4*x434))+(((-1.0)*r02*x441))+((r00*x438))+((sj1*x439)));
evalcond[2]=(((cj4*x433))+(((-1.0)*x439*x441))+(((-1.0)*r02*x444))+(((-1.0)*x441*x452)));
evalcond[3]=((0.19)+(((-0.1183)*x434))+(((-1.0)*pz*x444))+(((-1.0)*x441*x443))+(((-1.0)*x441*x457)));
evalcond[4]=(((cj1*sj0*x449))+(((-1.0)*x444*x445))+(((-1.0)*x433*x440))+((px*x447))+(((-1.0)*sj0*x441*x446))+(((-1.0)*cj0*x441*x455))+((x458*x459)));
evalcond[5]=(((x434*x440))+((cj1*x456))+(((-1.0)*x438*x459))+((x438*x455))+(((-0.19)*cj0*r01))+((sj0*sj1*x446))+(((-1.0)*sj0*x444*x449))+(((0.19)*r00*sj0))+(((-1.0)*x441*x445)));
evalcond[6]=((((-1.0)*x435*x439*x441))+((x452*x453))+(((-1.0)*x436*x441*x452))+(((-0.38)*py*r01))+((pz*x447*x448))+((x448*x456*x458))+((cj1*x435*x452))+((cj1*x443*x461))+((cj1*x443*x463))+(((-1.0)*pz*x451))+(((2.0)*pz*x446*x458))+((sj1*x467))+((r02*x454))+(((-1.0)*x437*x439*x441))+(((-1.0)*x437*x441*x452))+(((2.0)*px*sj1*x449))+((x439*x453))+((x433*x442))+((cj1*x436*x439))+(((-1.0)*x444*x465))+(((-1.0)*x444*x464))+(((-0.38)*px*r00)));
evalcond[7]=((((-1.0)*sj1*x443*x461))+(((-1.0)*sj1*x443*x463))+(((-1.0)*x441*x465))+(((-1.0)*x441*x464))+((sj1*x435*x439))+(((-1.0)*x438*x448*x456))+(((-2.0)*pz*x438*x446))+((cj1*x448*x455))+(((-1.0)*x438*x466))+(((-1.0)*x434*x442))+((sj1*x437*x439))+((cj1*x467))+((x438*x462))+((x438*x460))+(((2.0)*cj1*px*x449))+(((-1.0)*x436*x439*x444))+((x446*x450))+(((-0.38)*pz*x439))+((x443*x451))+(((0.0361)*r00*x438))+(((-1.0)*r02*x453))+((x439*x454))+(((-1.0)*x449*x450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x479=IKPowWithIntegerCheck(cj4,-1);
if(!x479.valid){
continue;
}
IkReal x468=x479.value;
IkReal x469=(cj1*pz);
IkReal x470=((10000.0)*cj4);
IkReal x471=((2573.0)*cj3);
IkReal x472=(r02*sj1);
IkReal x473=(cj3*x470);
IkReal x474=(py*sj0*sj1);
IkReal x475=(cj0*px*sj1);
IkReal x476=(cj0*cj1*r00);
IkReal x477=((-0.000719424460431655)*x468);
IkReal x478=(cj1*r01*sj0);
CheckValue<IkReal> x480=IKPowWithIntegerCheck(sj3,-1);
if(!x480.valid){
continue;
}
if( IKabs((x477*((((x470*x474))+((x470*x475))+(((-1.0)*x469*x470))+(((-2573.0)*x476))+(((-2573.0)*x472))+(((-2573.0)*x478)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x477*(x480.value)*((((x473*x474))+((x473*x475))+(((-1.0)*x469*x473))+(((-1390.0)*x472))+(((-1390.0)*x476))+(((-1390.0)*x478))+(((-1.0)*x471*x472))+(((-1.0)*x471*x476))+(((-1.0)*x471*x478)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x477*((((x470*x474))+((x470*x475))+(((-1.0)*x469*x470))+(((-2573.0)*x476))+(((-2573.0)*x472))+(((-2573.0)*x478))))))+IKsqr((x477*(x480.value)*((((x473*x474))+((x473*x475))+(((-1.0)*x469*x473))+(((-1390.0)*x472))+(((-1390.0)*x476))+(((-1390.0)*x478))+(((-1.0)*x471*x472))+(((-1.0)*x471*x476))+(((-1.0)*x471*x478))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x477*((((x470*x474))+((x470*x475))+(((-1.0)*x469*x470))+(((-2573.0)*x476))+(((-2573.0)*x472))+(((-2573.0)*x478))))), (x477*(x480.value)*((((x473*x474))+((x473*x475))+(((-1.0)*x469*x473))+(((-1390.0)*x472))+(((-1390.0)*x476))+(((-1390.0)*x478))+(((-1.0)*x471*x472))+(((-1.0)*x471*x476))+(((-1.0)*x471*x478))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x481=IKcos(j2);
IkReal x482=IKsin(j2);
IkReal x483=px*px;
IkReal x484=py*py;
IkReal x485=pz*pz;
IkReal x486=(r01*sj0);
IkReal x487=((1.0)*cj1);
IkReal x488=((1.0)*sj1);
IkReal x489=(py*sj0);
IkReal x490=(cj0*r00);
IkReal x491=((2.0)*px);
IkReal x492=((0.0361)*cj1);
IkReal x493=(cj3*cj4);
IkReal x494=(cj1*r00);
IkReal x495=((0.04688229)*cj4);
IkReal x496=(cj0*r02);
IkReal x497=(cj1*py);
IkReal x498=((0.38)*px);
IkReal x499=(px*sj1);
IkReal x500=(r02*sj0);
IkReal x501=(pz*r01);
IkReal x502=((2.0)*sj1);
IkReal x503=((0.38)*r02);
IkReal x504=((0.38)*pz);
IkReal x505=(r02*sj1);
IkReal x506=(cj1*r02);
IkReal x507=(cj0*r01);
IkReal x508=((0.0715294)*cj4);
IkReal x509=(r00*sj1);
IkReal x510=((0.0361)*sj1);
IkReal x511=(py*r00);
IkReal x512=((0.2573)*cj3*sj4);
IkReal x513=((0.139)*x482);
IkReal x514=(cj0*pz*sj1);
IkReal x515=(sj3*x482);
IkReal x516=(pz*r00*sj0);
IkReal x517=(r02*x483);
IkReal x518=((0.139)*x481);
IkReal x519=((0.2573)*x481);
IkReal x520=(sj1*x485);
IkReal x521=(r02*x484);
IkReal x522=(sj3*x481);
evalcond[0]=(((cj4*x515))+((sj1*x486))+((sj1*x490))+((x481*x493))+(((-1.0)*r02*x487)));
evalcond[1]=((((-1.0)*x486*x487))+((cj4*x522))+(((-1.0)*x482*x493))+(((-1.0)*x487*x490))+(((-1.0)*r02*x488)));
evalcond[2]=((((-1.0)*pz*x487))+((cj0*x499))+((sj1*x489))+(((-1.0)*sj3*x519))+x513+(((0.2573)*cj3*x482)));
evalcond[3]=((0.19)+(((-1.0)*pz*x488))+(((0.2573)*x515))+(((-1.0)*x487*x489))+(((-1.0)*cj0*px*x487))+((cj3*x519))+x518);
evalcond[4]=((((-1.0)*sj3*sj4*x519))+((sj4*x513))+((x496*x497))+(((-1.0)*cj0*x487*x501))+((pz*sj0*x494))+(((-1.0)*x488*x511))+((r01*x499))+((x482*x512))+(((-1.0)*px*x487*x500)));
evalcond[5]=((((-0.2573)*sj4*x515))+(((-1.0)*py*x488*x496))+((cj0*sj1*x501))+(((-1.0)*x488*x516))+(((-0.19)*x507))+(((0.19)*r00*sj0))+((cj1*px*r01))+((x499*x500))+(((-1.0)*sj4*x518))+(((-1.0)*x487*x511))+(((-1.0)*x481*x512)));
evalcond[6]=(((x489*x491*x494))+(((-1.0)*r00*x498))+(((-1.0)*x485*x486*x487))+(((-1.0)*pz*x503))+(((-1.0)*x484*x487*x490))+(((2.0)*pz*x489*x506))+(((-1.0)*x482*x508))+(((-1.0)*x488*x521))+((x490*x492))+(((-0.38)*py*r01))+((py*x501*x502))+(((0.0361)*x505))+((x495*x522))+((x485*x505))+((cj1*x484*x486))+((x491*x497*x507))+(((-1.0)*x488*x517))+((cj1*x483*x490))+(((-1.0)*x483*x486*x487))+((x486*x492))+(((-1.0)*x485*x487*x490))+((cj1*pz*x491*x496))+((pz*x491*x509))+(((-0.08552429)*x482*x493)));
evalcond[7]=(((x489*x503))+(((-1.0)*x487*x521))+(((0.08552429)*x481*x493))+(((-1.0)*x489*x491*x509))+((sj1*x484*x490))+(((-1.0)*r02*x492))+((x486*x510))+((x496*x498))+((x486*x520))+(((-1.0)*py*sj1*x491*x507))+((pz*x491*x494))+((x485*x506))+((x481*x508))+((x490*x520))+(((-1.0)*x490*x504))+(((2.0)*x497*x501))+((sj1*x483*x486))+((x495*x515))+(((-1.0)*pz*sj1*x491*x496))+(((-1.0)*x486*x504))+(((-1.0)*x484*x486*x488))+(((-1.0)*pz*r02*x489*x502))+(((-1.0)*x483*x488*x490))+(((-1.0)*x487*x517))+((x490*x510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x523=((10000.0)*cj4);
IkReal x524=(cj1*sj3);
IkReal x525=(sj0*sj1);
IkReal x526=((2573.0)*r02);
IkReal x527=(cj0*sj1);
IkReal x528=(cj1*cj3);
IkReal x529=((2573.0)*r01);
IkReal x530=((2573.0)*r00);
CheckValue<IkReal> x531=IKPowWithIntegerCheck(IKsign(((((1390.0)*cj3*cj4))+(((2573.0)*cj4)))),-1);
if(!x531.valid){
continue;
}
CheckValue<IkReal> x532 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*px*x523*x527))+(((-1.0)*cj3*py*x523*x525))+((x524*x526))+((pz*x523*x528))+(((-1.0)*sj3*x527*x530))+(((-1.0)*sj3*x525*x529)))),((((-1.0)*cj3*x527*x530))+((x526*x528))+(((1390.0)*cj1*r02))+(((-1.0)*cj3*x525*x529))+(((-1.0)*pz*x523*x524))+((px*sj3*x523*x527))+((py*sj3*x523*x525))+(((-1390.0)*r01*x525))+(((-1390.0)*r00*x527))),IKFAST_ATAN2_MAGTHRESH);
if(!x532.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x531.value)))+(x532.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x533=IKcos(j2);
IkReal x534=IKsin(j2);
IkReal x535=px*px;
IkReal x536=py*py;
IkReal x537=pz*pz;
IkReal x538=(r01*sj0);
IkReal x539=((1.0)*cj1);
IkReal x540=((1.0)*sj1);
IkReal x541=(py*sj0);
IkReal x542=(cj0*r00);
IkReal x543=((2.0)*px);
IkReal x544=((0.0361)*cj1);
IkReal x545=(cj3*cj4);
IkReal x546=(cj1*r00);
IkReal x547=((0.04688229)*cj4);
IkReal x548=(cj0*r02);
IkReal x549=(cj1*py);
IkReal x550=((0.38)*px);
IkReal x551=(px*sj1);
IkReal x552=(r02*sj0);
IkReal x553=(pz*r01);
IkReal x554=((2.0)*sj1);
IkReal x555=((0.38)*r02);
IkReal x556=((0.38)*pz);
IkReal x557=(r02*sj1);
IkReal x558=(cj1*r02);
IkReal x559=(cj0*r01);
IkReal x560=((0.0715294)*cj4);
IkReal x561=(r00*sj1);
IkReal x562=((0.0361)*sj1);
IkReal x563=(py*r00);
IkReal x564=((0.2573)*cj3*sj4);
IkReal x565=((0.139)*x534);
IkReal x566=(cj0*pz*sj1);
IkReal x567=(sj3*x534);
IkReal x568=(pz*r00*sj0);
IkReal x569=(r02*x535);
IkReal x570=((0.139)*x533);
IkReal x571=((0.2573)*x533);
IkReal x572=(sj1*x537);
IkReal x573=(r02*x536);
IkReal x574=(sj3*x533);
evalcond[0]=(((sj1*x542))+((sj1*x538))+(((-1.0)*r02*x539))+((cj4*x567))+((x533*x545)));
evalcond[1]=((((-1.0)*x539*x542))+(((-1.0)*x538*x539))+(((-1.0)*r02*x540))+(((-1.0)*x534*x545))+((cj4*x574)));
evalcond[2]=(((cj0*x551))+((sj1*x541))+(((-1.0)*sj3*x571))+(((0.2573)*cj3*x534))+x565+(((-1.0)*pz*x539)));
evalcond[3]=((0.19)+(((-1.0)*cj0*px*x539))+(((-1.0)*x539*x541))+((cj3*x571))+(((0.2573)*x567))+(((-1.0)*pz*x540))+x570);
evalcond[4]=(((x534*x564))+(((-1.0)*sj3*sj4*x571))+((pz*sj0*x546))+(((-1.0)*px*x539*x552))+((sj4*x565))+((r01*x551))+(((-1.0)*x540*x563))+((x548*x549))+(((-1.0)*cj0*x539*x553)));
evalcond[5]=((((-1.0)*x539*x563))+(((-1.0)*x533*x564))+(((-1.0)*py*x540*x548))+((x551*x552))+(((-1.0)*sj4*x570))+(((0.19)*r00*sj0))+(((-0.2573)*sj4*x567))+((cj1*px*r01))+(((-1.0)*x540*x568))+((cj0*sj1*x553))+(((-0.19)*x559)));
evalcond[6]=(((x543*x549*x559))+(((-1.0)*x540*x573))+((cj1*x536*x538))+((x541*x543*x546))+(((2.0)*pz*x541*x558))+((x542*x544))+(((-1.0)*x537*x538*x539))+(((-1.0)*r00*x550))+((cj1*pz*x543*x548))+(((-1.0)*x535*x538*x539))+(((-1.0)*x537*x539*x542))+(((-0.38)*py*r01))+((py*x553*x554))+((x547*x574))+(((-1.0)*x536*x539*x542))+((x537*x557))+((pz*x543*x561))+(((-0.08552429)*x534*x545))+(((0.0361)*x557))+(((-1.0)*x534*x560))+((x538*x544))+(((-1.0)*pz*x555))+(((-1.0)*x540*x569))+((cj1*x535*x542)));
evalcond[7]=(((x548*x550))+(((0.08552429)*x533*x545))+(((-1.0)*pz*sj1*x543*x548))+(((-1.0)*x539*x569))+((x541*x555))+((x538*x572))+((sj1*x536*x542))+((x533*x560))+((pz*x543*x546))+(((-1.0)*x539*x573))+(((-1.0)*pz*r02*x541*x554))+(((-1.0)*py*sj1*x543*x559))+(((-1.0)*x536*x538*x540))+(((-1.0)*x538*x556))+(((-1.0)*x541*x543*x561))+((x542*x562))+(((-1.0)*r02*x544))+((x538*x562))+(((2.0)*x549*x553))+(((-1.0)*x535*x540*x542))+((x537*x558))+((sj1*x535*x538))+(((-1.0)*x542*x556))+((x542*x572))+((x547*x567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x575=(cj0*r00);
IkReal x576=(cj1*sj3);
IkReal x577=(sj1*sj3);
IkReal x578=(cj1*cj3);
IkReal x579=(r01*sj0);
IkReal x580=((1.0)*cj3*sj1);
IkReal x581=((1.0)*cj3*x579);
CheckValue<IkReal> x582=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x582.valid){
continue;
}
CheckValue<IkReal> x583 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x580))+((r02*x576))+(((-1.0)*x575*x578))+(((-1.0)*x575*x577))+(((-1.0)*x577*x579))+(((-1.0)*x578*x579)))),(((x576*x579))+((r02*x578))+((r02*x577))+(((-1.0)*x579*x580))+((x575*x576))+(((-1.0)*x575*x580))),IKFAST_ATAN2_MAGTHRESH);
if(!x583.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x582.value)))+(x583.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x584=IKcos(j2);
IkReal x585=IKsin(j2);
IkReal x586=px*px;
IkReal x587=py*py;
IkReal x588=pz*pz;
IkReal x589=(r01*sj0);
IkReal x590=((1.0)*cj1);
IkReal x591=((1.0)*sj1);
IkReal x592=(py*sj0);
IkReal x593=(cj0*r00);
IkReal x594=((2.0)*px);
IkReal x595=((0.0361)*cj1);
IkReal x596=(cj3*cj4);
IkReal x597=(cj1*r00);
IkReal x598=((0.04688229)*cj4);
IkReal x599=(cj0*r02);
IkReal x600=(cj1*py);
IkReal x601=((0.38)*px);
IkReal x602=(px*sj1);
IkReal x603=(r02*sj0);
IkReal x604=(pz*r01);
IkReal x605=((2.0)*sj1);
IkReal x606=((0.38)*r02);
IkReal x607=((0.38)*pz);
IkReal x608=(r02*sj1);
IkReal x609=(cj1*r02);
IkReal x610=(cj0*r01);
IkReal x611=((0.0715294)*cj4);
IkReal x612=(r00*sj1);
IkReal x613=((0.0361)*sj1);
IkReal x614=(py*r00);
IkReal x615=((0.2573)*cj3*sj4);
IkReal x616=((0.139)*x585);
IkReal x617=(cj0*pz*sj1);
IkReal x618=(sj3*x585);
IkReal x619=(pz*r00*sj0);
IkReal x620=(r02*x586);
IkReal x621=((0.139)*x584);
IkReal x622=((0.2573)*x584);
IkReal x623=(sj1*x588);
IkReal x624=(r02*x587);
IkReal x625=(sj3*x584);
evalcond[0]=(((sj1*x589))+((x584*x596))+(((-1.0)*r02*x590))+((sj1*x593))+((cj4*x618)));
evalcond[1]=((((-1.0)*x589*x590))+((cj4*x625))+(((-1.0)*x590*x593))+(((-1.0)*x585*x596))+(((-1.0)*r02*x591)));
evalcond[2]=((((0.2573)*cj3*x585))+(((-1.0)*pz*x590))+x616+((sj1*x592))+(((-1.0)*sj3*x622))+((cj0*x602)));
evalcond[3]=((0.19)+((cj3*x622))+(((-1.0)*pz*x591))+(((-1.0)*x590*x592))+(((0.2573)*x618))+x621+(((-1.0)*cj0*px*x590)));
evalcond[4]=(((sj4*x616))+((pz*sj0*x597))+(((-1.0)*cj0*x590*x604))+(((-1.0)*sj3*sj4*x622))+(((-1.0)*px*x590*x603))+((x585*x615))+((x599*x600))+(((-1.0)*x591*x614))+((r01*x602)));
evalcond[5]=((((-0.2573)*sj4*x618))+(((-1.0)*x584*x615))+(((-1.0)*x590*x614))+((cj0*sj1*x604))+(((0.19)*r00*sj0))+((x602*x603))+(((-1.0)*x591*x619))+(((-0.19)*x610))+((cj1*px*r01))+(((-1.0)*py*x591*x599))+(((-1.0)*sj4*x621)));
evalcond[6]=(((x594*x600*x610))+(((-1.0)*x587*x590*x593))+(((-1.0)*r00*x601))+(((2.0)*pz*x592*x609))+((cj1*x586*x593))+(((-1.0)*x585*x611))+(((-0.38)*py*r01))+(((-1.0)*x591*x620))+(((-1.0)*x591*x624))+(((-0.08552429)*x585*x596))+(((-1.0)*x588*x590*x593))+(((-1.0)*x586*x589*x590))+((cj1*x587*x589))+((x598*x625))+((x588*x608))+(((-1.0)*x588*x589*x590))+((py*x604*x605))+((pz*x594*x612))+((x592*x594*x597))+((cj1*pz*x594*x599))+(((-1.0)*pz*x606))+((x589*x595))+((x593*x595))+(((0.0361)*x608)));
evalcond[7]=(((x589*x623))+(((-1.0)*x587*x589*x591))+((sj1*x586*x589))+((x584*x611))+(((-1.0)*x593*x607))+((x589*x613))+((x598*x618))+((pz*x594*x597))+((x593*x613))+(((-1.0)*x592*x594*x612))+(((-1.0)*pz*r02*x592*x605))+(((-1.0)*pz*sj1*x594*x599))+(((-1.0)*x590*x620))+(((-1.0)*x590*x624))+((x592*x606))+(((-1.0)*x589*x607))+(((2.0)*x600*x604))+(((0.08552429)*x584*x596))+((x593*x623))+(((-1.0)*py*sj1*x594*x610))+((x588*x609))+(((-1.0)*r02*x595))+((x599*x601))+((sj1*x587*x593))+(((-1.0)*x586*x591*x593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x626=(cj1*sj0);
IkReal x627=(cj0*cj1);
CheckValue<IkReal> x628=IKPowWithIntegerCheck(cj4,-1);
if(!x628.valid){
continue;
}
if( IKabs(((0.00719424460431655)*(x628.value)*(((((1000.0)*pz*r02))+(((-190.0)*r00*x627))+(((1000.0)*py*r01))+(((-190.0)*r01*x626))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.690964694237614)+(((13.9802654572805)*(px*px)))+(((13.9802654572805)*(py*py)))+(((-5.31250087376659)*pz*sj1))+(((-5.31250087376659)*px*x627))+(((-5.31250087376659)*py*x626))+(((13.9802654572805)*(pz*pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00719424460431655)*(x628.value)*(((((1000.0)*pz*r02))+(((-190.0)*r00*x627))+(((1000.0)*py*r01))+(((-190.0)*r01*x626))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00))))))+IKsqr(((-0.690964694237614)+(((13.9802654572805)*(px*px)))+(((13.9802654572805)*(py*py)))+(((-5.31250087376659)*pz*sj1))+(((-5.31250087376659)*px*x627))+(((-5.31250087376659)*py*x626))+(((13.9802654572805)*(pz*pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00719424460431655)*(x628.value)*(((((1000.0)*pz*r02))+(((-190.0)*r00*x627))+(((1000.0)*py*r01))+(((-190.0)*r01*x626))+(((-190.0)*r02*sj1))+(((1000.0)*px*r00))))), ((-0.690964694237614)+(((13.9802654572805)*(px*px)))+(((13.9802654572805)*(py*py)))+(((-5.31250087376659)*pz*sj1))+(((-5.31250087376659)*px*x627))+(((-5.31250087376659)*py*x626))+(((13.9802654572805)*(pz*pz)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x629=IKcos(j3);
IkReal x630=px*px;
IkReal x631=pz*pz;
IkReal x632=py*py;
IkReal x633=(r01*sj0);
IkReal x634=((2.0)*py);
IkReal x635=(r00*sj0);
IkReal x636=((0.19)*cj1);
IkReal x637=(px*sj0);
IkReal x638=(py*sj0);
IkReal x639=((1.0)*pz);
IkReal x640=(cj0*r01);
IkReal x641=((0.38)*cj1);
IkReal x642=((0.19)*sj1);
IkReal x643=((0.139)*cj4);
IkReal x644=(cj0*r00);
IkReal x645=(cj0*px);
IkReal x646=(pz*r02);
IkReal x647=((0.38)*r02*sj1);
IkReal x648=((0.0715294)*x629);
IkReal x649=((0.38)*pz*sj1);
IkReal x650=((1.0)*x631);
IkReal x651=((1.0)*x632);
evalcond[0]=(((x636*x644))+(((-1.0)*px*r00))+(((-1.0)*r02*x639))+((r02*x642))+(((-1.0)*py*r01))+((x643*(IKsin(j3))))+((x633*x636)));
evalcond[1]=((0.04942429)+((x638*x641))+(((-1.0)*x650))+(((-1.0)*x651))+((x641*x645))+x649+x648+(((-1.0)*x630)));
evalcond[2]=(((r02*x638))+(((-1.0)*x629*x643))+(((-1.0)*x633*x639))+(((-1.0)*r02*x636))+(((-1.0)*x639*x644))+((r02*x645))+((x633*x642))+(((-0.2573)*cj4))+((x642*x644)));
evalcond[3]=(((x635*x649))+(((-1.0)*sj4*x648))+(((-1.0)*x640*x651))+(((-0.0361)*x635))+(((-1.0)*px*x634*x644))+(((-1.0)*x640*x649))+((cj0*py*x647))+((py*r00*x641))+(((-1.0)*x635*x651))+(((-1.0)*x635*x650))+(((-0.08552429)*sj4))+(((0.0361)*x640))+((x630*x640))+((x631*x640))+(((-1.0)*cj0*x634*x646))+(((-1.0)*x637*x647))+(((2.0)*x637*x646))+(((-1.0)*px*r01*x641))+((x630*x635))+((px*x633*x634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x652=(cj3*cj4);
j2eval[0]=((((1.85107913669065)*cj4))+x652);
j2eval[1]=IKsign(((((1390.0)*x652))+(((2573.0)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
bool bgotonextstatement = true;
do
{
IkReal x653=px*px;
IkReal x654=pz*pz;
IkReal x655=py*py;
IkReal x656=((0.0715294)*cj3);
IkReal x657=(r01*sj0);
IkReal x658=((0.19)*cj1);
IkReal x659=(py*r02);
IkReal x660=(cj0*sj1);
IkReal x661=((1.0)*cj1);
IkReal x662=((1.0)*sj1);
IkReal x663=(cj0*r00);
IkReal x664=((2.0)*pz);
IkReal x665=(px*r02);
IkReal x666=(py*sj1);
IkReal x667=(cj0*r01);
IkReal x668=((1.0)*sj0);
IkReal x669=((0.0361)*cj1);
IkReal x670=(cj1*px);
IkReal x671=(r00*sj0);
IkReal x672=((2.0)*py);
IkReal x673=((0.38)*cj0);
IkReal x674=((0.38)*r01);
IkReal x675=((1.0)*pz);
IkReal x676=((0.38)*sj0);
IkReal x677=(cj1*py);
IkReal x678=((0.38)*pz);
IkReal x679=((0.0361)*sj1);
IkReal x680=(px*r00);
IkReal x681=((0.19)*sj1);
IkReal x682=(r00*x655);
IkReal x683=(r02*x654);
IkReal x684=(r02*x653);
IkReal x685=((1.0)*x655);
IkReal x686=(r00*x654);
IkReal x687=(r02*x655);
IkReal x688=((1.0)*x653);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x668))+((cj0*py)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x668))+x667);
evalcond[3]=(((r00*x660))+((sj1*x657))+(((-1.0)*r02*x661)));
evalcond[4]=((((-1.0)*r02*x675))+((x657*x658))+(((-1.0)*py*r01))+((x658*x663))+(((-1.0)*x680))+((r02*x681)));
evalcond[5]=((((-1.0)*x661*x663))+(((-1.0)*x657*x661))+(((-1.0)*r02*x662)));
evalcond[6]=((0.04942429)+(((-1.0)*x688))+(((-1.0)*x685))+(((-1.0)*x654))+((x670*x673))+((x676*x677))+x656+((sj1*x678)));
evalcond[7]=(((cj0*x665))+(((-1.0)*x657*x675))+(((0.19)*r00*x660))+(((-1.0)*x663*x675))+((sj0*x659))+(((-1.0)*r02*x658))+((x657*x681)));
evalcond[8]=((-0.08552429)+(((0.38)*r00*x677))+(((0.0361)*x667))+(((-1.0)*x667*x685))+(((-0.0361)*x671))+(((-1.0)*x668*x682))+(((-1.0)*x668*x686))+(((0.38)*x659*x660))+(((-1.0)*pz*x660*x674))+(((-1.0)*sj1*x665*x676))+(((-1.0)*x656))+(((-1.0)*x670*x674))+((sj1*x671*x678))+((x654*x667))+(((-1.0)*cj0*x659*x664))+(((-1.0)*px*x663*x672))+((x653*x667))+((x653*x671))+((px*x657*x672))+((sj0*x664*x665)));
evalcond[9]=((((-1.0)*r02*x678))+((r02*x679))+(((-1.0)*x655*x661*x663))+((sj1*x664*x680))+((cj0*cj1*x664*x665))+((x657*x669))+((x663*x669))+(((-1.0)*x662*x684))+(((-1.0)*x662*x687))+((cj1*x655*x657))+(((-0.38)*x680))+((cj1*sj0*x659*x664))+(((-1.0)*py*x674))+((x670*x671*x672))+((x667*x670*x672))+((r01*x664*x666))+(((-1.0)*x654*x657*x661))+((sj1*x683))+(((-1.0)*x654*x661*x663))+(((-1.0)*x653*x657*x661))+((cj1*x653*x663)));
evalcond[10]=((((-1.0)*x657*x678))+((cj1*x683))+((x665*x673))+(((-1.0)*sj0*sj1*x659*x664))+(((-2.0)*px*x666*x671))+(((-1.0)*x663*x678))+(((-1.0)*x660*x664*x665))+((x659*x676))+(((-1.0)*px*r01*x660*x672))+(((0.0361)*r00*x660))+((sj1*x654*x657))+(((-1.0)*x661*x687))+(((-1.0)*x661*x684))+((sj1*x653*x657))+(((-1.0)*r00*x660*x688))+((x657*x679))+((r00*x664*x670))+(((-1.0)*r02*x669))+((x660*x682))+((x660*x686))+(((-1.0)*x655*x657*x662))+((r01*x664*x677)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.19565227724544)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-8552429.0)+(((-7152940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x689=((25730000.0)*cj1);
IkReal x690=(cj3*pz);
IkReal x691=(py*sj0);
IkReal x692=((25730000.0)*sj1);
IkReal x693=(pz*sj3);
IkReal x694=(cj0*px);
IkReal x695=((13900000.0)*cj1);
IkReal x696=((13900000.0)*sj1);
IkReal x697=(sj1*x694);
CheckValue<IkReal> x698=IKPowWithIntegerCheck(IKsign(((-8552429.0)+(((-7152940.0)*cj3)))),-1);
if(!x698.valid){
continue;
}
CheckValue<IkReal> x699 = IKatan2WithCheck(IkReal((((cj3*x692*x694))+((x694*x696))+((x691*x696))+((cj3*x691*x692))+(((-1.0)*x692*x693))+(((-1.0)*pz*x695))+(((-1.0)*sj3*x689*x691))+(((-1.0)*sj3*x689*x694))+(((4888700.0)*sj3))+(((-1.0)*x689*x690)))),((2641000.0)+((x689*x693))+(((-1.0)*sj3*x692*x694))+(((-1.0)*pz*x696))+(((-1.0)*x694*x695))+(((-1.0)*x690*x692))+(((-1.0)*x691*x695))+(((4888700.0)*cj3))+(((-1.0)*cj3*x689*x694))+(((-1.0)*cj3*x689*x691))+(((-1.0)*sj3*x691*x692))),IKFAST_ATAN2_MAGTHRESH);
if(!x699.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x698.value)))+(x699.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x700=IKsin(j2);
IkReal x701=IKcos(j2);
IkReal x702=((0.2573)*sj3);
IkReal x703=(px*sj1);
IkReal x704=((0.2573)*cj3);
IkReal x705=(py*sj1);
IkReal x706=((1.0)*r00);
IkReal x707=(cj1*sj0);
IkReal x708=((1.0)*px);
IkReal x709=((1.0)*pz);
IkReal x710=(cj0*r01);
IkReal x711=(pz*sj1);
IkReal x712=(cj0*cj1);
IkReal x713=((0.139)*x700);
IkReal x714=((0.139)*x701);
IkReal x715=(x700*x704);
IkReal x716=(x701*x702);
IkReal x717=(x700*x702);
IkReal x718=(x701*x704);
IkReal x719=(x713+x715);
IkReal x720=(x718+x714+x717);
evalcond[0]=(((cj0*x703))+(((-1.0)*cj1*x709))+(((-1.0)*x716))+((sj0*x705))+x719);
evalcond[1]=((0.19)+(((-1.0)*py*x707))+(((-1.0)*x708*x712))+x720+(((-1.0)*sj1*x709)));
evalcond[2]=((((-1.0)*cj1*x709*x710))+((r01*x703))+((py*r02*x712))+((pz*r00*x707))+(((-1.0)*r02*x707*x708))+(((-1.0)*x716))+(((-1.0)*x705*x706))+x719);
evalcond[3]=((((-0.19)*x710))+((r02*sj0*x703))+(((-1.0)*cj1*py*x706))+(((-1.0)*sj0*x706*x711))+(((-1.0)*x720))+((x710*x711))+(((-1.0)*cj0*r02*x705))+(((0.19)*r00*sj0))+((cj1*px*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x721=px*px;
IkReal x722=pz*pz;
IkReal x723=((0.0715294)*cj3);
IkReal x724=py*py;
IkReal x725=(r01*sj0);
IkReal x726=((0.19)*cj1);
IkReal x727=(py*r02);
IkReal x728=(cj0*sj1);
IkReal x729=((1.0)*cj1);
IkReal x730=((1.0)*sj1);
IkReal x731=(cj0*r00);
IkReal x732=((2.0)*pz);
IkReal x733=(px*r02);
IkReal x734=(py*sj1);
IkReal x735=(cj0*r01);
IkReal x736=((1.0)*sj0);
IkReal x737=((0.0361)*cj1);
IkReal x738=(cj1*px);
IkReal x739=(r00*sj0);
IkReal x740=((2.0)*py);
IkReal x741=((0.38)*cj0);
IkReal x742=((0.38)*r01);
IkReal x743=((1.0)*pz);
IkReal x744=((0.38)*sj0);
IkReal x745=(cj1*py);
IkReal x746=((0.38)*pz);
IkReal x747=((0.0361)*sj1);
IkReal x748=(px*r00);
IkReal x749=((0.19)*sj1);
IkReal x750=(r00*x724);
IkReal x751=(r02*x722);
IkReal x752=(r02*x721);
IkReal x753=((1.0)*x724);
IkReal x754=(r00*x722);
IkReal x755=(r02*x724);
IkReal x756=((1.0)*x721);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x736))+((cj0*py)));
evalcond[2]=((1.0)+x735+(((-1.0)*r00*x736)));
evalcond[3]=((((-1.0)*r02*x729))+((r00*x728))+((sj1*x725)));
evalcond[4]=(((r02*x749))+((x726*x731))+(((-1.0)*r02*x743))+((x725*x726))+(((-1.0)*x748))+(((-1.0)*py*r01)));
evalcond[5]=((((-1.0)*r02*x730))+(((-1.0)*x725*x729))+(((-1.0)*x729*x731)));
evalcond[6]=((0.04942429)+((x738*x741))+((x744*x745))+(((-1.0)*x722))+((sj1*x746))+x723+(((-1.0)*x753))+(((-1.0)*x756)));
evalcond[7]=((((-1.0)*r02*x726))+((x725*x749))+(((-1.0)*x731*x743))+((cj0*x733))+(((-1.0)*x725*x743))+(((0.19)*r00*x728))+((sj0*x727)));
evalcond[8]=((0.08552429)+(((-1.0)*cj0*x727*x732))+((sj0*x732*x733))+((x721*x739))+((x721*x735))+(((-0.0361)*x739))+(((-1.0)*sj1*x733*x744))+(((0.38)*x727*x728))+((x722*x735))+(((-1.0)*x738*x742))+(((-1.0)*pz*x728*x742))+x723+((px*x725*x740))+((sj1*x739*x746))+(((0.38)*r00*x745))+(((-1.0)*px*x731*x740))+(((-1.0)*x736*x754))+(((-1.0)*x736*x750))+(((-1.0)*x735*x753))+(((0.0361)*x735)));
evalcond[9]=(((r02*x747))+((x738*x739*x740))+((x731*x737))+(((-1.0)*x724*x729*x731))+(((-1.0)*x730*x755))+(((-1.0)*x730*x752))+((cj1*x721*x731))+((cj1*x724*x725))+(((-1.0)*x722*x729*x731))+((x735*x738*x740))+((sj1*x751))+((r01*x732*x734))+((cj1*sj0*x727*x732))+(((-1.0)*x721*x725*x729))+(((-1.0)*py*x742))+(((-1.0)*r02*x746))+(((-0.38)*x748))+((cj0*cj1*x732*x733))+((sj1*x732*x748))+((x725*x737))+(((-1.0)*x722*x725*x729)));
evalcond[10]=(((cj1*x751))+((r01*x732*x745))+(((-1.0)*r00*x728*x756))+(((-1.0)*x729*x752))+(((-1.0)*x729*x755))+(((-1.0)*r02*x737))+(((-2.0)*px*x734*x739))+(((-1.0)*x724*x725*x730))+((x725*x747))+(((-1.0)*x731*x746))+(((0.0361)*r00*x728))+(((-1.0)*px*r01*x728*x740))+((sj1*x722*x725))+(((-1.0)*sj0*sj1*x727*x732))+(((-1.0)*x725*x746))+((sj1*x721*x725))+((x733*x741))+((r00*x732*x738))+((x727*x744))+(((-1.0)*x728*x732*x733))+((x728*x750))+((x728*x754)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.19565227724544)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-8552429.0)+(((-7152940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x757=((25730000.0)*cj1);
IkReal x758=(cj3*pz);
IkReal x759=(py*sj0);
IkReal x760=((25730000.0)*sj1);
IkReal x761=(pz*sj3);
IkReal x762=(cj0*px);
IkReal x763=((13900000.0)*cj1);
IkReal x764=((13900000.0)*sj1);
IkReal x765=(sj1*x762);
CheckValue<IkReal> x766 = IKatan2WithCheck(IkReal((((x759*x764))+((cj3*x760*x762))+((x762*x764))+((cj3*x759*x760))+(((4888700.0)*sj3))+(((-1.0)*x760*x761))+(((-1.0)*x757*x758))+(((-1.0)*sj3*x757*x759))+(((-1.0)*pz*x763))+(((-1.0)*sj3*x757*x762)))),((2641000.0)+((x757*x761))+(((-1.0)*x758*x760))+(((-1.0)*x762*x763))+(((-1.0)*sj3*x759*x760))+(((-1.0)*sj3*x760*x762))+(((-1.0)*cj3*x757*x762))+(((-1.0)*cj3*x757*x759))+(((4888700.0)*cj3))+(((-1.0)*x759*x763))+(((-1.0)*pz*x764))),IKFAST_ATAN2_MAGTHRESH);
if(!x766.valid){
continue;
}
CheckValue<IkReal> x767=IKPowWithIntegerCheck(IKsign(((-8552429.0)+(((-7152940.0)*cj3)))),-1);
if(!x767.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x766.value)+(((1.5707963267949)*(x767.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x768=IKsin(j2);
IkReal x769=IKcos(j2);
IkReal x770=((0.2573)*sj3);
IkReal x771=(px*sj1);
IkReal x772=((0.2573)*cj3);
IkReal x773=(py*sj1);
IkReal x774=((1.0)*r00);
IkReal x775=(cj1*sj0);
IkReal x776=((1.0)*px);
IkReal x777=((1.0)*pz);
IkReal x778=(cj0*r01);
IkReal x779=(pz*sj1);
IkReal x780=(cj0*cj1);
IkReal x781=((0.139)*x768);
IkReal x782=((0.139)*x769);
IkReal x783=(x769*x770);
IkReal x784=(x768*x772);
IkReal x785=(x768*x770);
IkReal x786=(x769*x772);
IkReal x787=(x781+x784);
IkReal x788=(x782+x786+x785);
evalcond[0]=((((-1.0)*x783))+((sj0*x773))+x787+((cj0*x771))+(((-1.0)*cj1*x777)));
evalcond[1]=((0.19)+(((-1.0)*py*x775))+(((-1.0)*x776*x780))+x788+(((-1.0)*sj1*x777)));
evalcond[2]=(((py*r02*x780))+(((-1.0)*x787))+((pz*r00*x775))+(((-1.0)*r02*x775*x776))+((r01*x771))+x783+(((-1.0)*x773*x774))+(((-1.0)*cj1*x777*x778)));
evalcond[3]=((((-1.0)*sj0*x774*x779))+(((-1.0)*cj0*r02*x773))+(((-0.19)*x778))+(((-1.0)*cj1*py*x774))+((x778*x779))+(((0.19)*r00*sj0))+((r02*sj0*x771))+x788+((cj1*px*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x789=px*px;
IkReal x790=pz*pz;
IkReal x791=py*py;
IkReal x792=(r01*sj0);
IkReal x793=((2.0)*py);
IkReal x794=(r00*sj0);
IkReal x795=((0.19)*cj1);
IkReal x796=(cj0*py);
IkReal x797=(px*sj0);
IkReal x798=(py*sj0);
IkReal x799=((1.0)*pz);
IkReal x800=((0.38)*r01);
IkReal x801=(cj1*px);
IkReal x802=(pz*sj1);
IkReal x803=((0.38)*cj1);
IkReal x804=(cj0*r01);
IkReal x805=((0.19)*sj1);
IkReal x806=(cj0*r00);
IkReal x807=(cj0*r02);
IkReal x808=((0.38)*r02*sj1);
IkReal x809=((1.0)*x790);
IkReal x810=((1.0)*x791);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(x796+(((-1.0)*x797)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*x794))+x804);
evalcond[3]=((((-1.0)*px*r00))+((x795*x806))+((r02*x805))+((x792*x795))+(((-1.0)*py*r01))+(((-1.0)*r02*x799)));
evalcond[4]=((0.12095369)+(((0.38)*x802))+(((-1.0)*x810))+((x798*x803))+(((0.38)*cj0*x801))+(((-1.0)*x789))+(((-1.0)*x809)));
evalcond[5]=((((-1.0)*x792*x799))+(((-1.0)*x799*x806))+(((-0.3963)*cj4))+((x805*x806))+((r02*x798))+((px*x807))+((x792*x805))+(((-1.0)*r02*x795)));
evalcond[6]=((((0.38)*x794*x802))+(((-0.15705369)*sj4))+((x790*x804))+(((-1.0)*px*x793*x806))+(((-1.0)*x794*x810))+(((-1.0)*cj0*x800*x802))+(((2.0)*pz*r02*x797))+(((-1.0)*x797*x808))+(((-1.0)*pz*x793*x807))+((x789*x804))+(((-1.0)*x800*x801))+((py*r00*x803))+(((-1.0)*x804*x810))+(((-1.0)*x794*x809))+((px*x792*x793))+(((0.0361)*x804))+((x789*x794))+(((-0.0361)*x794))+((x796*x808)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x811=((2.52334090335604)*sj1);
IkReal x812=(cj0*px);
IkReal x813=((2.52334090335604)*cj1);
IkReal x814=(py*sj0);
if( IKabs((((pz*x813))+(((-1.0)*x811*x814))+(((-1.0)*x811*x812)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.479434771637648)+((pz*x811))+((x812*x813))+((x813*x814)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((pz*x813))+(((-1.0)*x811*x814))+(((-1.0)*x811*x812))))+IKsqr(((-0.479434771637648)+((pz*x811))+((x812*x813))+((x813*x814))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((pz*x813))+(((-1.0)*x811*x814))+(((-1.0)*x811*x812))), ((-0.479434771637648)+((pz*x811))+((x812*x813))+((x813*x814))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x815=IKsin(j2);
IkReal x816=IKcos(j2);
IkReal x817=px*px;
IkReal x818=py*py;
IkReal x819=pz*pz;
IkReal x820=(px*sj1);
IkReal x821=((0.15705369)*cj4);
IkReal x822=(cj0*r00);
IkReal x823=(cj1*sj0);
IkReal x824=((1.0)*r01);
IkReal x825=(sj0*sj1);
IkReal x826=((1.0)*sj1);
IkReal x827=(py*r00);
IkReal x828=((1.0)*cj1);
IkReal x829=(px*r02);
IkReal x830=((2.0)*pz);
IkReal x831=(cj0*r02);
IkReal x832=((0.38)*pz);
IkReal x833=(r01*sj0);
IkReal x834=(r01*sj1);
IkReal x835=(cj0*pz);
IkReal x836=(pz*r00);
IkReal x837=((0.0361)*cj1);
IkReal x838=((0.0361)*r01);
IkReal x839=((0.38)*py);
IkReal x840=(r02*sj0);
IkReal x841=((0.0361)*sj1);
IkReal x842=(py*r01);
IkReal x843=((2.0)*cj0);
IkReal x844=(cj1*px);
IkReal x845=(sj1*x819);
IkReal x846=(r02*x818);
IkReal x847=(r02*x817);
IkReal x848=((0.3963)*x815);
IkReal x849=((0.3963)*x816);
IkReal x850=(py*r02*x830);
evalcond[0]=((((-1.0)*r02*x828))+((sj1*x822))+((r01*x825))+((cj4*x816)));
evalcond[1]=(((py*x825))+(((-1.0)*pz*x828))+((cj0*x820))+x848);
evalcond[2]=((((-1.0)*r02*x826))+(((-1.0)*x822*x828))+(((-1.0)*x823*x824))+(((-1.0)*cj4*x815)));
evalcond[3]=((0.19)+(((-1.0)*pz*x826))+(((-1.0)*cj0*px*x828))+x849+(((-1.0)*py*x823)));
evalcond[4]=((((-1.0)*cj1*x824*x835))+(((-1.0)*x823*x829))+((sj4*x848))+((r01*x820))+(((-1.0)*x826*x827))+((cj1*py*x831))+((x823*x836)));
evalcond[5]=(((x820*x840))+(((-1.0)*py*x826*x831))+(((-1.0)*x827*x828))+((r01*x844))+(((-0.19)*cj0*r01))+((x834*x835))+(((-1.0)*sj4*x849))+(((0.19)*r00*sj0))+(((-1.0)*x825*x836)));
evalcond[6]=(((r00*x820*x830))+(((-1.0)*x818*x822*x828))+(((-1.0)*x819*x822*x828))+((x823*x850))+(((-1.0)*x819*x823*x824))+(((-1.0)*r02*x832))+(((-1.0)*x826*x846))+(((-1.0)*x826*x847))+((r02*x845))+((r02*x841))+(((-1.0)*x817*x823*x824))+((cj0*cj1*x829*x830))+((cj1*x817*x822))+(((-1.0)*x815*x821))+((x822*x837))+((x823*x838))+((r01*x818*x823))+(((-1.0)*r01*x839))+((py*x830*x834))+(((2.0)*px*x823*x827))+((x842*x843*x844))+(((-0.38)*px*r00)));
evalcond[7]=(((sj1*x818*x822))+(((-1.0)*x832*x833))+(((-1.0)*x828*x847))+(((-1.0)*x828*x846))+(((-1.0)*x817*x822*x826))+(((-1.0)*r02*x837))+((r00*x830*x844))+((r01*x817*x825))+((x839*x840))+(((-1.0)*x825*x850))+(((-1.0)*x822*x832))+(((-1.0)*x818*x824*x825))+((x816*x821))+(((-1.0)*x820*x842*x843))+(((-2.0)*sj0*x820*x827))+((cj1*x830*x842))+((x822*x841))+((x822*x845))+(((-1.0)*x820*x830*x831))+((r01*x819*x825))+(((0.38)*cj0*x829))+((x825*x838))+((cj1*r02*x819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x851=px*px;
IkReal x852=pz*pz;
IkReal x853=py*py;
IkReal x854=(r01*sj0);
IkReal x855=((2.0)*py);
IkReal x856=(r00*sj0);
IkReal x857=((0.19)*cj1);
IkReal x858=(cj0*py);
IkReal x859=(px*sj0);
IkReal x860=(py*sj0);
IkReal x861=((1.0)*pz);
IkReal x862=((0.38)*r01);
IkReal x863=(cj1*px);
IkReal x864=(pz*sj1);
IkReal x865=((0.38)*cj1);
IkReal x866=(cj0*r01);
IkReal x867=((0.19)*sj1);
IkReal x868=(cj0*r00);
IkReal x869=(cj0*r02);
IkReal x870=((0.38)*r02*sj1);
IkReal x871=((1.0)*x852);
IkReal x872=((1.0)*x853);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x859))+x858);
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*x856))+x866);
evalcond[3]=((((-1.0)*px*r00))+((r02*x867))+((x854*x857))+(((-1.0)*r02*x861))+(((-1.0)*py*r01))+((x857*x868)));
evalcond[4]=((-0.02210511)+(((0.38)*x864))+(((-1.0)*x851))+(((0.38)*cj0*x863))+((x860*x865))+(((-1.0)*x872))+(((-1.0)*x871)));
evalcond[5]=((((-1.0)*x854*x861))+((x867*x868))+(((-0.1183)*cj4))+(((-1.0)*x861*x868))+(((-1.0)*r02*x857))+((r02*x860))+((px*x869))+((x854*x867)));
evalcond[6]=((((-1.0)*px*x855*x868))+(((2.0)*pz*r02*x859))+(((0.0361)*x866))+(((-1.0)*x866*x872))+(((-0.0361)*x856))+(((-1.0)*pz*x855*x869))+(((-1.0)*x862*x863))+((x851*x866))+((py*r00*x865))+((x858*x870))+(((-1.0)*x856*x872))+(((-1.0)*x856*x871))+((x851*x856))+(((-1.0)*cj0*x862*x864))+((px*x854*x855))+(((-1.0)*x859*x870))+(((-0.01399489)*sj4))+((x852*x866))+(((0.38)*x856*x864)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x873=((8.4530853761623)*sj1);
IkReal x874=(cj0*px);
IkReal x875=((8.4530853761623)*cj1);
IkReal x876=(py*sj0);
if( IKabs((((x873*x876))+((x873*x874))+(((-1.0)*pz*x875)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.60608622147084)+(((-1.0)*pz*x873))+(((-1.0)*x875*x876))+(((-1.0)*x874*x875)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x873*x876))+((x873*x874))+(((-1.0)*pz*x875))))+IKsqr(((1.60608622147084)+(((-1.0)*pz*x873))+(((-1.0)*x875*x876))+(((-1.0)*x874*x875))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x873*x876))+((x873*x874))+(((-1.0)*pz*x875))), ((1.60608622147084)+(((-1.0)*pz*x873))+(((-1.0)*x875*x876))+(((-1.0)*x874*x875))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x877=IKsin(j2);
IkReal x878=IKcos(j2);
IkReal x879=px*px;
IkReal x880=py*py;
IkReal x881=pz*pz;
IkReal x882=(cj0*sj1);
IkReal x883=(r01*sj0);
IkReal x884=((0.1183)*sj4);
IkReal x885=((1.0)*cj1);
IkReal x886=((0.01399489)*cj4);
IkReal x887=(py*sj0);
IkReal x888=((1.0)*sj1);
IkReal x889=(py*r00);
IkReal x890=(px*r02);
IkReal x891=(r01*sj1);
IkReal x892=((2.0)*py);
IkReal x893=(pz*r00);
IkReal x894=((0.38)*cj0);
IkReal x895=((0.38)*r02);
IkReal x896=(cj0*r00);
IkReal x897=((0.0361)*cj1);
IkReal x898=((0.0361)*sj1);
IkReal x899=(pz*r01);
IkReal x900=(px*r01);
IkReal x901=(cj0*px);
IkReal x902=(cj0*cj1);
IkReal x903=(py*r02);
IkReal x904=(r00*x881);
IkReal x905=((2.0)*pz*r02);
IkReal x906=(r00*x880);
IkReal x907=((2.0)*px*r00);
IkReal x908=(r02*x880);
IkReal x909=(r02*x879);
IkReal x910=(r00*x879);
IkReal x911=(r02*x881);
evalcond[0]=((((-0.1183)*x877))+((sj1*x887))+((px*x882))+(((-1.0)*pz*x885)));
evalcond[1]=(((sj1*x883))+((r00*x882))+(((-1.0)*cj4*x878))+(((-1.0)*r02*x885)));
evalcond[2]=((((-1.0)*x883*x885))+((cj4*x877))+(((-1.0)*x885*x896))+(((-1.0)*r02*x888)));
evalcond[3]=((0.19)+(((-0.1183)*x878))+(((-1.0)*pz*x888))+(((-1.0)*x885*x901))+(((-1.0)*x885*x887)));
evalcond[4]=(((px*x891))+((x902*x903))+((cj1*sj0*x893))+(((-1.0)*x877*x884))+(((-1.0)*x888*x889))+(((-1.0)*cj0*x885*x899))+(((-1.0)*sj0*x885*x890)));
evalcond[5]=(((cj1*x900))+((x882*x899))+(((-1.0)*sj0*x888*x893))+(((-0.19)*cj0*r01))+((x878*x884))+(((0.19)*r00*sj0))+(((-1.0)*x882*x903))+(((-1.0)*x885*x889))+((sj0*sj1*x890)));
evalcond[6]=(((r02*x898))+(((-1.0)*x888*x908))+(((-1.0)*x888*x909))+(((2.0)*px*sj1*x893))+((x892*x900*x902))+((x896*x897))+((x877*x886))+(((-1.0)*pz*x895))+((x883*x897))+(((-0.38)*py*r01))+(((-1.0)*x881*x883*x885))+(((-1.0)*x880*x885*x896))+((cj1*x880*x883))+(((-1.0)*x879*x883*x885))+((pz*x891*x892))+((cj1*x887*x905))+((cj1*x887*x907))+((cj1*x879*x896))+(((2.0)*pz*x890*x902))+((sj1*x911))+(((-1.0)*x881*x885*x896))+(((-0.38)*px*r00)));
evalcond[7]=((((-1.0)*x882*x910))+(((-1.0)*sj1*x887*x907))+(((-1.0)*sj1*x887*x905))+(((-2.0)*pz*x882*x890))+((x883*x898))+((cj1*x892*x899))+((sj1*x879*x883))+(((0.0361)*r00*x882))+(((2.0)*cj1*px*x893))+((x882*x906))+((x882*x904))+((sj1*x881*x883))+(((-1.0)*x885*x908))+(((-1.0)*x885*x909))+(((-1.0)*x893*x894))+(((-1.0)*r02*x897))+((x890*x894))+(((-1.0)*x882*x892*x900))+(((-0.38)*pz*x883))+(((-1.0)*x880*x883*x888))+((cj1*x911))+((x887*x895))+(((-1.0)*x878*x886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x923=IKPowWithIntegerCheck(cj4,-1);
if(!x923.valid){
continue;
}
IkReal x912=x923.value;
IkReal x913=(cj1*pz);
IkReal x914=((10000.0)*cj4);
IkReal x915=((2573.0)*cj3);
IkReal x916=(r02*sj1);
IkReal x917=(cj3*x914);
IkReal x918=(py*sj0*sj1);
IkReal x919=(cj0*px*sj1);
IkReal x920=(cj0*cj1*r00);
IkReal x921=((-0.000719424460431655)*x912);
IkReal x922=(cj1*r01*sj0);
CheckValue<IkReal> x924=IKPowWithIntegerCheck(sj3,-1);
if(!x924.valid){
continue;
}
if( IKabs((x921*(((((-1.0)*x913*x914))+((x914*x919))+((x914*x918))+(((-2573.0)*x920))+(((-2573.0)*x922))+(((-2573.0)*x916)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x921*(x924.value)*(((((-1390.0)*x916))+((x917*x918))+((x917*x919))+(((-1.0)*x913*x917))+(((-1390.0)*x920))+(((-1390.0)*x922))+(((-1.0)*x915*x920))+(((-1.0)*x915*x922))+(((-1.0)*x915*x916)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x921*(((((-1.0)*x913*x914))+((x914*x919))+((x914*x918))+(((-2573.0)*x920))+(((-2573.0)*x922))+(((-2573.0)*x916))))))+IKsqr((x921*(x924.value)*(((((-1390.0)*x916))+((x917*x918))+((x917*x919))+(((-1.0)*x913*x917))+(((-1390.0)*x920))+(((-1390.0)*x922))+(((-1.0)*x915*x920))+(((-1.0)*x915*x922))+(((-1.0)*x915*x916))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x921*(((((-1.0)*x913*x914))+((x914*x919))+((x914*x918))+(((-2573.0)*x920))+(((-2573.0)*x922))+(((-2573.0)*x916))))), (x921*(x924.value)*(((((-1390.0)*x916))+((x917*x918))+((x917*x919))+(((-1.0)*x913*x917))+(((-1390.0)*x920))+(((-1390.0)*x922))+(((-1.0)*x915*x920))+(((-1.0)*x915*x922))+(((-1.0)*x915*x916))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x925=IKcos(j2);
IkReal x926=IKsin(j2);
IkReal x927=px*px;
IkReal x928=py*py;
IkReal x929=pz*pz;
IkReal x930=(r01*sj0);
IkReal x931=((1.0)*cj1);
IkReal x932=((1.0)*sj1);
IkReal x933=(py*sj0);
IkReal x934=(cj0*r00);
IkReal x935=((2.0)*px);
IkReal x936=((0.0361)*cj1);
IkReal x937=(cj3*cj4);
IkReal x938=(cj1*r00);
IkReal x939=((0.04688229)*cj4);
IkReal x940=(cj0*r02);
IkReal x941=(cj1*py);
IkReal x942=((0.38)*px);
IkReal x943=(px*sj1);
IkReal x944=(r02*sj0);
IkReal x945=(pz*r01);
IkReal x946=((2.0)*sj1);
IkReal x947=((0.38)*r02);
IkReal x948=((0.38)*pz);
IkReal x949=(r02*sj1);
IkReal x950=(cj1*r02);
IkReal x951=(cj0*r01);
IkReal x952=((0.0715294)*cj4);
IkReal x953=(r00*sj1);
IkReal x954=((0.0361)*sj1);
IkReal x955=(py*r00);
IkReal x956=((0.2573)*cj3*sj4);
IkReal x957=((0.139)*x926);
IkReal x958=(cj0*pz*sj1);
IkReal x959=(sj3*x926);
IkReal x960=(pz*r00*sj0);
IkReal x961=(r02*x927);
IkReal x962=((0.139)*x925);
IkReal x963=((0.2573)*x925);
IkReal x964=(sj1*x929);
IkReal x965=(r02*x928);
IkReal x966=(sj3*x925);
evalcond[0]=((((-1.0)*r02*x931))+((sj1*x930))+((sj1*x934))+((x925*x937))+((cj4*x959)));
evalcond[1]=((((-1.0)*x930*x931))+(((-1.0)*x931*x934))+(((-1.0)*r02*x932))+(((-1.0)*x926*x937))+((cj4*x966)));
evalcond[2]=(((cj0*x943))+((sj1*x933))+(((-1.0)*sj3*x963))+(((-1.0)*pz*x931))+(((0.2573)*cj3*x926))+x957);
evalcond[3]=((0.19)+(((-1.0)*cj0*px*x931))+(((-1.0)*x931*x933))+((cj3*x963))+(((-1.0)*pz*x932))+x962+(((0.2573)*x959)));
evalcond[4]=((((-1.0)*sj3*sj4*x963))+((sj4*x957))+(((-1.0)*cj0*x931*x945))+((x926*x956))+((r01*x943))+(((-1.0)*x932*x955))+((pz*sj0*x938))+((x940*x941))+(((-1.0)*px*x931*x944)));
evalcond[5]=((((-0.2573)*sj4*x959))+((x943*x944))+(((-1.0)*py*x932*x940))+(((-1.0)*x932*x960))+(((-1.0)*x925*x956))+(((-0.19)*x951))+(((0.19)*r00*sj0))+(((-1.0)*x931*x955))+((cj0*sj1*x945))+((cj1*px*r01))+(((-1.0)*sj4*x962)));
evalcond[6]=((((-1.0)*r00*x942))+(((-1.0)*pz*x947))+((x933*x935*x938))+((cj1*x927*x934))+((cj1*pz*x935*x940))+(((-0.38)*py*r01))+((x935*x941*x951))+((cj1*x928*x930))+((py*x945*x946))+(((0.0361)*x949))+((x930*x936))+(((-1.0)*x926*x952))+(((-1.0)*x928*x931*x934))+(((-1.0)*x932*x965))+(((-1.0)*x932*x961))+(((-0.08552429)*x926*x937))+((x939*x966))+((x929*x949))+((x934*x936))+(((-1.0)*x927*x930*x931))+(((2.0)*pz*x933*x950))+(((-1.0)*x929*x930*x931))+((pz*x935*x953))+(((-1.0)*x929*x931*x934)));
evalcond[7]=((((-1.0)*pz*sj1*x935*x940))+((x933*x947))+(((-1.0)*x927*x932*x934))+(((-1.0)*pz*r02*x933*x946))+((sj1*x928*x934))+(((-1.0)*r02*x936))+(((0.08552429)*x925*x937))+(((-1.0)*x933*x935*x953))+((sj1*x927*x930))+((x929*x950))+(((2.0)*x941*x945))+((x934*x964))+(((-1.0)*x928*x930*x932))+((x934*x954))+(((-1.0)*x931*x961))+(((-1.0)*x931*x965))+((x930*x954))+((x925*x952))+((x939*x959))+((x930*x964))+((x940*x942))+(((-1.0)*x930*x948))+(((-1.0)*py*sj1*x935*x951))+(((-1.0)*x934*x948))+((pz*x935*x938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x967=((10000.0)*cj4);
IkReal x968=(cj1*sj3);
IkReal x969=(sj0*sj1);
IkReal x970=((2573.0)*r02);
IkReal x971=(cj0*sj1);
IkReal x972=(cj1*cj3);
IkReal x973=((2573.0)*r01);
IkReal x974=((2573.0)*r00);
CheckValue<IkReal> x975=IKPowWithIntegerCheck(IKsign(((((1390.0)*cj3*cj4))+(((2573.0)*cj4)))),-1);
if(!x975.valid){
continue;
}
CheckValue<IkReal> x976 = IKatan2WithCheck(IkReal((((x968*x970))+(((-1.0)*cj3*px*x967*x971))+(((-1.0)*cj3*py*x967*x969))+(((-1.0)*sj3*x969*x973))+(((-1.0)*sj3*x971*x974))+((pz*x967*x972)))),((((-1.0)*cj3*x971*x974))+(((-1390.0)*r01*x969))+(((-1390.0)*r00*x971))+(((-1.0)*cj3*x969*x973))+(((1390.0)*cj1*r02))+((py*sj3*x967*x969))+(((-1.0)*pz*x967*x968))+((x970*x972))+((px*sj3*x967*x971))),IKFAST_ATAN2_MAGTHRESH);
if(!x976.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x975.value)))+(x976.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x977=IKcos(j2);
IkReal x978=IKsin(j2);
IkReal x979=px*px;
IkReal x980=py*py;
IkReal x981=pz*pz;
IkReal x982=(r01*sj0);
IkReal x983=((1.0)*cj1);
IkReal x984=((1.0)*sj1);
IkReal x985=(py*sj0);
IkReal x986=(cj0*r00);
IkReal x987=((2.0)*px);
IkReal x988=((0.0361)*cj1);
IkReal x989=(cj3*cj4);
IkReal x990=(cj1*r00);
IkReal x991=((0.04688229)*cj4);
IkReal x992=(cj0*r02);
IkReal x993=(cj1*py);
IkReal x994=((0.38)*px);
IkReal x995=(px*sj1);
IkReal x996=(r02*sj0);
IkReal x997=(pz*r01);
IkReal x998=((2.0)*sj1);
IkReal x999=((0.38)*r02);
IkReal x1000=((0.38)*pz);
IkReal x1001=(r02*sj1);
IkReal x1002=(cj1*r02);
IkReal x1003=(cj0*r01);
IkReal x1004=((0.0715294)*cj4);
IkReal x1005=(r00*sj1);
IkReal x1006=((0.0361)*sj1);
IkReal x1007=(py*r00);
IkReal x1008=((0.2573)*cj3*sj4);
IkReal x1009=((0.139)*x978);
IkReal x1010=(cj0*pz*sj1);
IkReal x1011=(sj3*x978);
IkReal x1012=(pz*r00*sj0);
IkReal x1013=(r02*x979);
IkReal x1014=((0.139)*x977);
IkReal x1015=((0.2573)*x977);
IkReal x1016=(sj1*x981);
IkReal x1017=(r02*x980);
IkReal x1018=(sj3*x977);
evalcond[0]=(((x977*x989))+((sj1*x982))+((sj1*x986))+((cj4*x1011))+(((-1.0)*r02*x983)));
evalcond[1]=((((-1.0)*x978*x989))+(((-1.0)*x982*x983))+((cj4*x1018))+(((-1.0)*r02*x984))+(((-1.0)*x983*x986)));
evalcond[2]=(x1009+(((-1.0)*pz*x983))+((sj1*x985))+((cj0*x995))+(((-1.0)*sj3*x1015))+(((0.2573)*cj3*x978)));
evalcond[3]=((0.19)+(((-1.0)*cj0*px*x983))+x1014+(((-1.0)*pz*x984))+((cj3*x1015))+(((0.2573)*x1011))+(((-1.0)*x983*x985)));
evalcond[4]=(((sj4*x1009))+((pz*sj0*x990))+((x992*x993))+((r01*x995))+(((-1.0)*px*x983*x996))+(((-1.0)*sj3*sj4*x1015))+(((-1.0)*cj0*x983*x997))+(((-1.0)*x1007*x984))+((x1008*x978)));
evalcond[5]=(((cj0*sj1*x997))+(((-1.0)*x1008*x977))+(((-1.0)*py*x984*x992))+((x995*x996))+(((0.19)*r00*sj0))+(((-0.19)*x1003))+(((-0.2573)*sj4*x1011))+(((-1.0)*x1007*x983))+((cj1*px*r01))+(((-1.0)*sj4*x1014))+(((-1.0)*x1012*x984)));
evalcond[6]=((((-1.0)*x1017*x984))+((cj1*x980*x982))+(((-1.0)*x981*x983*x986))+((x986*x988))+((x1001*x981))+(((-1.0)*x1004*x978))+(((-1.0)*x980*x983*x986))+(((-0.38)*py*r01))+(((-1.0)*pz*x999))+((x985*x987*x990))+((x1018*x991))+((x982*x988))+((cj1*x979*x986))+((pz*x1005*x987))+(((-0.08552429)*x978*x989))+((py*x997*x998))+(((-1.0)*r00*x994))+((x1003*x987*x993))+(((-1.0)*x1013*x984))+(((-1.0)*x979*x982*x983))+((cj1*pz*x987*x992))+(((0.0361)*x1001))+(((-1.0)*x981*x982*x983))+(((2.0)*pz*x1002*x985)));
evalcond[7]=((((-1.0)*x1017*x983))+(((-1.0)*x1000*x982))+(((-1.0)*x1000*x986))+(((2.0)*x993*x997))+((x1002*x981))+((x1004*x977))+((x992*x994))+((x1011*x991))+((sj1*x980*x986))+((sj1*x979*x982))+((x1016*x982))+((x1016*x986))+(((-1.0)*x979*x984*x986))+((pz*x987*x990))+(((-1.0)*x980*x982*x984))+(((-1.0)*pz*r02*x985*x998))+(((0.08552429)*x977*x989))+(((-1.0)*x1013*x983))+(((-1.0)*r02*x988))+(((-1.0)*py*sj1*x1003*x987))+(((-1.0)*pz*sj1*x987*x992))+((x985*x999))+(((-1.0)*x1005*x985*x987))+((x1006*x986))+((x1006*x982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1019=(cj0*r00);
IkReal x1020=(cj1*sj3);
IkReal x1021=(sj1*sj3);
IkReal x1022=(cj1*cj3);
IkReal x1023=(r01*sj0);
IkReal x1024=((1.0)*cj3*sj1);
IkReal x1025=((1.0)*cj3*x1023);
CheckValue<IkReal> x1026 = IKatan2WithCheck(IkReal(((((-1.0)*x1019*x1021))+(((-1.0)*x1019*x1022))+(((-1.0)*x1021*x1023))+(((-1.0)*r02*x1024))+((r02*x1020))+(((-1.0)*x1022*x1023)))),((((-1.0)*x1023*x1024))+(((-1.0)*x1019*x1024))+((x1019*x1020))+((x1020*x1023))+((r02*x1022))+((r02*x1021))),IKFAST_ATAN2_MAGTHRESH);
if(!x1026.valid){
continue;
}
CheckValue<IkReal> x1027=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1027.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1026.value)+(((1.5707963267949)*(x1027.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1028=IKcos(j2);
IkReal x1029=IKsin(j2);
IkReal x1030=px*px;
IkReal x1031=py*py;
IkReal x1032=pz*pz;
IkReal x1033=(r01*sj0);
IkReal x1034=((1.0)*cj1);
IkReal x1035=((1.0)*sj1);
IkReal x1036=(py*sj0);
IkReal x1037=(cj0*r00);
IkReal x1038=((2.0)*px);
IkReal x1039=((0.0361)*cj1);
IkReal x1040=(cj3*cj4);
IkReal x1041=(cj1*r00);
IkReal x1042=((0.04688229)*cj4);
IkReal x1043=(cj0*r02);
IkReal x1044=(cj1*py);
IkReal x1045=((0.38)*px);
IkReal x1046=(px*sj1);
IkReal x1047=(r02*sj0);
IkReal x1048=(pz*r01);
IkReal x1049=((2.0)*sj1);
IkReal x1050=((0.38)*r02);
IkReal x1051=((0.38)*pz);
IkReal x1052=(r02*sj1);
IkReal x1053=(cj1*r02);
IkReal x1054=(cj0*r01);
IkReal x1055=((0.0715294)*cj4);
IkReal x1056=(r00*sj1);
IkReal x1057=((0.0361)*sj1);
IkReal x1058=(py*r00);
IkReal x1059=((0.2573)*cj3*sj4);
IkReal x1060=((0.139)*x1029);
IkReal x1061=(cj0*pz*sj1);
IkReal x1062=(sj3*x1029);
IkReal x1063=(pz*r00*sj0);
IkReal x1064=(r02*x1030);
IkReal x1065=((0.139)*x1028);
IkReal x1066=((0.2573)*x1028);
IkReal x1067=(sj1*x1032);
IkReal x1068=(r02*x1031);
IkReal x1069=(sj3*x1028);
evalcond[0]=(((sj1*x1033))+((sj1*x1037))+(((-1.0)*r02*x1034))+((cj4*x1062))+((x1028*x1040)));
evalcond[1]=((((-1.0)*x1033*x1034))+(((-1.0)*x1029*x1040))+(((-1.0)*x1034*x1037))+(((-1.0)*r02*x1035))+((cj4*x1069)));
evalcond[2]=((((0.2573)*cj3*x1029))+((cj0*x1046))+x1060+(((-1.0)*pz*x1034))+(((-1.0)*sj3*x1066))+((sj1*x1036)));
evalcond[3]=((0.19)+x1065+(((-1.0)*pz*x1035))+(((-1.0)*x1034*x1036))+(((-1.0)*cj0*px*x1034))+(((0.2573)*x1062))+((cj3*x1066)));
evalcond[4]=((((-1.0)*cj0*x1034*x1048))+((x1043*x1044))+(((-1.0)*px*x1034*x1047))+((r01*x1046))+((x1029*x1059))+(((-1.0)*x1035*x1058))+((sj4*x1060))+((pz*sj0*x1041))+(((-1.0)*sj3*sj4*x1066)));
evalcond[5]=(((cj0*sj1*x1048))+(((-1.0)*x1028*x1059))+(((-0.19)*x1054))+(((-1.0)*sj4*x1065))+(((-0.2573)*sj4*x1062))+(((0.19)*r00*sj0))+(((-1.0)*x1034*x1058))+(((-1.0)*py*x1035*x1043))+((cj1*px*r01))+(((-1.0)*x1035*x1063))+((x1046*x1047)));
evalcond[6]=((((-1.0)*x1032*x1034*x1037))+(((-1.0)*r00*x1045))+(((-1.0)*x1032*x1033*x1034))+(((-1.0)*x1029*x1055))+(((-0.08552429)*x1029*x1040))+(((-0.38)*py*r01))+((pz*x1038*x1056))+(((2.0)*pz*x1036*x1053))+((x1036*x1038*x1041))+(((0.0361)*x1052))+(((-1.0)*pz*x1050))+((x1038*x1044*x1054))+(((-1.0)*x1031*x1034*x1037))+(((-1.0)*x1030*x1033*x1034))+((cj1*x1030*x1037))+((cj1*pz*x1038*x1043))+((py*x1048*x1049))+((cj1*x1031*x1033))+((x1037*x1039))+((x1033*x1039))+((x1032*x1052))+(((-1.0)*x1035*x1068))+(((-1.0)*x1035*x1064))+((x1042*x1069)));
evalcond[7]=(((x1037*x1067))+((x1033*x1067))+(((-1.0)*x1036*x1038*x1056))+(((-1.0)*x1033*x1051))+((x1037*x1057))+((x1043*x1045))+((sj1*x1030*x1033))+((sj1*x1031*x1037))+((pz*x1038*x1041))+(((-1.0)*x1030*x1035*x1037))+(((-1.0)*r02*x1039))+(((-1.0)*x1037*x1051))+(((2.0)*x1044*x1048))+((x1036*x1050))+(((0.08552429)*x1028*x1040))+(((-1.0)*pz*r02*x1036*x1049))+((x1028*x1055))+((x1032*x1053))+(((-1.0)*pz*sj1*x1038*x1043))+(((-1.0)*py*sj1*x1038*x1054))+((x1033*x1057))+(((-1.0)*x1034*x1068))+(((-1.0)*x1034*x1064))+(((-1.0)*x1031*x1033*x1035))+((x1042*x1062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1070=((1000.0)*r02);
IkReal x1071=((1000.0)*r00);
IkReal x1072=((1000.0)*r01);
IkReal x1073=((190.0)*sj1);
IkReal x1074=(cj0*r00);
IkReal x1075=((190.0)*cj1);
IkReal x1076=((190.0)*r01*sj0);
CheckValue<IkReal> x1077=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1077.valid){
continue;
}
CheckValue<IkReal> x1078 = IKatan2WithCheck(IkReal(((((-1.0)*x1074*x1075))+(((-1.0)*r02*x1073))+((pz*x1070))+((px*x1071))+((py*x1072))+(((-1.0)*r01*sj0*x1075)))),((((-257.3)*cj4))+((r01*sj0*x1073))+(((-1.0)*pz*sj0*x1072))+(((-1.0)*r02*x1075))+(((-1.0)*cj0*pz*x1071))+((cj0*px*x1070))+((x1073*x1074))+((py*sj0*x1070))),IKFAST_ATAN2_MAGTHRESH);
if(!x1078.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1077.value)))+(x1078.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1079=IKcos(j3);
IkReal x1080=px*px;
IkReal x1081=pz*pz;
IkReal x1082=py*py;
IkReal x1083=(r01*sj0);
IkReal x1084=((2.0)*py);
IkReal x1085=(r00*sj0);
IkReal x1086=((0.19)*cj1);
IkReal x1087=(px*sj0);
IkReal x1088=(py*sj0);
IkReal x1089=((1.0)*pz);
IkReal x1090=(cj0*r01);
IkReal x1091=((0.38)*cj1);
IkReal x1092=((0.19)*sj1);
IkReal x1093=((0.139)*cj4);
IkReal x1094=(cj0*r00);
IkReal x1095=(cj0*px);
IkReal x1096=(pz*r02);
IkReal x1097=((0.38)*r02*sj1);
IkReal x1098=((0.0715294)*x1079);
IkReal x1099=((0.38)*pz*sj1);
IkReal x1100=((1.0)*x1081);
IkReal x1101=((1.0)*x1082);
evalcond[0]=((((-1.0)*px*r00))+((x1086*x1094))+((r02*x1092))+((x1093*(IKsin(j3))))+(((-1.0)*r02*x1089))+(((-1.0)*py*r01))+((x1083*x1086)));
evalcond[1]=((0.04942429)+x1098+x1099+((x1088*x1091))+(((-1.0)*x1080))+((x1091*x1095))+(((-1.0)*x1100))+(((-1.0)*x1101)));
evalcond[2]=((((-1.0)*x1079*x1093))+((x1083*x1092))+((r02*x1095))+(((-1.0)*x1089*x1094))+(((-1.0)*r02*x1086))+((x1092*x1094))+(((-0.2573)*cj4))+((r02*x1088))+(((-1.0)*x1083*x1089)));
evalcond[3]=((((-0.0361)*x1085))+(((-1.0)*x1090*x1101))+(((-1.0)*x1085*x1100))+(((-1.0)*x1085*x1101))+((x1080*x1090))+(((-1.0)*px*x1084*x1094))+(((0.0361)*x1090))+((x1085*x1099))+(((-1.0)*x1090*x1099))+(((-1.0)*px*r01*x1091))+((px*x1083*x1084))+(((-1.0)*x1087*x1097))+(((-0.08552429)*sj4))+((cj0*py*x1097))+((x1081*x1090))+((x1080*x1085))+(((2.0)*x1087*x1096))+((py*r00*x1091))+(((-1.0)*sj4*x1098))+(((-1.0)*cj0*x1084*x1096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x1102=(cj3*cj4);
j2eval[0]=(x1102+(((1.85107913669065)*cj4)));
j2eval[1]=IKsign(((((1390.0)*x1102))+(((2573.0)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
bool bgotonextstatement = true;
do
{
IkReal x1103=px*px;
IkReal x1104=pz*pz;
IkReal x1105=py*py;
IkReal x1106=((0.0715294)*cj3);
IkReal x1107=(r01*sj0);
IkReal x1108=((0.19)*cj1);
IkReal x1109=(py*r02);
IkReal x1110=(cj0*sj1);
IkReal x1111=((1.0)*cj1);
IkReal x1112=((1.0)*sj1);
IkReal x1113=(cj0*r00);
IkReal x1114=((2.0)*pz);
IkReal x1115=(px*r02);
IkReal x1116=(py*sj1);
IkReal x1117=(cj0*r01);
IkReal x1118=((1.0)*sj0);
IkReal x1119=((0.0361)*cj1);
IkReal x1120=(cj1*px);
IkReal x1121=(r00*sj0);
IkReal x1122=((2.0)*py);
IkReal x1123=((0.38)*cj0);
IkReal x1124=((0.38)*r01);
IkReal x1125=((1.0)*pz);
IkReal x1126=((0.38)*sj0);
IkReal x1127=(cj1*py);
IkReal x1128=((0.38)*pz);
IkReal x1129=((0.0361)*sj1);
IkReal x1130=(px*r00);
IkReal x1131=((0.19)*sj1);
IkReal x1132=(r00*x1105);
IkReal x1133=(r02*x1104);
IkReal x1134=(r02*x1103);
IkReal x1135=((1.0)*x1105);
IkReal x1136=(r00*x1104);
IkReal x1137=(r02*x1105);
IkReal x1138=((1.0)*x1103);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x1118))+((cj0*py)));
evalcond[2]=((-1.0)+x1117+(((-1.0)*r00*x1118)));
evalcond[3]=(((r00*x1110))+((sj1*x1107))+(((-1.0)*r02*x1111)));
evalcond[4]=(((x1108*x1113))+(((-1.0)*x1130))+(((-1.0)*py*r01))+(((-1.0)*r02*x1125))+((r02*x1131))+((x1107*x1108)));
evalcond[5]=((((-1.0)*x1107*x1111))+(((-1.0)*r02*x1112))+(((-1.0)*x1111*x1113)));
evalcond[6]=((0.04942429)+x1106+((x1120*x1123))+((sj1*x1128))+(((-1.0)*x1104))+(((-1.0)*x1138))+(((-1.0)*x1135))+((x1126*x1127)));
evalcond[7]=((((-1.0)*x1113*x1125))+(((-1.0)*x1107*x1125))+((sj0*x1109))+((x1107*x1131))+(((-1.0)*r02*x1108))+(((0.19)*r00*x1110))+((cj0*x1115)));
evalcond[8]=((-0.08552429)+(((-1.0)*cj0*x1109*x1114))+(((-1.0)*x1117*x1135))+(((-0.0361)*x1121))+(((-1.0)*sj1*x1115*x1126))+((sj1*x1121*x1128))+((x1103*x1121))+((x1104*x1117))+(((0.38)*x1109*x1110))+(((-1.0)*pz*x1110*x1124))+((px*x1107*x1122))+(((-1.0)*x1118*x1132))+(((-1.0)*x1118*x1136))+(((0.38)*r00*x1127))+(((-1.0)*x1120*x1124))+((x1103*x1117))+(((0.0361)*x1117))+(((-1.0)*x1106))+((sj0*x1114*x1115))+(((-1.0)*px*x1113*x1122)));
evalcond[9]=(((cj1*x1105*x1107))+(((-1.0)*x1112*x1134))+(((-1.0)*x1112*x1137))+((x1120*x1121*x1122))+((x1113*x1119))+(((-1.0)*x1105*x1111*x1113))+(((-1.0)*x1104*x1107*x1111))+((r01*x1114*x1116))+((cj0*cj1*x1114*x1115))+((sj1*x1133))+(((-1.0)*py*x1124))+((sj1*x1114*x1130))+(((-1.0)*x1104*x1111*x1113))+(((-1.0)*x1103*x1107*x1111))+(((-0.38)*x1130))+(((-1.0)*r02*x1128))+((x1117*x1120*x1122))+((r02*x1129))+((x1107*x1119))+((cj1*sj0*x1109*x1114))+((cj1*x1103*x1113)));
evalcond[10]=((((-1.0)*x1113*x1128))+(((-1.0)*px*r01*x1110*x1122))+(((-1.0)*sj0*sj1*x1109*x1114))+(((0.0361)*r00*x1110))+(((-1.0)*r00*x1110*x1138))+((sj1*x1103*x1107))+(((-1.0)*x1110*x1114*x1115))+((r00*x1114*x1120))+((x1110*x1132))+((x1110*x1136))+(((-1.0)*x1107*x1128))+((x1109*x1126))+((r01*x1114*x1127))+(((-1.0)*x1111*x1137))+(((-1.0)*x1111*x1134))+((x1107*x1129))+(((-1.0)*r02*x1119))+((cj1*x1133))+((sj1*x1104*x1107))+(((-2.0)*px*x1116*x1121))+(((-1.0)*x1105*x1107*x1112))+((x1115*x1123)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.19565227724544)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-8552429.0)+(((-7152940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1139=((25730000.0)*cj1);
IkReal x1140=(cj3*pz);
IkReal x1141=(py*sj0);
IkReal x1142=((25730000.0)*sj1);
IkReal x1143=(pz*sj3);
IkReal x1144=(cj0*px);
IkReal x1145=((13900000.0)*cj1);
IkReal x1146=((13900000.0)*sj1);
IkReal x1147=(sj1*x1144);
CheckValue<IkReal> x1148 = IKatan2WithCheck(IkReal((((cj3*x1142*x1144))+((cj3*x1141*x1142))+(((-1.0)*sj3*x1139*x1144))+(((-1.0)*sj3*x1139*x1141))+((x1141*x1146))+(((4888700.0)*sj3))+(((-1.0)*x1139*x1140))+((x1144*x1146))+(((-1.0)*x1142*x1143))+(((-1.0)*pz*x1145)))),((2641000.0)+(((-1.0)*x1140*x1142))+(((-1.0)*sj3*x1141*x1142))+(((-1.0)*x1141*x1145))+(((-1.0)*cj3*x1139*x1141))+(((-1.0)*cj3*x1139*x1144))+((x1139*x1143))+(((-1.0)*x1144*x1145))+(((4888700.0)*cj3))+(((-1.0)*sj3*x1142*x1144))+(((-1.0)*pz*x1146))),IKFAST_ATAN2_MAGTHRESH);
if(!x1148.valid){
continue;
}
CheckValue<IkReal> x1149=IKPowWithIntegerCheck(IKsign(((-8552429.0)+(((-7152940.0)*cj3)))),-1);
if(!x1149.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1148.value)+(((1.5707963267949)*(x1149.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1150=IKsin(j2);
IkReal x1151=IKcos(j2);
IkReal x1152=((0.2573)*sj3);
IkReal x1153=(px*sj1);
IkReal x1154=((0.2573)*cj3);
IkReal x1155=(py*sj1);
IkReal x1156=((1.0)*r00);
IkReal x1157=(cj1*sj0);
IkReal x1158=((1.0)*px);
IkReal x1159=((1.0)*pz);
IkReal x1160=(cj0*r01);
IkReal x1161=(pz*sj1);
IkReal x1162=(cj0*cj1);
IkReal x1163=((0.139)*x1150);
IkReal x1164=((0.139)*x1151);
IkReal x1165=(x1150*x1154);
IkReal x1166=(x1151*x1152);
IkReal x1167=(x1150*x1152);
IkReal x1168=(x1151*x1154);
IkReal x1169=(x1165+x1163);
IkReal x1170=(x1164+x1167+x1168);
evalcond[0]=(((cj0*x1153))+x1169+(((-1.0)*cj1*x1159))+((sj0*x1155))+(((-1.0)*x1166)));
evalcond[1]=((0.19)+x1170+(((-1.0)*x1158*x1162))+(((-1.0)*py*x1157))+(((-1.0)*sj1*x1159)));
evalcond[2]=(((pz*r00*x1157))+x1169+(((-1.0)*x1155*x1156))+((py*r02*x1162))+(((-1.0)*r02*x1157*x1158))+(((-1.0)*cj1*x1159*x1160))+(((-1.0)*x1166))+((r01*x1153)));
evalcond[3]=(((r02*sj0*x1153))+(((-0.19)*x1160))+(((-1.0)*sj0*x1156*x1161))+(((0.19)*r00*sj0))+(((-1.0)*cj0*r02*x1155))+(((-1.0)*x1170))+((cj1*px*r01))+((x1160*x1161))+(((-1.0)*cj1*py*x1156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1171=px*px;
IkReal x1172=pz*pz;
IkReal x1173=((0.0715294)*cj3);
IkReal x1174=py*py;
IkReal x1175=(r01*sj0);
IkReal x1176=((0.19)*cj1);
IkReal x1177=(py*r02);
IkReal x1178=(cj0*sj1);
IkReal x1179=((1.0)*cj1);
IkReal x1180=((1.0)*sj1);
IkReal x1181=(cj0*r00);
IkReal x1182=((2.0)*pz);
IkReal x1183=(px*r02);
IkReal x1184=(py*sj1);
IkReal x1185=(cj0*r01);
IkReal x1186=((1.0)*sj0);
IkReal x1187=((0.0361)*cj1);
IkReal x1188=(cj1*px);
IkReal x1189=(r00*sj0);
IkReal x1190=((2.0)*py);
IkReal x1191=((0.38)*cj0);
IkReal x1192=((0.38)*r01);
IkReal x1193=((1.0)*pz);
IkReal x1194=((0.38)*sj0);
IkReal x1195=(cj1*py);
IkReal x1196=((0.38)*pz);
IkReal x1197=((0.0361)*sj1);
IkReal x1198=(px*r00);
IkReal x1199=((0.19)*sj1);
IkReal x1200=(r00*x1174);
IkReal x1201=(r02*x1172);
IkReal x1202=(r02*x1171);
IkReal x1203=((1.0)*x1174);
IkReal x1204=(r00*x1172);
IkReal x1205=(r02*x1174);
IkReal x1206=((1.0)*x1171);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=(((cj0*py))+(((-1.0)*px*x1186)));
evalcond[2]=((1.0)+x1185+(((-1.0)*r00*x1186)));
evalcond[3]=((((-1.0)*r02*x1179))+((sj1*x1175))+((r00*x1178)));
evalcond[4]=(((x1176*x1181))+((x1175*x1176))+((r02*x1199))+(((-1.0)*py*r01))+(((-1.0)*x1198))+(((-1.0)*r02*x1193)));
evalcond[5]=((((-1.0)*x1179*x1181))+(((-1.0)*x1175*x1179))+(((-1.0)*r02*x1180)));
evalcond[6]=((0.04942429)+x1173+((x1194*x1195))+((x1188*x1191))+((sj1*x1196))+(((-1.0)*x1206))+(((-1.0)*x1203))+(((-1.0)*x1172)));
evalcond[7]=((((-1.0)*r02*x1176))+(((-1.0)*x1181*x1193))+((sj0*x1177))+((cj0*x1183))+((x1175*x1199))+(((0.19)*r00*x1178))+(((-1.0)*x1175*x1193)));
evalcond[8]=((0.08552429)+x1173+(((-1.0)*pz*x1178*x1192))+(((0.0361)*x1185))+(((0.38)*x1177*x1178))+(((-1.0)*x1188*x1192))+((x1172*x1185))+(((-0.0361)*x1189))+((x1171*x1189))+((x1171*x1185))+(((-1.0)*cj0*x1177*x1182))+(((-1.0)*x1186*x1204))+(((-1.0)*x1186*x1200))+((sj1*x1189*x1196))+(((-1.0)*sj1*x1183*x1194))+(((-1.0)*px*x1181*x1190))+((sj0*x1182*x1183))+(((-1.0)*x1185*x1203))+((px*x1175*x1190))+(((0.38)*r00*x1195)));
evalcond[9]=(((sj1*x1182*x1198))+((x1185*x1188*x1190))+(((-1.0)*x1172*x1175*x1179))+((cj1*x1174*x1175))+(((-1.0)*x1174*x1179*x1181))+((cj1*sj0*x1177*x1182))+(((-1.0)*py*x1192))+((x1175*x1187))+(((-1.0)*x1171*x1175*x1179))+(((-1.0)*x1172*x1179*x1181))+(((-0.38)*x1198))+((sj1*x1201))+((x1181*x1187))+((cj1*x1171*x1181))+((r02*x1197))+(((-1.0)*x1180*x1202))+(((-1.0)*x1180*x1205))+((x1188*x1189*x1190))+(((-1.0)*r02*x1196))+((cj0*cj1*x1182*x1183))+((r01*x1182*x1184)));
evalcond[10]=(((r01*x1182*x1195))+(((-1.0)*x1181*x1196))+((r00*x1182*x1188))+((x1183*x1191))+((sj1*x1172*x1175))+(((-1.0)*x1179*x1202))+(((-1.0)*x1179*x1205))+(((-1.0)*sj0*sj1*x1177*x1182))+(((-1.0)*x1178*x1182*x1183))+((cj1*x1201))+((x1175*x1197))+((x1177*x1194))+(((-2.0)*px*x1184*x1189))+(((-1.0)*px*r01*x1178*x1190))+(((0.0361)*r00*x1178))+((sj1*x1171*x1175))+(((-1.0)*x1174*x1175*x1180))+(((-1.0)*r00*x1178*x1206))+((x1178*x1204))+((x1178*x1200))+(((-1.0)*r02*x1187))+(((-1.0)*x1175*x1196)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.19565227724544)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-8552429.0)+(((-7152940.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1207=((25730000.0)*cj1);
IkReal x1208=(cj3*pz);
IkReal x1209=(py*sj0);
IkReal x1210=((25730000.0)*sj1);
IkReal x1211=(pz*sj3);
IkReal x1212=(cj0*px);
IkReal x1213=((13900000.0)*cj1);
IkReal x1214=((13900000.0)*sj1);
IkReal x1215=(sj1*x1212);
CheckValue<IkReal> x1216 = IKatan2WithCheck(IkReal((((x1212*x1214))+(((-1.0)*sj3*x1207*x1212))+((cj3*x1210*x1212))+(((-1.0)*x1210*x1211))+(((4888700.0)*sj3))+((cj3*x1209*x1210))+((x1209*x1214))+(((-1.0)*pz*x1213))+(((-1.0)*x1207*x1208))+(((-1.0)*sj3*x1207*x1209)))),((2641000.0)+(((-1.0)*sj3*x1209*x1210))+(((-1.0)*cj3*x1207*x1209))+(((-1.0)*x1209*x1213))+(((-1.0)*x1208*x1210))+((x1207*x1211))+(((-1.0)*cj3*x1207*x1212))+(((-1.0)*x1212*x1213))+(((-1.0)*sj3*x1210*x1212))+(((4888700.0)*cj3))+(((-1.0)*pz*x1214))),IKFAST_ATAN2_MAGTHRESH);
if(!x1216.valid){
continue;
}
CheckValue<IkReal> x1217=IKPowWithIntegerCheck(IKsign(((-8552429.0)+(((-7152940.0)*cj3)))),-1);
if(!x1217.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1216.value)+(((1.5707963267949)*(x1217.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1218=IKsin(j2);
IkReal x1219=IKcos(j2);
IkReal x1220=((0.2573)*sj3);
IkReal x1221=(px*sj1);
IkReal x1222=((0.2573)*cj3);
IkReal x1223=(py*sj1);
IkReal x1224=((1.0)*r00);
IkReal x1225=(cj1*sj0);
IkReal x1226=((1.0)*px);
IkReal x1227=((1.0)*pz);
IkReal x1228=(cj0*r01);
IkReal x1229=(pz*sj1);
IkReal x1230=(cj0*cj1);
IkReal x1231=((0.139)*x1218);
IkReal x1232=((0.139)*x1219);
IkReal x1233=(x1219*x1220);
IkReal x1234=(x1218*x1222);
IkReal x1235=(x1218*x1220);
IkReal x1236=(x1219*x1222);
IkReal x1237=(x1234+x1231);
IkReal x1238=(x1235+x1236+x1232);
evalcond[0]=(((sj0*x1223))+x1237+(((-1.0)*x1233))+((cj0*x1221))+(((-1.0)*cj1*x1227)));
evalcond[1]=((0.19)+x1238+(((-1.0)*x1226*x1230))+(((-1.0)*py*x1225))+(((-1.0)*sj1*x1227)));
evalcond[2]=(x1233+(((-1.0)*cj1*x1227*x1228))+((r01*x1221))+(((-1.0)*x1237))+((py*r02*x1230))+(((-1.0)*r02*x1225*x1226))+((pz*r00*x1225))+(((-1.0)*x1223*x1224)));
evalcond[3]=((((-1.0)*cj1*py*x1224))+x1238+(((-1.0)*sj0*x1224*x1229))+(((-1.0)*cj0*r02*x1223))+(((0.19)*r00*sj0))+((x1228*x1229))+((cj1*px*r01))+((r02*sj0*x1221))+(((-0.19)*x1228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1239=px*px;
IkReal x1240=pz*pz;
IkReal x1241=py*py;
IkReal x1242=(r01*sj0);
IkReal x1243=((2.0)*py);
IkReal x1244=(r00*sj0);
IkReal x1245=((0.19)*cj1);
IkReal x1246=(cj0*py);
IkReal x1247=(px*sj0);
IkReal x1248=(py*sj0);
IkReal x1249=((1.0)*pz);
IkReal x1250=((0.38)*r01);
IkReal x1251=(cj1*px);
IkReal x1252=(pz*sj1);
IkReal x1253=((0.38)*cj1);
IkReal x1254=(cj0*r01);
IkReal x1255=((0.19)*sj1);
IkReal x1256=(cj0*r00);
IkReal x1257=(cj0*r02);
IkReal x1258=((0.38)*r02*sj1);
IkReal x1259=((1.0)*x1240);
IkReal x1260=((1.0)*x1241);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(x1246+(((-1.0)*x1247)));
evalcond[2]=(x1254+(((-1.0)*sj4))+(((-1.0)*x1244)));
evalcond[3]=((((-1.0)*r02*x1249))+(((-1.0)*px*r00))+((r02*x1255))+((x1245*x1256))+((x1242*x1245))+(((-1.0)*py*r01)));
evalcond[4]=((0.12095369)+(((-1.0)*x1259))+(((-1.0)*x1239))+(((0.38)*cj0*x1251))+(((0.38)*x1252))+((x1248*x1253))+(((-1.0)*x1260)));
evalcond[5]=((((-1.0)*r02*x1245))+(((-1.0)*x1249*x1256))+(((-0.3963)*cj4))+(((-1.0)*x1242*x1249))+((x1255*x1256))+((r02*x1248))+((px*x1257))+((x1242*x1255)));
evalcond[6]=(((x1246*x1258))+(((-0.15705369)*sj4))+((x1239*x1244))+(((-1.0)*cj0*x1250*x1252))+(((-1.0)*pz*x1243*x1257))+((px*x1242*x1243))+(((2.0)*pz*r02*x1247))+(((-1.0)*x1247*x1258))+(((-0.0361)*x1244))+(((-1.0)*px*x1243*x1256))+(((-1.0)*x1244*x1259))+(((-1.0)*x1254*x1260))+(((0.38)*x1244*x1252))+(((-1.0)*x1244*x1260))+((x1239*x1254))+(((-1.0)*x1250*x1251))+((x1240*x1254))+(((0.0361)*x1254))+((py*r00*x1253)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1261=((2.52334090335604)*sj1);
IkReal x1262=(cj0*px);
IkReal x1263=((2.52334090335604)*cj1);
IkReal x1264=(py*sj0);
if( IKabs(((((-1.0)*x1261*x1264))+(((-1.0)*x1261*x1262))+((pz*x1263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.479434771637648)+((x1262*x1263))+((x1263*x1264))+((pz*x1261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1261*x1264))+(((-1.0)*x1261*x1262))+((pz*x1263))))+IKsqr(((-0.479434771637648)+((x1262*x1263))+((x1263*x1264))+((pz*x1261))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1261*x1264))+(((-1.0)*x1261*x1262))+((pz*x1263))), ((-0.479434771637648)+((x1262*x1263))+((x1263*x1264))+((pz*x1261))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1265=IKsin(j2);
IkReal x1266=IKcos(j2);
IkReal x1267=px*px;
IkReal x1268=py*py;
IkReal x1269=pz*pz;
IkReal x1270=(px*sj1);
IkReal x1271=((0.15705369)*cj4);
IkReal x1272=(cj0*r00);
IkReal x1273=(cj1*sj0);
IkReal x1274=((1.0)*r01);
IkReal x1275=(sj0*sj1);
IkReal x1276=((1.0)*sj1);
IkReal x1277=(py*r00);
IkReal x1278=((1.0)*cj1);
IkReal x1279=(px*r02);
IkReal x1280=((2.0)*pz);
IkReal x1281=(cj0*r02);
IkReal x1282=((0.38)*pz);
IkReal x1283=(r01*sj0);
IkReal x1284=(r01*sj1);
IkReal x1285=(cj0*pz);
IkReal x1286=(pz*r00);
IkReal x1287=((0.0361)*cj1);
IkReal x1288=((0.0361)*r01);
IkReal x1289=((0.38)*py);
IkReal x1290=(r02*sj0);
IkReal x1291=((0.0361)*sj1);
IkReal x1292=(py*r01);
IkReal x1293=((2.0)*cj0);
IkReal x1294=(cj1*px);
IkReal x1295=(sj1*x1269);
IkReal x1296=(r02*x1268);
IkReal x1297=(r02*x1267);
IkReal x1298=((0.3963)*x1265);
IkReal x1299=((0.3963)*x1266);
IkReal x1300=(py*r02*x1280);
evalcond[0]=(((sj1*x1272))+(((-1.0)*r02*x1278))+((r01*x1275))+((cj4*x1266)));
evalcond[1]=(x1298+((cj0*x1270))+((py*x1275))+(((-1.0)*pz*x1278)));
evalcond[2]=((((-1.0)*cj4*x1265))+(((-1.0)*x1272*x1278))+(((-1.0)*x1273*x1274))+(((-1.0)*r02*x1276)));
evalcond[3]=((0.19)+x1299+(((-1.0)*py*x1273))+(((-1.0)*cj0*px*x1278))+(((-1.0)*pz*x1276)));
evalcond[4]=((((-1.0)*x1273*x1279))+(((-1.0)*x1276*x1277))+(((-1.0)*cj1*x1274*x1285))+((sj4*x1298))+((r01*x1270))+((x1273*x1286))+((cj1*py*x1281)));
evalcond[5]=((((-1.0)*sj4*x1299))+((x1284*x1285))+(((-1.0)*x1275*x1286))+(((-1.0)*py*x1276*x1281))+(((-1.0)*x1277*x1278))+(((-0.19)*cj0*r01))+((x1270*x1290))+(((0.19)*r00*sj0))+((r01*x1294)));
evalcond[6]=((((-1.0)*x1269*x1273*x1274))+(((-1.0)*r02*x1282))+(((-1.0)*x1269*x1272*x1278))+((py*x1280*x1284))+((cj1*x1267*x1272))+((r00*x1270*x1280))+(((-1.0)*x1268*x1272*x1278))+(((-1.0)*r01*x1289))+((x1272*x1287))+(((-1.0)*x1267*x1273*x1274))+((r01*x1268*x1273))+((r02*x1295))+((r02*x1291))+(((-1.0)*x1276*x1297))+(((-1.0)*x1276*x1296))+(((-1.0)*x1265*x1271))+((x1273*x1288))+((x1273*x1300))+((cj0*cj1*x1279*x1280))+(((-0.38)*px*r00))+(((2.0)*px*x1273*x1277))+((x1292*x1293*x1294)));
evalcond[7]=((((-1.0)*r02*x1287))+(((-1.0)*x1268*x1274*x1275))+((x1272*x1291))+((x1272*x1295))+(((-1.0)*x1278*x1297))+(((-1.0)*x1278*x1296))+(((-1.0)*x1275*x1300))+((r01*x1269*x1275))+((x1275*x1288))+(((-2.0)*sj0*x1270*x1277))+((x1266*x1271))+(((-1.0)*x1272*x1282))+((r00*x1280*x1294))+(((-1.0)*x1267*x1272*x1276))+(((-1.0)*x1270*x1292*x1293))+((sj1*x1268*x1272))+(((0.38)*cj0*x1279))+((r01*x1267*x1275))+((cj1*r02*x1269))+((cj1*x1280*x1292))+((x1289*x1290))+(((-1.0)*x1282*x1283))+(((-1.0)*x1270*x1280*x1281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1301=px*px;
IkReal x1302=pz*pz;
IkReal x1303=py*py;
IkReal x1304=(r01*sj0);
IkReal x1305=((2.0)*py);
IkReal x1306=(r00*sj0);
IkReal x1307=((0.19)*cj1);
IkReal x1308=(cj0*py);
IkReal x1309=(px*sj0);
IkReal x1310=(py*sj0);
IkReal x1311=((1.0)*pz);
IkReal x1312=((0.38)*r01);
IkReal x1313=(cj1*px);
IkReal x1314=(pz*sj1);
IkReal x1315=((0.38)*cj1);
IkReal x1316=(cj0*r01);
IkReal x1317=((0.19)*sj1);
IkReal x1318=(cj0*r00);
IkReal x1319=(cj0*r02);
IkReal x1320=((0.38)*r02*sj1);
IkReal x1321=((1.0)*x1302);
IkReal x1322=((1.0)*x1303);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(x1308+(((-1.0)*x1309)));
evalcond[2]=(x1316+(((-1.0)*sj4))+(((-1.0)*x1306)));
evalcond[3]=((((-1.0)*px*r00))+((x1307*x1318))+(((-1.0)*r02*x1311))+((x1304*x1307))+((r02*x1317))+(((-1.0)*py*r01)));
evalcond[4]=((-0.02210511)+((x1310*x1315))+(((-1.0)*x1301))+(((-1.0)*x1321))+(((-1.0)*x1322))+(((0.38)*cj0*x1313))+(((0.38)*x1314)));
evalcond[5]=((((-1.0)*x1311*x1318))+(((-1.0)*x1304*x1311))+((x1317*x1318))+((px*x1319))+(((-0.1183)*cj4))+(((-1.0)*r02*x1307))+((r02*x1310))+((x1304*x1317)));
evalcond[6]=((((-1.0)*x1309*x1320))+((py*r00*x1315))+(((0.38)*x1306*x1314))+((px*x1304*x1305))+(((-1.0)*x1306*x1321))+(((-1.0)*x1306*x1322))+(((-1.0)*pz*x1305*x1319))+((x1308*x1320))+(((0.0361)*x1316))+(((-1.0)*px*x1305*x1318))+(((2.0)*pz*r02*x1309))+((x1302*x1316))+(((-1.0)*x1316*x1322))+((x1301*x1316))+(((-0.0361)*x1306))+(((-1.0)*cj0*x1312*x1314))+(((-0.01399489)*sj4))+((x1301*x1306))+(((-1.0)*x1312*x1313)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1323=((8.4530853761623)*sj1);
IkReal x1324=(cj0*px);
IkReal x1325=((8.4530853761623)*cj1);
IkReal x1326=(py*sj0);
if( IKabs((((x1323*x1324))+((x1323*x1326))+(((-1.0)*pz*x1325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.60608622147084)+(((-1.0)*x1324*x1325))+(((-1.0)*x1325*x1326))+(((-1.0)*pz*x1323)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1323*x1324))+((x1323*x1326))+(((-1.0)*pz*x1325))))+IKsqr(((1.60608622147084)+(((-1.0)*x1324*x1325))+(((-1.0)*x1325*x1326))+(((-1.0)*pz*x1323))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1323*x1324))+((x1323*x1326))+(((-1.0)*pz*x1325))), ((1.60608622147084)+(((-1.0)*x1324*x1325))+(((-1.0)*x1325*x1326))+(((-1.0)*pz*x1323))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1327=IKsin(j2);
IkReal x1328=IKcos(j2);
IkReal x1329=px*px;
IkReal x1330=py*py;
IkReal x1331=pz*pz;
IkReal x1332=(cj0*sj1);
IkReal x1333=(r01*sj0);
IkReal x1334=((0.1183)*sj4);
IkReal x1335=((1.0)*cj1);
IkReal x1336=((0.01399489)*cj4);
IkReal x1337=(py*sj0);
IkReal x1338=((1.0)*sj1);
IkReal x1339=(py*r00);
IkReal x1340=(px*r02);
IkReal x1341=(r01*sj1);
IkReal x1342=((2.0)*py);
IkReal x1343=(pz*r00);
IkReal x1344=((0.38)*cj0);
IkReal x1345=((0.38)*r02);
IkReal x1346=(cj0*r00);
IkReal x1347=((0.0361)*cj1);
IkReal x1348=((0.0361)*sj1);
IkReal x1349=(pz*r01);
IkReal x1350=(px*r01);
IkReal x1351=(cj0*px);
IkReal x1352=(cj0*cj1);
IkReal x1353=(py*r02);
IkReal x1354=(r00*x1331);
IkReal x1355=((2.0)*pz*r02);
IkReal x1356=(r00*x1330);
IkReal x1357=((2.0)*px*r00);
IkReal x1358=(r02*x1330);
IkReal x1359=(r02*x1329);
IkReal x1360=(r00*x1329);
IkReal x1361=(r02*x1331);
evalcond[0]=(((px*x1332))+(((-1.0)*pz*x1335))+(((-0.1183)*x1327))+((sj1*x1337)));
evalcond[1]=(((r00*x1332))+((sj1*x1333))+(((-1.0)*r02*x1335))+(((-1.0)*cj4*x1328)));
evalcond[2]=(((cj4*x1327))+(((-1.0)*x1335*x1346))+(((-1.0)*x1333*x1335))+(((-1.0)*r02*x1338)));
evalcond[3]=((0.19)+(((-1.0)*x1335*x1337))+(((-1.0)*x1335*x1351))+(((-1.0)*pz*x1338))+(((-0.1183)*x1328)));
evalcond[4]=((((-1.0)*x1327*x1334))+((px*x1341))+(((-1.0)*cj0*x1335*x1349))+((cj1*sj0*x1343))+(((-1.0)*sj0*x1335*x1340))+(((-1.0)*x1338*x1339))+((x1352*x1353)));
evalcond[5]=((((-1.0)*x1335*x1339))+((sj0*sj1*x1340))+(((-1.0)*x1332*x1353))+((cj1*x1350))+((x1332*x1349))+(((-0.19)*cj0*r01))+((x1328*x1334))+(((0.19)*r00*sj0))+(((-1.0)*sj0*x1338*x1343)));
evalcond[6]=(((x1342*x1350*x1352))+(((-1.0)*x1338*x1359))+(((-1.0)*x1338*x1358))+((cj1*x1329*x1346))+(((-1.0)*x1331*x1333*x1335))+(((-1.0)*pz*x1345))+((sj1*x1361))+((x1333*x1347))+((cj1*x1337*x1357))+((cj1*x1337*x1355))+(((-1.0)*x1330*x1335*x1346))+((pz*x1341*x1342))+((x1346*x1347))+(((-0.38)*py*r01))+(((2.0)*pz*x1340*x1352))+((r02*x1348))+((x1327*x1336))+((cj1*x1330*x1333))+(((-1.0)*x1329*x1333*x1335))+(((2.0)*px*sj1*x1343))+(((-1.0)*x1331*x1335*x1346))+(((-0.38)*px*r00)));
evalcond[7]=((((0.0361)*r00*x1332))+(((-1.0)*x1330*x1333*x1338))+(((-1.0)*sj1*x1337*x1355))+(((-1.0)*sj1*x1337*x1357))+(((-1.0)*r02*x1347))+((x1332*x1356))+((x1332*x1354))+(((-1.0)*x1328*x1336))+((sj1*x1331*x1333))+((x1333*x1348))+(((-1.0)*x1335*x1358))+(((-1.0)*x1335*x1359))+((sj1*x1329*x1333))+(((-1.0)*x1332*x1342*x1350))+(((-1.0)*x1332*x1360))+((x1340*x1344))+((cj1*x1361))+((cj1*x1342*x1349))+(((-0.38)*pz*x1333))+((x1337*x1345))+(((2.0)*cj1*px*x1343))+(((-1.0)*x1343*x1344))+(((-2.0)*pz*x1332*x1340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1373=IKPowWithIntegerCheck(cj4,-1);
if(!x1373.valid){
continue;
}
IkReal x1362=x1373.value;
IkReal x1363=(cj1*pz);
IkReal x1364=((10000.0)*cj4);
IkReal x1365=((2573.0)*cj3);
IkReal x1366=(r02*sj1);
IkReal x1367=(cj3*x1364);
IkReal x1368=(py*sj0*sj1);
IkReal x1369=(cj0*px*sj1);
IkReal x1370=(cj0*cj1*r00);
IkReal x1371=((-0.000719424460431655)*x1362);
IkReal x1372=(cj1*r01*sj0);
CheckValue<IkReal> x1374=IKPowWithIntegerCheck(sj3,-1);
if(!x1374.valid){
continue;
}
if( IKabs((x1371*((((x1364*x1368))+((x1364*x1369))+(((-1.0)*x1363*x1364))+(((-2573.0)*x1366))+(((-2573.0)*x1370))+(((-2573.0)*x1372)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1371*(x1374.value)*((((x1367*x1369))+((x1367*x1368))+(((-1.0)*x1365*x1372))+(((-1.0)*x1365*x1370))+(((-1390.0)*x1366))+(((-1.0)*x1365*x1366))+(((-1390.0)*x1370))+(((-1390.0)*x1372))+(((-1.0)*x1363*x1367)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1371*((((x1364*x1368))+((x1364*x1369))+(((-1.0)*x1363*x1364))+(((-2573.0)*x1366))+(((-2573.0)*x1370))+(((-2573.0)*x1372))))))+IKsqr((x1371*(x1374.value)*((((x1367*x1369))+((x1367*x1368))+(((-1.0)*x1365*x1372))+(((-1.0)*x1365*x1370))+(((-1390.0)*x1366))+(((-1.0)*x1365*x1366))+(((-1390.0)*x1370))+(((-1390.0)*x1372))+(((-1.0)*x1363*x1367))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x1371*((((x1364*x1368))+((x1364*x1369))+(((-1.0)*x1363*x1364))+(((-2573.0)*x1366))+(((-2573.0)*x1370))+(((-2573.0)*x1372))))), (x1371*(x1374.value)*((((x1367*x1369))+((x1367*x1368))+(((-1.0)*x1365*x1372))+(((-1.0)*x1365*x1370))+(((-1390.0)*x1366))+(((-1.0)*x1365*x1366))+(((-1390.0)*x1370))+(((-1390.0)*x1372))+(((-1.0)*x1363*x1367))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1375=IKcos(j2);
IkReal x1376=IKsin(j2);
IkReal x1377=px*px;
IkReal x1378=py*py;
IkReal x1379=pz*pz;
IkReal x1380=(r01*sj0);
IkReal x1381=((1.0)*cj1);
IkReal x1382=((1.0)*sj1);
IkReal x1383=(py*sj0);
IkReal x1384=(cj0*r00);
IkReal x1385=((2.0)*px);
IkReal x1386=((0.0361)*cj1);
IkReal x1387=(cj3*cj4);
IkReal x1388=(cj1*r00);
IkReal x1389=((0.04688229)*cj4);
IkReal x1390=(cj0*r02);
IkReal x1391=(cj1*py);
IkReal x1392=((0.38)*px);
IkReal x1393=(px*sj1);
IkReal x1394=(r02*sj0);
IkReal x1395=(pz*r01);
IkReal x1396=((2.0)*sj1);
IkReal x1397=((0.38)*r02);
IkReal x1398=((0.38)*pz);
IkReal x1399=(r02*sj1);
IkReal x1400=(cj1*r02);
IkReal x1401=(cj0*r01);
IkReal x1402=((0.0715294)*cj4);
IkReal x1403=(r00*sj1);
IkReal x1404=((0.0361)*sj1);
IkReal x1405=(py*r00);
IkReal x1406=((0.2573)*cj3*sj4);
IkReal x1407=((0.139)*x1376);
IkReal x1408=(cj0*pz*sj1);
IkReal x1409=(sj3*x1376);
IkReal x1410=(pz*r00*sj0);
IkReal x1411=(r02*x1377);
IkReal x1412=((0.139)*x1375);
IkReal x1413=((0.2573)*x1375);
IkReal x1414=(sj1*x1379);
IkReal x1415=(r02*x1378);
IkReal x1416=(sj3*x1375);
evalcond[0]=((((-1.0)*r02*x1381))+((cj4*x1409))+((sj1*x1380))+((sj1*x1384))+((x1375*x1387)));
evalcond[1]=((((-1.0)*r02*x1382))+(((-1.0)*x1376*x1387))+((cj4*x1416))+(((-1.0)*x1380*x1381))+(((-1.0)*x1381*x1384)));
evalcond[2]=((((0.2573)*cj3*x1376))+((sj1*x1383))+((cj0*x1393))+(((-1.0)*sj3*x1413))+x1407+(((-1.0)*pz*x1381)));
evalcond[3]=((0.19)+(((-1.0)*cj0*px*x1381))+x1412+(((-1.0)*x1381*x1383))+(((0.2573)*x1409))+(((-1.0)*pz*x1382))+((cj3*x1413)));
evalcond[4]=(((x1376*x1406))+(((-1.0)*px*x1381*x1394))+((x1390*x1391))+(((-1.0)*sj3*sj4*x1413))+(((-1.0)*x1382*x1405))+((r01*x1393))+((pz*sj0*x1388))+((sj4*x1407))+(((-1.0)*cj0*x1381*x1395)));
evalcond[5]=((((-1.0)*py*x1382*x1390))+((x1393*x1394))+(((-0.2573)*sj4*x1409))+((cj0*sj1*x1395))+(((-1.0)*x1382*x1410))+(((-1.0)*x1381*x1405))+(((-0.19)*x1401))+(((0.19)*r00*sj0))+((cj1*px*r01))+(((-1.0)*x1375*x1406))+(((-1.0)*sj4*x1412)));
evalcond[6]=(((x1380*x1386))+(((-1.0)*x1379*x1380*x1381))+((x1385*x1391*x1401))+((cj1*x1378*x1380))+(((-1.0)*x1377*x1380*x1381))+(((-0.38)*py*r01))+(((-1.0)*x1382*x1411))+(((-1.0)*x1382*x1415))+((cj1*x1377*x1384))+((x1389*x1416))+(((-1.0)*r00*x1392))+((x1383*x1385*x1388))+((x1379*x1399))+((py*x1395*x1396))+(((2.0)*pz*x1383*x1400))+((cj1*pz*x1385*x1390))+(((-1.0)*x1376*x1402))+(((-0.08552429)*x1376*x1387))+((x1384*x1386))+(((0.0361)*x1399))+((pz*x1385*x1403))+(((-1.0)*x1379*x1381*x1384))+(((-1.0)*pz*x1397))+(((-1.0)*x1378*x1381*x1384)));
evalcond[7]=((((-1.0)*pz*sj1*x1385*x1390))+(((-1.0)*x1378*x1380*x1382))+((x1379*x1400))+(((-1.0)*x1384*x1398))+(((-1.0)*r02*x1386))+((sj1*x1378*x1384))+((pz*x1385*x1388))+((x1389*x1409))+((x1375*x1402))+((x1390*x1392))+(((-1.0)*pz*r02*x1383*x1396))+((sj1*x1377*x1380))+(((-1.0)*py*sj1*x1385*x1401))+(((2.0)*x1391*x1395))+(((-1.0)*x1380*x1398))+((x1384*x1414))+(((-1.0)*x1381*x1415))+(((-1.0)*x1381*x1411))+((x1380*x1404))+(((0.08552429)*x1375*x1387))+(((-1.0)*x1377*x1382*x1384))+((x1380*x1414))+((x1383*x1397))+(((-1.0)*x1383*x1385*x1403))+((x1384*x1404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1417=((10000.0)*cj4);
IkReal x1418=(cj1*sj3);
IkReal x1419=(sj0*sj1);
IkReal x1420=((2573.0)*r02);
IkReal x1421=(cj0*sj1);
IkReal x1422=(cj1*cj3);
IkReal x1423=((2573.0)*r01);
IkReal x1424=((2573.0)*r00);
CheckValue<IkReal> x1425 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*py*x1417*x1419))+(((-1.0)*sj3*x1419*x1423))+(((-1.0)*cj3*px*x1417*x1421))+((pz*x1417*x1422))+((x1418*x1420))+(((-1.0)*sj3*x1421*x1424)))),(((x1420*x1422))+(((-1.0)*cj3*x1421*x1424))+((px*sj3*x1417*x1421))+(((-1.0)*pz*x1417*x1418))+(((1390.0)*cj1*r02))+(((-1390.0)*r00*x1421))+(((-1.0)*cj3*x1419*x1423))+(((-1390.0)*r01*x1419))+((py*sj3*x1417*x1419))),IKFAST_ATAN2_MAGTHRESH);
if(!x1425.valid){
continue;
}
CheckValue<IkReal> x1426=IKPowWithIntegerCheck(IKsign(((((1390.0)*cj3*cj4))+(((2573.0)*cj4)))),-1);
if(!x1426.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1425.value)+(((1.5707963267949)*(x1426.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1427=IKcos(j2);
IkReal x1428=IKsin(j2);
IkReal x1429=px*px;
IkReal x1430=py*py;
IkReal x1431=pz*pz;
IkReal x1432=(r01*sj0);
IkReal x1433=((1.0)*cj1);
IkReal x1434=((1.0)*sj1);
IkReal x1435=(py*sj0);
IkReal x1436=(cj0*r00);
IkReal x1437=((2.0)*px);
IkReal x1438=((0.0361)*cj1);
IkReal x1439=(cj3*cj4);
IkReal x1440=(cj1*r00);
IkReal x1441=((0.04688229)*cj4);
IkReal x1442=(cj0*r02);
IkReal x1443=(cj1*py);
IkReal x1444=((0.38)*px);
IkReal x1445=(px*sj1);
IkReal x1446=(r02*sj0);
IkReal x1447=(pz*r01);
IkReal x1448=((2.0)*sj1);
IkReal x1449=((0.38)*r02);
IkReal x1450=((0.38)*pz);
IkReal x1451=(r02*sj1);
IkReal x1452=(cj1*r02);
IkReal x1453=(cj0*r01);
IkReal x1454=((0.0715294)*cj4);
IkReal x1455=(r00*sj1);
IkReal x1456=((0.0361)*sj1);
IkReal x1457=(py*r00);
IkReal x1458=((0.2573)*cj3*sj4);
IkReal x1459=((0.139)*x1428);
IkReal x1460=(cj0*pz*sj1);
IkReal x1461=(sj3*x1428);
IkReal x1462=(pz*r00*sj0);
IkReal x1463=(r02*x1429);
IkReal x1464=((0.139)*x1427);
IkReal x1465=((0.2573)*x1427);
IkReal x1466=(sj1*x1431);
IkReal x1467=(r02*x1430);
IkReal x1468=(sj3*x1427);
evalcond[0]=(((x1427*x1439))+((cj4*x1461))+(((-1.0)*r02*x1433))+((sj1*x1432))+((sj1*x1436)));
evalcond[1]=((((-1.0)*x1428*x1439))+((cj4*x1468))+(((-1.0)*r02*x1434))+(((-1.0)*x1432*x1433))+(((-1.0)*x1433*x1436)));
evalcond[2]=(((sj1*x1435))+x1459+((cj0*x1445))+(((0.2573)*cj3*x1428))+(((-1.0)*sj3*x1465))+(((-1.0)*pz*x1433)));
evalcond[3]=((0.19)+((cj3*x1465))+x1464+(((0.2573)*x1461))+(((-1.0)*cj0*px*x1433))+(((-1.0)*x1433*x1435))+(((-1.0)*pz*x1434)));
evalcond[4]=((((-1.0)*x1434*x1457))+((pz*sj0*x1440))+((x1442*x1443))+((x1428*x1458))+(((-1.0)*sj3*sj4*x1465))+(((-1.0)*px*x1433*x1446))+(((-1.0)*cj0*x1433*x1447))+((sj4*x1459))+((r01*x1445)));
evalcond[5]=(((x1445*x1446))+(((-1.0)*sj4*x1464))+((cj0*sj1*x1447))+(((-0.2573)*sj4*x1461))+(((-0.19)*x1453))+(((-1.0)*py*x1434*x1442))+(((0.19)*r00*sj0))+((cj1*px*r01))+(((-1.0)*x1427*x1458))+(((-1.0)*x1434*x1462))+(((-1.0)*x1433*x1457)));
evalcond[6]=(((x1435*x1437*x1440))+(((0.0361)*x1451))+((x1432*x1438))+((x1431*x1451))+((x1436*x1438))+(((-1.0)*x1430*x1433*x1436))+((cj1*x1429*x1436))+(((-1.0)*r00*x1444))+(((-0.08552429)*x1428*x1439))+((py*x1447*x1448))+(((-0.38)*py*r01))+((x1437*x1443*x1453))+(((-1.0)*x1428*x1454))+(((-1.0)*pz*x1449))+((x1441*x1468))+(((-1.0)*x1431*x1432*x1433))+((pz*x1437*x1455))+(((-1.0)*x1431*x1433*x1436))+((cj1*pz*x1437*x1442))+(((2.0)*pz*x1435*x1452))+((cj1*x1430*x1432))+(((-1.0)*x1434*x1463))+(((-1.0)*x1434*x1467))+(((-1.0)*x1429*x1432*x1433)));
evalcond[7]=(((pz*x1437*x1440))+(((-1.0)*x1429*x1434*x1436))+((x1431*x1452))+((x1442*x1444))+((x1435*x1449))+((sj1*x1429*x1432))+(((2.0)*x1443*x1447))+((x1432*x1466))+(((-1.0)*x1430*x1432*x1434))+(((-1.0)*r02*x1438))+((x1427*x1454))+(((-1.0)*x1435*x1437*x1455))+(((-1.0)*x1433*x1463))+(((-1.0)*x1433*x1467))+((sj1*x1430*x1436))+(((-1.0)*pz*sj1*x1437*x1442))+(((-1.0)*py*sj1*x1437*x1453))+((x1441*x1461))+(((-1.0)*pz*r02*x1435*x1448))+((x1436*x1466))+(((-1.0)*x1432*x1450))+(((0.08552429)*x1427*x1439))+(((-1.0)*x1436*x1450))+((x1432*x1456))+((x1436*x1456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1469=(cj0*r00);
IkReal x1470=(cj1*sj3);
IkReal x1471=(sj1*sj3);
IkReal x1472=(cj1*cj3);
IkReal x1473=(r01*sj0);
IkReal x1474=((1.0)*cj3*sj1);
IkReal x1475=((1.0)*cj3*x1473);
CheckValue<IkReal> x1476 = IKatan2WithCheck(IkReal((((r02*x1470))+(((-1.0)*x1469*x1472))+(((-1.0)*x1469*x1471))+(((-1.0)*x1471*x1473))+(((-1.0)*r02*x1474))+(((-1.0)*x1472*x1473)))),(((r02*x1472))+((r02*x1471))+((x1470*x1473))+(((-1.0)*x1469*x1474))+((x1469*x1470))+(((-1.0)*x1473*x1474))),IKFAST_ATAN2_MAGTHRESH);
if(!x1476.valid){
continue;
}
CheckValue<IkReal> x1477=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1477.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1476.value)+(((1.5707963267949)*(x1477.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1478=IKcos(j2);
IkReal x1479=IKsin(j2);
IkReal x1480=px*px;
IkReal x1481=py*py;
IkReal x1482=pz*pz;
IkReal x1483=(r01*sj0);
IkReal x1484=((1.0)*cj1);
IkReal x1485=((1.0)*sj1);
IkReal x1486=(py*sj0);
IkReal x1487=(cj0*r00);
IkReal x1488=((2.0)*px);
IkReal x1489=((0.0361)*cj1);
IkReal x1490=(cj3*cj4);
IkReal x1491=(cj1*r00);
IkReal x1492=((0.04688229)*cj4);
IkReal x1493=(cj0*r02);
IkReal x1494=(cj1*py);
IkReal x1495=((0.38)*px);
IkReal x1496=(px*sj1);
IkReal x1497=(r02*sj0);
IkReal x1498=(pz*r01);
IkReal x1499=((2.0)*sj1);
IkReal x1500=((0.38)*r02);
IkReal x1501=((0.38)*pz);
IkReal x1502=(r02*sj1);
IkReal x1503=(cj1*r02);
IkReal x1504=(cj0*r01);
IkReal x1505=((0.0715294)*cj4);
IkReal x1506=(r00*sj1);
IkReal x1507=((0.0361)*sj1);
IkReal x1508=(py*r00);
IkReal x1509=((0.2573)*cj3*sj4);
IkReal x1510=((0.139)*x1479);
IkReal x1511=(cj0*pz*sj1);
IkReal x1512=(sj3*x1479);
IkReal x1513=(pz*r00*sj0);
IkReal x1514=(r02*x1480);
IkReal x1515=((0.139)*x1478);
IkReal x1516=((0.2573)*x1478);
IkReal x1517=(sj1*x1482);
IkReal x1518=(r02*x1481);
IkReal x1519=(sj3*x1478);
evalcond[0]=(((sj1*x1487))+((sj1*x1483))+(((-1.0)*r02*x1484))+((cj4*x1512))+((x1478*x1490)));
evalcond[1]=((((-1.0)*x1484*x1487))+(((-1.0)*x1479*x1490))+(((-1.0)*r02*x1485))+((cj4*x1519))+(((-1.0)*x1483*x1484)));
evalcond[2]=((((-1.0)*sj3*x1516))+(((0.2573)*cj3*x1479))+((sj1*x1486))+x1510+((cj0*x1496))+(((-1.0)*pz*x1484)));
evalcond[3]=((0.19)+(((-1.0)*cj0*px*x1484))+(((-1.0)*x1484*x1486))+((cj3*x1516))+(((0.2573)*x1512))+x1515+(((-1.0)*pz*x1485)));
evalcond[4]=((((-1.0)*x1485*x1508))+(((-1.0)*px*x1484*x1497))+(((-1.0)*sj3*sj4*x1516))+((x1479*x1509))+((r01*x1496))+((sj4*x1510))+((x1493*x1494))+((pz*sj0*x1491))+(((-1.0)*cj0*x1484*x1498)));
evalcond[5]=((((-1.0)*x1485*x1513))+(((-1.0)*x1484*x1508))+(((-1.0)*py*x1485*x1493))+((cj0*sj1*x1498))+((x1496*x1497))+(((0.19)*r00*sj0))+(((-1.0)*x1478*x1509))+(((-0.19)*x1504))+((cj1*px*r01))+(((-0.2573)*sj4*x1512))+(((-1.0)*sj4*x1515)));
evalcond[6]=((((-1.0)*x1485*x1514))+(((-1.0)*x1485*x1518))+(((-1.0)*r00*x1495))+((py*x1498*x1499))+((x1487*x1489))+(((-0.38)*py*r01))+(((-1.0)*x1482*x1484*x1487))+(((-1.0)*x1481*x1484*x1487))+((x1483*x1489))+(((-1.0)*x1482*x1483*x1484))+((cj1*pz*x1488*x1493))+((x1482*x1502))+(((2.0)*pz*x1486*x1503))+((pz*x1488*x1506))+(((0.0361)*x1502))+(((-0.08552429)*x1479*x1490))+(((-1.0)*x1479*x1505))+(((-1.0)*pz*x1500))+((cj1*x1481*x1483))+(((-1.0)*x1480*x1483*x1484))+((cj1*x1480*x1487))+((x1486*x1488*x1491))+((x1492*x1519))+((x1488*x1494*x1504)));
evalcond[7]=(((pz*x1488*x1491))+(((-1.0)*x1484*x1514))+(((-1.0)*x1484*x1518))+((x1483*x1517))+(((0.08552429)*x1478*x1490))+(((-1.0)*pz*sj1*x1488*x1493))+((x1487*x1517))+((x1487*x1507))+((sj1*x1481*x1487))+(((-1.0)*x1483*x1501))+((sj1*x1480*x1483))+(((-1.0)*r02*x1489))+(((-1.0)*x1487*x1501))+((x1482*x1503))+(((-1.0)*x1480*x1485*x1487))+((x1493*x1495))+(((-1.0)*x1486*x1488*x1506))+(((-1.0)*py*sj1*x1488*x1504))+(((-1.0)*x1481*x1483*x1485))+(((-1.0)*pz*r02*x1486*x1499))+(((2.0)*x1494*x1498))+((x1486*x1500))+((x1478*x1505))+((x1492*x1512))+((x1483*x1507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - katana_450_6m180 (918a856a82456acdfb669c2d2f271e86)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
